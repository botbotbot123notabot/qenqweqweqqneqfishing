import logging
from datetime import datetime, timedelta
from collections import defaultdict
import re

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

logger = logging.getLogger(__name__)

BUTTON_GUILDS = "üõ°Ô∏è –ì–∏–ª—å–¥–∏–∏"
BUTTON_MY_GUILD = "üõ°Ô∏è –ú–æ—è –ì–∏–ª—å–¥–∏—è"
BUTTON_CREATE_GUILD = "üõ°Ô∏è –°–æ–∑–¥–∞—Ç—å –≥–∏–ª—å–¥–∏—é"
BUTTON_JOIN_GUILD = "üõ°Ô∏è –í—Å—Ç—É–ø–∏—Ç—å –≤ –≥–∏–ª—å–¥–∏—é"
BUTTON_GUILD_SHOP = "üõçÔ∏è –ì–∏–ª—å–¥–µ–π—Å–∫–∏–π –ú–∞–≥–∞–∑–∏–Ω"
BUTTON_GUILD_LEADERS = "üèÜ –õ–∏–¥–µ—Ä—ã –ì–∏–ª—å–¥–∏–∏"
BUTTON_LEAVE_GUILD = "üö™ –ü–æ–∫–∏–Ω—É—Ç—å –ì–∏–ª—å–¥–∏—é"
BUTTON_GUILD_MEMBERS = "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏"
BUTTON_GUILD_BACK = "üîô –ù–∞–∑–∞–¥ –≤ –≥–∏–ª—å–¥–∏—é"

BUTTON_GUILD_LEADERS_GOLD = "üí∞ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–æ–ª–æ—Ç–∞"
BUTTON_GUILD_LEADERS_KG = "üêü –í—Å–µ–≥–æ –ø–æ–π–º–∞–Ω–æ –ö–ì —Ä—ã–±—ã"
BUTTON_GUILD_LEADERS_EXP = "‚≠ê –í—Å–µ–≥–æ –æ–ø—ã—Ç–∞"
BUTTON_GUILD_LEADERS_BACK = "üîô –ù–∞–∑–∞–¥"

BUTTON_GO_BACK = "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è"

ASK_GUILD_NAME = 100
CONFIRM_CREATE_GUILD = 101
GUILD_MENU = 102
GUILD_LIST = 103
GUILD_CONFIRM_JOIN = 104
GUILD_SHOP_MENU = 105
GUILD_SHOP_CONFIRM = 106
GUILD_LEADERS_MENU = 107
GUILD_LEAVE_CONFIRM = 108
GUILD_MEMBERS_MENU = 109
GUILD_LEADERS_CATEGORY = 110

guilds_data = defaultdict(lambda: {
    "name": None,
    "level": 0,
    "experience": 0,
    "members": set(),
    "leader_id": None,
    "created_time": datetime.utcnow(),
})

GUILD_LEVELS = {
    1: 27000,
    2: 108000,
    3: 324000,
    4: 810000,
    5: 1890000,
    6: 4050000,
    7: 8100000,
}

GUILD_BONUSES = {
    0: (0,0),
    1: (5,5),
    2: (10,10),
    3: (15,15),
    4: (20,20),
    5: (25,25),
    6: (30,30),
    7: (33,33)
}

GUILD_RODS = [
    {"name": "–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è —É–¥–æ—á–∫–∞", "price": 1000, "bonus_percent": 55, "required_level": 0},
    {"name": "–†–µ–∑–Ω–∞—è —É–¥–æ—á–∫–∞", "price": 2000, "bonus_percent": 70, "required_level": 2},
    {"name": "–ë–µ—Å–ø–æ–¥–æ–±–Ω–∞—è —É–¥–æ—á–∫–∞", "price": 5000, "bonus_percent": 80, "required_level": 5},
]

GUILD_BAITS = [
    {
        "name": "–ú–∞–π—Å–∫–∏–π –∂—É–∫",
        "price": 50,
        "duration": 60,
        "probabilities": {"common":40,"rare":57,"legendary":3},
        "required_level":1
    },
    {
        "name": "–í—è–ª–µ–Ω–∞—è —Ä—ã–±–∞",
        "price":300,
        "duration":60,
        "probabilities":{"common":40,"rare":54,"legendary":6},
        "required_level":3
    },
    {
        "name":"–†–æ–±–æ-–Ω–∞–∂–∏–≤–∫–∞",
        "price":2000,
        "duration":60,
        "probabilities":{"common":30,"rare":73,"legendary":7},
        "required_level":5
    },
]

def get_guild_membership_rank(uid, gid, users_data):
    g=guilds_data[gid]
    if g["leader_id"]==uid:
        return "–ì–ª–∞–≤–∞ –≥–∏–ª—å–¥–∏–∏"
    ud=users_data[uid]
    join_time=ud.get("guild_join_time")
    if not join_time:
        return "–ù–æ–≤–∏—á–æ–∫ –≥–∏–ª—å–¥–∏–∏"
    delta=datetime.utcnow()-join_time
    hours=delta.total_seconds()/3600
    if hours<1:
        return "–ù–æ–≤–∏—á–æ–∫ –≥–∏–ª—å–¥–∏–∏"
    elif hours<24:
        return "–ß–ª–µ–Ω –≥–∏–ª—å–¥–∏–∏"
    elif 24<=hours<48:
        return "–•—Ä–∞–Ω–∏—Ç–µ–ª—å –∫—Ä—é—á–∫–æ–≤"
    elif 48<=hours<72:
        return "–°—Ç–æ—Ä–æ–∂ –ø—Ä—É–¥–∞"
    elif 72<=hours<96:
        return "–°—Ç—Ä–∞–∂ —É—Å—Ç—å—è"
    days=delta.days
    if days>=30:
        return "–ì–∏–ª—å–¥–µ–π—Å–∫–∏–π –≤–µ—Ç–µ—Ä–∞–Ω"
    return "–ß–ª–µ–Ω –≥–∏–ª—å–¥–∏–∏"

def calculate_guild_rating(gid, users_data):
    g = guilds_data[gid]
    total_gold=0
    total_kg=0
    total_exp=0
    for uid in g["members"]:
        ud=users_data[uid]
        total_gold+=ud["total_gold_earned"]
        total_kg+=ud["total_kg_caught"]
        total_exp+=ud["experience"]
    rating=(total_gold+total_kg+total_exp)*(1+(g["level"]*0.1))
    return int(rating)

def check_guild_level_up(g):
    current_level=g["level"]
    while current_level<7:
        required=GUILD_LEVELS[current_level+1]
        if g["experience"]>=required:
            g["level"]+=1
            current_level=g["level"]
            logger.info(f"Guild {g['name']} reached level {current_level}")
        else:
            break

def add_guild_exp(uid, player_exp, users_data):
    ud=users_data[uid]
    gid=ud.get("guild_id")
    if gid is None:
        return
    g=guilds_data[gid]
    n=len(g["members"])
    guild_exp_contribution = int(player_exp*100/(n+10))
    g["experience"]+=guild_exp_contribution
    check_guild_level_up(g)

def guild_main_menu_keyboard(user_id, users_data):
    ud = users_data[user_id]
    if ud.get("guild_id") is None:
        return ReplyKeyboardMarkup([
            [KeyboardButton(BUTTON_CREATE_GUILD)],
            [KeyboardButton(BUTTON_JOIN_GUILD)],
            [KeyboardButton(BUTTON_GO_BACK)]
        ], resize_keyboard=True)
    else:
        return ReplyKeyboardMarkup([
            [KeyboardButton(BUTTON_GUILD_SHOP), KeyboardButton(BUTTON_GUILD_LEADERS)],
            [KeyboardButton(BUTTON_GUILD_MEMBERS), KeyboardButton(BUTTON_LEAVE_GUILD)],
            [KeyboardButton(BUTTON_GO_BACK)]
        ], resize_keyboard=True)

def guild_info_text(gid, users_data):
    g=guilds_data[gid]
    guild_name=g["name"]
    lvl=g["level"]
    exp=g["experience"]
    rating=calculate_guild_rating(gid,users_data)
    if lvl<7:
        required=GUILD_LEVELS[lvl+1]
        left=required-exp
    else:
        left=0
    exp_bonus,gold_bonus=GUILD_BONUSES.get(lvl,(0,0))
    if exp_bonus==0 and gold_bonus==0:
        bonuses="–Ω–µ—Ç"
    else:
        bonuses=f"–û–ø—ã—Ç: +{exp_bonus}%, –ó–æ–ª–æ—Ç–æ: +{gold_bonus}%"

    members_count=len(g["members"])
    leader_id=g["leader_id"]
    leader_name=users_data[leader_id]["nickname"] if leader_id else "–Ω–µ—Ç"
    delta=datetime.utcnow()-g["created_time"]
    days=delta.days
    hours=(delta.seconds//3600)

    text=(
        f"üõ°Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –ø–æ–ª—è–Ω—É –≥–∏–ª—å–¥–∏–∏ {guild_name}!\n\n"
        f"üèÖ –£—Ä–æ–≤–µ–Ω—å –≥–∏–ª—å–¥–∏–∏: {lvl}\n"
        f"‚≠ê –û–ø—ã—Ç –≥–∏–ª—å–¥–∏–∏: {exp} (–æ—Å—Ç–∞–ª–æ—Å—å {left} –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è)\n"
        f"üéñ –†–µ–π—Ç–∏–Ω–≥ –≥–∏–ª—å–¥–∏–∏: {rating}\n"
        f"üí´ –¢–µ–∫—É—â–∏–µ –±–æ–Ω—É—Å—ã –≥–∏–ª—å–¥–∏–∏: {bonuses}\n\n"
        f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥–∏–ª—å–¥–∏–∏: {members_count}\n"
        f"üëë –ì–ª–∞–≤–∞ –≥–∏–ª—å–¥–∏–∏: {leader_name}\n"
        f"‚è≥ –í–æ–∑—Ä–∞—Å—Ç –≥–∏–ª—å–¥–∏–∏: {days} –¥–Ω–µ–π {hours} —á–∞—Å–æ–≤\n"
    )
    return text

async def guilds_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    global_users_data=context.application.bot_data["global_users_data"]
    ud=global_users_data[user.id]
    gid=ud.get("guild_id")
    if gid is None or guilds_data[gid]["name"] is None:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –≥–∏–ª—å–¥–∏–∏. –°–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –≤—Å—Ç—É–ø–∏—Ç–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é.",
            reply_markup=guild_main_menu_keyboard(user.id,global_users_data)
        )
    else:
        text=guild_info_text(gid, global_users_data)
        await update.message.reply_text(
            text,
            reply_markup=guild_main_menu_keyboard(user.id,global_users_data)
        )
    return GUILD_MENU

async def create_guild(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–∏–ª—å–¥–∏–∏ (–¥–æ 25 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BUTTON_GO_BACK)]],resize_keyboard=True)
    )
    return ASK_GUILD_NAME

async def set_guild_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    guild_name = update.message.text.strip()
    if len(guild_name)>25:
        await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ.")
        return ASK_GUILD_NAME
    if not re.match(r'^[A-Za-z–ê-–Ø–∞-—è–Å—ë\s]+$', guild_name):
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã!")
        return ASK_GUILD_NAME
    global_users_data=context.application.bot_data["global_users_data"]
    existing=[g["name"] for g in guilds_data.values() if g["name"]]
    if guild_name in existing:
        await update.message.reply_text("–ì–∏–ª—å–¥–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ –µ—Å—Ç—å.")
        return ASK_GUILD_NAME
    context.user_data["new_guild_name"]=guild_name
    await update.message.reply_text(
        f"–°–æ–∑–¥–∞—Ç—å –≥–∏–ª—å–¥–∏—é '{guild_name}' –∑–∞ 1 –∑–æ–ª–æ—Ç–∞?",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚úÖ –î–∞"),KeyboardButton("‚ùå –ù–µ—Ç")]],resize_keyboard=True)
    )
    return CONFIRM_CREATE_GUILD

async def confirm_create_guild(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    global_users_data=context.application.bot_data["global_users_data"]
    ud=global_users_data[user.id]
    guild_name=context.user_data["new_guild_name"]
    if update.message.text=="‚úÖ –î–∞":
        if ud["gold"]<1:
            await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!",reply_markup=guild_main_menu_keyboard(user.id,global_users_data))
            return GUILD_MENU
        new_id=len(guilds_data)+1
        guilds_data[new_id]["name"]=guild_name
        guilds_data[new_id]["level"]=0
        guilds_data[new_id]["experience"]=0
        guilds_data[new_id]["members"]=set([user.id])
        guilds_data[new_id]["leader_id"]=user.id
        guilds_data[new_id]["created_time"]=datetime.utcnow()
        ud["guild_id"]=new_id
        ud["guild_join_time"]=datetime.utcnow()
        ud["gold"]-=1
        text=guild_info_text(new_id, global_users_data)
        await update.message.reply_text(
            text,
            reply_markup=guild_main_menu_keyboard(user.id,global_users_data)
        )
        return GUILD_MENU
    else:
        await update.message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",reply_markup=guild_main_menu_keyboard(user.id,global_users_data))
        return GUILD_MENU

async def join_guild(update: Update, context: ContextTypes.DEFAULT_TYPE):
    all_g=[(gid,g) for gid,g in guilds_data.items() if g["name"]]
    global_users_data=context.application.bot_data["global_users_data"]
    if not all_g:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–∏–ª—å–¥–∏–π.",
                                        reply_markup=guild_main_menu_keyboard(update.effective_user.id,global_users_data))
        return GUILD_MENU
    text="–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥–∏–ª—å–¥–∏–∏:\n"
    for gid,g in all_g:
        text+=f"{g['name']} - {len(g['members'])} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
    text+="–í—ã–±–µ—Ä–∏—Ç–µ –≥–∏–ª—å–¥–∏—é –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å."
    keyboard=[[KeyboardButton(g["name"])] for gid,g in all_g]
    keyboard.append([KeyboardButton(BUTTON_GO_BACK)])
    await update.message.reply_text(text,reply_markup=ReplyKeyboardMarkup(keyboard,resize_keyboard=True))
    return GUILD_LIST

async def select_guild_to_join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    guild_name=update.message.text.strip()
    user=update.effective_user
    global_users_data=context.application.bot_data["global_users_data"]
    ud=global_users_data[user.id]
    if guild_name==BUTTON_GO_BACK:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è - —Ç–µ–ø–µ—Ä—å –ø–æ –¢–ó –ø—Ä–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è" —Å –≥–∏–ª—å–¥–∏–∏ - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è...",
                                        reply_markup=ReplyKeyboardMarkup(
                                            [[KeyboardButton("üèû –û–∑–µ—Ä–æ"),KeyboardButton("üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"),KeyboardButton("üë§ –û —Ä—ã–±–∞–∫–µ")],
                                             [KeyboardButton("üè™ –ú–∞–≥–∞–∑–∏–Ω"),KeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü–∞ –õ–∏–¥–µ—Ä–æ–≤"),KeyboardButton("üõ°Ô∏è –ì–∏–ª—å–¥–∏–∏")],
                                             [KeyboardButton("üîç –ü–æ–º–æ—â—å")]],
                                            resize_keyboard=True))
        return ConversationHandler.END
    for gid,g in guilds_data.items():
        if g["name"]==guild_name:
            context.user_data["join_guild_id"]=gid
            await update.message.reply_text(
                f"–í—Å—Ç—É–ø–∏—Ç—å –≤ '{guild_name}'?",
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚úÖ –î–∞"),KeyboardButton("‚ùå –ù–µ—Ç")]],resize_keyboard=True)
            )
            return GUILD_CONFIRM_JOIN
    await update.message.reply_text("–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    return GUILD_LIST

async def confirm_join_guild(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    global_users_data=context.application.bot_data["global_users_data"]
    ud=global_users_data[user.id]
    if update.message.text=="‚úÖ –î–∞":
        gid=context.user_data["join_guild_id"]
        g=guilds_data[gid]
        g["members"].add(user.id)
        ud["guild_id"]=gid
        ud["guild_join_time"]=datetime.utcnow()
        text=guild_info_text(gid, global_users_data)
        await update.message.reply_text(
            text,
            reply_markup=guild_main_menu_keyboard(user.id,global_users_data)
        )
        return GUILD_MENU
    else:
        await update.message.reply_text("–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                                        reply_markup=guild_main_menu_keyboard(user.id,global_users_data))
        return GUILD_MENU

async def leave_guild(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    global_users_data=context.application.bot_data["global_users_data"]
    ud=global_users_data[user.id]
    if ud.get("guild_id") is None:
        await update.message.reply_text("–í—ã –Ω–µ –≤ –≥–∏–ª—å–¥–∏–∏.",
                                        reply_markup=guild_main_menu_keyboard(user.id,global_users_data))
        return GUILD_MENU
    gid=ud["guild_id"]
    g=guilds_data[gid]
    await update.message.reply_text(
        f"–ü–æ–∫–∏–Ω—É—Ç—å –≥–∏–ª—å–¥–∏—é '{g['name']}'?",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚úÖ –î–∞"),KeyboardButton("‚ùå –ù–µ—Ç")]],resize_keyboard=True)
    )
    return GUILD_LEAVE_CONFIRM

async def confirm_leave_guild(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    global_users_data=context.application.bot_data["global_users_data"]
    ud=global_users_data[user.id]
    gid=ud.get("guild_id")
    if gid is None:
        await update.message.reply_text("–í—ã –Ω–µ –≤ –≥–∏–ª—å–¥–∏–∏.",
                                        reply_markup=guild_main_menu_keyboard(user.id,global_users_data))
        return GUILD_MENU
    g=guilds_data[gid]
    if update.message.text=="‚úÖ –î–∞":
        g["members"].discard(user.id)
        if g["leader_id"]==user.id:
            if len(g["members"])>0:
                new_leader = next(iter(g["members"]))
                g["leader_id"]=new_leader
            else:
                g["name"]=None
        ud["guild_id"]=None
        ud.pop("guild_join_time",None)
        await update.message.reply_text("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –≥–∏–ª—å–¥–∏—é.",
                                        reply_markup=guild_main_menu_keyboard(user.id,global_users_data))
    else:
        await update.message.reply_text("–í—ã –æ—Å—Ç–∞–ª–∏—Å—å –≤ –≥–∏–ª—å–¥–∏–∏.",
                                        reply_markup=guild_main_menu_keyboard(user.id,global_users_data))
    return GUILD_MENU

async def guild_shop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    global_users_data=context.application.bot_data["global_users_data"]
    ud=global_users_data[user.id]
    gid=ud.get("guild_id")
    if gid is None:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –≥–∏–ª—å–¥–∏–∏!",reply_markup=guild_main_menu_keyboard(user.id,global_users_data))
        return GUILD_MENU
    g=guilds_data[gid]
    guild_level=g["level"]
    guild_name=g["name"]

    text=f"üõçÔ∏è –ì–∏–ª—å–¥–µ–π—Å–∫–∏–π –ú–∞–≥–∞–∑–∏–Ω {guild_name}:\n\n"
    rods_available=[rod for rod in GUILD_RODS if guild_level>=rod["required_level"]]
    baits_available=[bait for bait in GUILD_BAITS if guild_level>=bait["required_level"]]

    if rods_available:
        text+="–£–¥–æ—á–∫–∏:\n"
        for rod in rods_available:
            text+=f"{rod['name']} {guild_name} - {rod['price']} –∑–æ–ª–æ—Ç–∞ (-{rod['bonus_percent']}% –≤—Ä–µ–º—è)\n"
        text+="\n"
    if baits_available:
        text+="–ù–∞–∂–∏–≤–∫–∏:\n"
        for bait in baits_available:
            text+=f"{bait['name']} - {bait['price']} –∑–æ–ª–æ—Ç–∞ (–Ω–∞ {bait['duration']} –º–∏–Ω.)\n"

    if not rods_available and not baits_available:
        text+="–ó–¥–µ—Å—å –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç –¥–ª—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è –≥–∏–ª—å–¥–∏–∏."

    text+="\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å."
    keyboard=[]
    for rod in rods_available:
        keyboard.append([KeyboardButton(f"{rod['name']} {guild_name}")])
    for bait in baits_available:
        keyboard.append([KeyboardButton(bait["name"])])

    keyboard.append([KeyboardButton(BUTTON_GUILD_BACK)])
    await update.message.reply_text(text,reply_markup=ReplyKeyboardMarkup(keyboard,resize_keyboard=True))
    return GUILD_SHOP_MENU

async def guild_shop_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    item_name=update.message.text.strip()
    user=update.effective_user
    global_users_data=context.application.bot_data["global_users_data"]
    ud=global_users_data[user.id]
    gid=ud["guild_id"]
    g=guilds_data[gid]
    guild_name=g["name"]

    if item_name==BUTTON_GUILD_BACK:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é –≥–∏–ª—å–¥–∏–∏
        # –ù–æ —Ç–µ–ø–µ—Ä—å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è" —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≥–∏–ª—å–¥–∏–∏ —É—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        # –ú—ã —Ä–µ–∞–ª–∏–∑—É–µ–º —ç—Ç–æ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ, –∞ –∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–µ–º –∫ –∏–Ω—Ñ–æ –æ –≥–∏–ª—å–¥–∏–∏
        text=guild_info_text(gid, global_users_data)
        await update.message.reply_text(text,reply_markup=guild_main_menu_keyboard(user.id,global_users_data))
        return GUILD_MENU

    rods_available=[rod for rod in GUILD_RODS if g["level"]>=rod["required_level"]]
    baits_available=[bait for bait in GUILD_BAITS if g["level"]>=bait["required_level"]]

    chosen_item=None
    item_type=None
    for rod in rods_available:
        full_name=f"{rod['name']} {guild_name}"
        if full_name==item_name:
            chosen_item=rod
            item_type="rod"
            break
    if not chosen_item:
        for bait in baits_available:
            if bait["name"]==item_name:
                chosen_item=bait
                item_type="bait"
                break

    if not chosen_item:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç.",
                                        reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BUTTON_GUILD_BACK)]],resize_keyboard=True))
        return GUILD_SHOP_MENU

    if item_type=="rod":
        await update.message.reply_text(
            f"–ö—É–ø–∏—Ç—å {chosen_item['name']} {guild_name} –∑–∞ {chosen_item['price']} –∑–æ–ª–æ—Ç–∞?",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚úÖ –î–∞"),KeyboardButton("‚ùå –ù–µ—Ç")]],resize_keyboard=True)
        )
    else:
        await update.message.reply_text(
            f"–ö—É–ø–∏—Ç—å –Ω–∞–∂–∏–≤–∫—É {chosen_item['name']} –∑–∞ {chosen_item['price']} –∑–æ–ª–æ—Ç–∞?",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚úÖ –î–∞"),KeyboardButton("‚ùå –ù–µ—Ç")]],resize_keyboard=True)
        )
    context.user_data["guild_shop_item"]=chosen_item
    context.user_data["guild_shop_item_type"]=item_type
    return GUILD_SHOP_CONFIRM

async def guild_shop_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    global_users_data=context.application.bot_data["global_users_data"]
    ud=global_users_data[user.id]
    item=context.user_data["guild_shop_item"]
    item_type=context.user_data["guild_shop_item_type"]
    gid=ud["guild_id"]
    g=guilds_data[gid]
    guild_name=g["name"]

    if update.message.text=="‚úÖ –î–∞":
        if ud["gold"]>=item["price"]:
            ud["gold"]-=item["price"]
            if item_type=="rod":
                new_rod={
                    "name":f"{item['name']} {guild_name}",
                    "bonus_percent":item["bonus_percent"]
                }
                ud["current_rod"]=new_rod
                await update.message.reply_text(f"–í—ã –∫—É–ø–∏–ª–∏ {new_rod['name']}!",
                                                reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BUTTON_GUILD_BACK)]],resize_keyboard=True))
            else:
                end_time = datetime.utcnow()+timedelta(minutes=item["duration"])
                ud["current_bait"]={
                    "name":item["name"],
                    "end_time":end_time,
                    "probabilities":item["probabilities"]
                }
                await update.message.reply_text(
                    f"–í—ã –∫—É–ø–∏–ª–∏ –Ω–∞–∂–∏–≤–∫—É {item['name']}!",
                    reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BUTTON_GUILD_BACK)]],resize_keyboard=True)
                )
        else:
            need=item["price"]-ud["gold"]
            await update.message.reply_text(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞! –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {need}.",
                                            reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BUTTON_GUILD_BACK)]],resize_keyboard=True))
    else:
        await update.message.reply_text("–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                                        reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BUTTON_GUILD_BACK)]],resize_keyboard=True))
    context.user_data.pop("guild_shop_item",None)
    context.user_data.pop("guild_shop_item_type",None)
    return GUILD_SHOP_MENU

async def guild_members(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    global_users_data=context.application.bot_data["global_users_data"]
    ud=global_users_data[user.id]
    gid=ud.get("guild_id")
    if gid is None:
        await update.message.reply_text("–í—ã –Ω–µ –≤ –≥–∏–ª—å–¥–∏–∏.",
                                        reply_markup=guild_main_menu_keyboard(user.id,global_users_data))
        return GUILD_MENU
    g=guilds_data[gid]
    members=list(g["members"])
    leader_id=g["leader_id"]
    members.remove(leader_id)
    members.sort(key=lambda x: global_users_data[x]["guild_join_time"] if global_users_data[x].get("guild_join_time") else datetime.utcnow())
    members=[leader_id]+members

    msg="–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥–∏–ª—å–¥–∏–∏:\n"
    for i,uid_ in enumerate(members,start=1):
        d=global_users_data[uid_]
        name=d["nickname"] if d["nickname"] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        lvl=d["level"]
        guild_rank=get_guild_membership_rank(uid_,gid,global_users_data)
        msg+=f"{i}. {name} ({lvl} —É—Ä.) - {guild_rank}\n"
    keyboard=[[KeyboardButton(BUTTON_GUILD_BACK)]]
    await update.message.reply_text(msg,reply_markup=ReplyKeyboardMarkup(keyboard,resize_keyboard=True))
    return GUILD_MEMBERS_MENU

async def not_implemented_leaders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    global_users_data=context.application.bot_data["global_users_data"]
    ud=global_users_data[user.id]
    gid=ud.get("guild_id")
    if gid is None:
        await update.message.reply_text("–í—ã –Ω–µ –≤ –≥–∏–ª—å–¥–∏–∏.",
                                        reply_markup=guild_main_menu_keyboard(user.id,global_users_data))
        return GUILD_MENU
    keyboard=[
        [KeyboardButton(BUTTON_GUILD_LEADERS_GOLD),KeyboardButton(BUTTON_GUILD_LEADERS_KG)],
        [KeyboardButton(BUTTON_GUILD_LEADERS_EXP)],
        [KeyboardButton(BUTTON_GUILD_BACK)]
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤–Ω—É—Ç—Ä–∏ –≥–∏–ª—å–¥–∏–∏:",
                                    reply_markup=ReplyKeyboardMarkup(keyboard,resize_keyboard=True))
    return GUILD_LEADERS_MENU

async def guild_leaders_show(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    global_users_data=context.application.bot_data["global_users_data"]
    ud=global_users_data[user.id]
    gid=ud["guild_id"]
    g=guilds_data[gid]

    text=update.message.text
    members=list(g["members"])
    if text==BUTTON_GUILD_LEADERS_GOLD:
        cat="–∑–æ–ª–æ—Ç—É"
        members.sort(key=lambda x: global_users_data[x]["total_gold_earned"],reverse=True)
        get_val=lambda d: d["total_gold_earned"]
    elif text==BUTTON_GUILD_LEADERS_KG:
        cat="—É–ª–æ–≤—É"
        members.sort(key=lambda x: global_users_data[x]["total_kg_caught"],reverse=True)
        get_val=lambda d: d["total_kg_caught"]
    elif text==BUTTON_GUILD_LEADERS_EXP:
        cat="–æ–ø—ã—Ç—É"
        members.sort(key=lambda x: global_users_data[x]["experience"],reverse=True)
        get_val=lambda d: d["experience"]
    elif text==BUTTON_GUILD_BACK:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≥–∏–ª—å–¥–∏–∏
        text_=guild_info_text(gid,global_users_data)
        await update.message.reply_text(text_,reply_markup=guild_main_menu_keyboard(user.id,global_users_data))
        return GUILD_MENU
    else:
        text_=guild_info_text(gid,global_users_data)
        await update.message.reply_text(text_,reply_markup=guild_main_menu_keyboard(user.id,global_users_data))
        return GUILD_MENU

    msg=f"üèÜ –¢–æ–ø –ø–æ {cat} –≤–Ω—É—Ç—Ä–∏ –≥–∏–ª—å–¥–∏–∏:\n"
    for i,uid_ in enumerate(members[:10], start=1):
        d=global_users_data[uid_]
        name=d["nickname"] if d["nickname"] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä—ã–±–∞–∫"
        lvl=d["level"]
        guild_rank=get_guild_membership_rank(uid_,gid,global_users_data)
        val=get_val(d)
        msg+=f"{i}. {name} ({lvl} —É—Ä.) - {guild_rank} - {val}\n"

    await update.message.reply_text(msg,reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BUTTON_GUILD_BACK)]],resize_keyboard=True))
    return GUILD_LEADERS_MENU

async def go_back_guild(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è" –∏–∑ –≥–∏–ª—å–¥–∏–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è...",
                                    reply_markup=ReplyKeyboardMarkup(
                                        [[KeyboardButton("üèû –û–∑–µ—Ä–æ"),KeyboardButton("üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"),KeyboardButton("üë§ –û —Ä—ã–±–∞–∫–µ")],
                                         [KeyboardButton("üè™ –ú–∞–≥–∞–∑–∏–Ω"),KeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü–∞ –õ–∏–¥–µ—Ä–æ–≤"),KeyboardButton("üõ°Ô∏è –ì–∏–ª—å–¥–∏–∏")],
                                         [KeyboardButton("üîç –ü–æ–º–æ—â—å")]],
                                        resize_keyboard=True))
    return ConversationHandler.END

async def go_back_guild_members(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ, "–í–µ—Ä–Ω—É—Ç—å—Å—è" –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è...",
                                    reply_markup=ReplyKeyboardMarkup(
                                        [[KeyboardButton("üèû –û–∑–µ—Ä–æ"),KeyboardButton("üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"),KeyboardButton("üë§ –û —Ä—ã–±–∞–∫–µ")],
                                         [KeyboardButton("üè™ –ú–∞–≥–∞–∑–∏–Ω"),KeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü–∞ –õ–∏–¥–µ—Ä–æ–≤"),KeyboardButton("üõ°Ô∏è –ì–∏–ª—å–¥–∏–∏")],
                                         [KeyboardButton("üîç –ü–æ–º–æ—â—å")]],
                                        resize_keyboard=True))
    return ConversationHandler.END

def guild_conversation_handler():
    return ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(f"^{BUTTON_GUILDS}$"), guilds_handler)],
        states={
            GUILD_MENU:[
                MessageHandler(filters.Regex("^"+re.escape(BUTTON_CREATE_GUILD)+"$"), create_guild),
                MessageHandler(filters.Regex("^"+re.escape(BUTTON_JOIN_GUILD)+"$"), join_guild),
                MessageHandler(filters.Regex("^"+re.escape(BUTTON_LEAVE_GUILD)+"$"), leave_guild),
                MessageHandler(filters.Regex("^"+re.escape(BUTTON_GUILD_SHOP)+"$"), guild_shop),
                MessageHandler(filters.Regex("^"+re.escape(BUTTON_GUILD_LEADERS)+"$"), not_implemented_leaders),
                MessageHandler(filters.Regex("^"+re.escape(BUTTON_GUILD_MEMBERS)+"$"), guild_members),
                MessageHandler(filters.Regex("^"+re.escape(BUTTON_GO_BACK)+"$"), go_back_guild),
            ],
            ASK_GUILD_NAME:[
                MessageHandler((filters.TEXT & ~filters.COMMAND), set_guild_name),
                MessageHandler(filters.Regex("^"+re.escape(BUTTON_GO_BACK)+"$"), go_back_guild)
            ],
            CONFIRM_CREATE_GUILD:[MessageHandler(filters.Regex("^‚úÖ –î–∞$|^‚ùå –ù–µ—Ç$"), confirm_create_guild)],
            GUILD_LIST:[
                MessageHandler((filters.TEXT & ~filters.COMMAND), select_guild_to_join),
                MessageHandler(filters.Regex("^"+re.escape(BUTTON_GO_BACK)+"$"), go_back_guild)
            ],
            GUILD_CONFIRM_JOIN:[MessageHandler(filters.Regex("^‚úÖ –î–∞$|^‚ùå –ù–µ—Ç$"), confirm_join_guild)],
            GUILD_LEAVE_CONFIRM:[MessageHandler(filters.Regex("^‚úÖ –î–∞$|^‚ùå –ù–µ—Ç$"), confirm_leave_guild)],
            GUILD_SHOP_MENU:[
                MessageHandler(filters.Regex("^"+re.escape(BUTTON_GUILD_BACK)+"$"), go_back_guild),
                MessageHandler((filters.TEXT & ~filters.COMMAND), guild_shop_select)
            ],
            GUILD_SHOP_CONFIRM:[
                MessageHandler(filters.Regex("^‚úÖ –î–∞$|^‚ùå –ù–µ—Ç$"), guild_shop_confirm)
            ],
            GUILD_MEMBERS_MENU:[
                MessageHandler(filters.Regex("^"+re.escape(BUTTON_GUILD_BACK)+"$"), go_back_guild_members)
            ],
            GUILD_LEADERS_MENU:[
                MessageHandler(filters.Regex("^"+re.escape(BUTTON_GUILD_LEADERS_GOLD)+"$|^"+re.escape(BUTTON_GUILD_LEADERS_KG)+"$|^"+re.escape(BUTTON_GUILD_LEADERS_EXP)+"$|^"+re.escape(BUTTON_GUILD_BACK)+"$"), guild_leaders_show),
            ],
        },
        fallbacks=[MessageHandler(filters.Regex("^"+re.escape(BUTTON_GO_BACK)+"$"), go_back_guild)],
        allow_reentry=True
    )