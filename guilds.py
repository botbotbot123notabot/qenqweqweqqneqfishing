import logging
import re
import sqlite3
from datetime import datetime, timedelta

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

logger = logging.getLogger(__name__)

BUTTON_GUILDS = "üõ°Ô∏è –ì–∏–ª—å–¥–∏–∏"
BUTTON_MY_GUILD = "üõ°Ô∏è –ú–æ—è –ì–∏–ª—å–¥–∏—è"

BUTTON_CREATE_GUILD = "üõ°Ô∏è –°–æ–∑–¥–∞—Ç—å –≥–∏–ª—å–¥–∏—é"
BUTTON_JOIN_GUILD = "üõ°Ô∏è –í—Å—Ç—É–ø–∏—Ç—å –≤ –≥–∏–ª—å–¥–∏—é"
BUTTON_LEAVE_GUILD = "üö™ –ü–æ–∫–∏–Ω—É—Ç—å –ì–∏–ª—å–¥–∏—é"
BUTTON_GUILD_SHOP = "üõçÔ∏è –ì–∏–ª—å–¥–µ–π—Å–∫–∏–π –ú–∞–≥–∞–∑–∏–Ω"
BUTTON_GUILD_LEADERS = "üèÜ –õ–∏–¥–µ—Ä—ã –ì–∏–ª—å–¥–∏–∏"
BUTTON_GUILD_MEMBERS = "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏"
BUTTON_GUILD_BACK = "üîô –ù–∞–∑–∞–¥ –≤ –≥–∏–ª—å–¥–∏—é"

BUTTON_GUILD_LEADERS_GOLD = "üí∞ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–æ–ª–æ—Ç–∞"
BUTTON_GUILD_LEADERS_KG = "üêü –í—Å–µ–≥–æ –ø–æ–π–º–∞–Ω–æ –ö–ì —Ä—ã–±—ã"
BUTTON_GUILD_LEADERS_EXP = "‚≠ê –í—Å–µ–≥–æ –æ–ø—ã—Ç–∞"
BUTTON_GUILD_LEADERS_BACK = "üîô –ù–∞–∑–∞–¥"

BUTTON_GO_BACK = "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è"

ASK_GUILD_NAME = 100
CONFIRM_CREATE_GUILD = 101
GUILD_MENU = 102
GUILD_LIST = 103
GUILD_CONFIRM_JOIN = 104
GUILD_SHOP_MENU = 105
GUILD_SHOP_CONFIRM = 106
GUILD_LEADERS_MENU = 107
GUILD_LEAVE_CONFIRM = 108
GUILD_MEMBERS_MENU = 109
GUILD_LEADERS_CATEGORY = 110

# –ì–∏–ª—å–¥–∏–∏ –∏ –∏—Ö —É—Ä–æ–≤–Ω–∏, –æ–ø—ã—Ç, –±–æ–Ω—É—Å—ã
GUILD_LEVELS = {
    1: 27000,
    2: 108000,
    3: 324000,
    4: 810000,
    5: 1890000,
    6: 4050000,
    7: 8100000,
}

GUILD_BONUSES = {
    0: (0,0),
    1: (5,5),
    2: (10,10),
    3: (15,15),
    4: (20,20),
    5: (25,25),
    6: (30,30),
    7: (33,33)
}

GUILD_RODS = [
    {"name": "–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è —É–¥–æ—á–∫–∞", "price": 1000, "bonus_percent": 55, "required_level": 0},
    {"name": "–†–µ–∑–Ω–∞—è —É–¥–æ—á–∫–∞",    "price": 2000, "bonus_percent": 70, "required_level": 2},
    {"name": "–ë–µ—Å–ø–æ–¥–æ–±–Ω–∞—è —É–¥–æ—á–∫–∞","price":5000, "bonus_percent": 80, "required_level": 5},
]

GUILD_BAITS = [
    {
        "name": "–ú–∞–π—Å–∫–∏–π –∂—É–∫",
        "price": 50,
        "duration":60,  # –≤ –º–∏–Ω—É—Ç–∞—Ö
        "probabilities":{"common":40,"rare":57,"legendary":3},
        "required_level":1
    },
    {
        "name": "–í—è–ª–µ–Ω–∞—è —Ä—ã–±–∞",
        "price":300,
        "duration":60,
        "probabilities":{"common":40,"rare":54,"legendary":6},
        "required_level":3
    },
    {
        "name":"–†–æ–±–æ-–Ω–∞–∂–∏–≤–∫–∞",
        "price":2000,
        "duration":60,
        "probabilities":{"common":30,"rare":73,"legendary":7},
        "required_level":5
    },
]

def get_guild_membership_rank(uid, gid, db):
    """
    –†–∞–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤–Ω—É—Ç—Ä–∏ –≥–∏–ª—å–¥–∏–∏:
    - '–ì–ª–∞–≤–∞ –≥–∏–ª—å–¥–∏–∏', –µ—Å–ª–∏ uid == leader_id
    - –ò–Ω–∞—á–µ - –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ –≥–∏–ª—å–¥–∏–∏
    """
    g=db.get_guild(gid)
    if not g:
        return "–ù–µ—Ç –≥–∏–ª—å–¥–∏–∏"
    if g["leader_id"]==uid:
        return "–ì–ª–∞–≤–∞ –≥–∏–ª—å–¥–∏–∏"
    user_data=db.get_user(uid)
    join_time=user_data[15]  # guild_join_time
    if not join_time:
        return "–ù–æ–≤–∏—á–æ–∫ –≥–∏–ª—å–¥–∏–∏"
    join_dt=datetime.fromisoformat(join_time)
    delta=datetime.utcnow()-join_dt
    hours=delta.total_seconds()/3600
    if hours<1:
        return "–ù–æ–≤–∏—á–æ–∫ –≥–∏–ª—å–¥–∏–∏"
    elif hours<24:
        return "–ß–ª–µ–Ω –≥–∏–ª—å–¥–∏–∏"
    elif 24<=hours<48:
        return "–•—Ä–∞–Ω–∏—Ç–µ–ª—å –∫—Ä—é—á–∫–æ–≤"
    elif 48<=hours<72:
        return "–°—Ç–æ—Ä–æ–∂ –ø—Ä—É–¥–∞"
    elif 72<=hours<96:
        return "–°—Ç—Ä–∞–∂ —É—Å—Ç—å—è"
    days=delta.days
    if days>=30:
        return "–ì–∏–ª—å–¥–µ–π—Å–∫–∏–π –≤–µ—Ç–µ—Ä–∞–Ω"
    return "–ß–ª–µ–Ω –≥–∏–ª—å–¥–∏–∏"

def calculate_guild_rating(gid, db):
    g=db.get_guild(gid)
    if not g or not g["name"]:
        return 0
    members=db.get_guild_members(gid)
    total_gold=0
    total_kg=0
    total_exp=0
    for uid in members:
        u=db.get_user(uid)
        total_gold+=u[12]  # total_gold_earned
        total_kg+=u[13]    # total_kg_caught
        total_exp+=u[3]    # experience
    rating=(total_gold+total_kg+total_exp)*(1+(g["level"]*0.1))
    return int(rating)

def check_guild_level_up(g, db):
    current_level=g["level"]
    while current_level<7:
        required=GUILD_LEVELS[current_level+1]
        if g["experience"]>=required:
            current_level+=1
            db.update_guild(g["guild_id"], level=current_level)
            g["level"]=current_level
            logger.info(f"Guild {g['name']} –ø–æ–≤—ã—Å–∏–ª–∞ —É—Ä–æ–≤–µ–Ω—å –¥–æ {current_level}")
        else:
            break

def add_guild_exp(uid, xp, db):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –æ–ø—ã—Ç –≥–∏–ª—å–¥–∏–∏: guild_exp_contribution = xp * 100 / (n+10)
    """
    u=db.get_user(uid)
    gid=u[14]
    if gid is None:
        return
    g=db.get_guild(gid)
    members=db.get_guild_members(gid)
    n=len(members)
    guild_exp=int(xp*100/(n+10))
    new_exp=g["experience"]+guild_exp
    db.update_guild(gid, experience=new_exp)
    g["experience"]=new_exp
    check_guild_level_up(g, db)

def guild_main_menu_keyboard(user_id, db):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –≥–∏–ª—å–¥–∏–∏.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –≥–∏–ª—å–¥–∏–∏ -> —Å–æ–∑–¥–∞—Ç—å/–≤—Å—Ç—É–ø–∏—Ç—å.
    –ï—Å–ª–∏ –≤ –≥–∏–ª—å–¥–∏–∏ -> –∏–Ω—Ñ–æ, –º–∞–≥–∞–∑–∏–Ω, –ª–∏–¥–µ—Ä—ã, –≤—ã—Ö–æ–¥.
    """
    u=db.get_user(user_id)
    gid=u[14]
    if gid is None:
        # –Ω–µ—Ç –≥–∏–ª—å–¥–∏–∏
        return ReplyKeyboardMarkup([
            [KeyboardButton(BUTTON_CREATE_GUILD)],
            [KeyboardButton(BUTTON_JOIN_GUILD)],
            [KeyboardButton(BUTTON_GO_BACK)]
        ], resize_keyboard=True)
    else:
        return ReplyKeyboardMarkup([
            [KeyboardButton(BUTTON_GUILD_SHOP), KeyboardButton(BUTTON_GUILD_LEADERS)],
            [KeyboardButton(BUTTON_GUILD_MEMBERS), KeyboardButton(BUTTON_LEAVE_GUILD)],
            [KeyboardButton(BUTTON_GO_BACK)]
        ], resize_keyboard=True)

def guild_info_text(gid, db):
    g=db.get_guild(gid)
    if not g or not g["name"]:
        return "–ü–æ—Ö–æ–∂–µ, —ç—Ç–∞ –≥–∏–ª—å–¥–∏—è —É–∂–µ —É–¥–∞–ª–µ–Ω–∞."
    guild_name=g["name"]
    lvl=g["level"]
    exp=g["experience"]
    rating=calculate_guild_rating(gid, db)

    if lvl<7:
        need=GUILD_LEVELS[lvl+1]
        left=need-exp
    else:
        left=0
    exp_b, gold_b = GUILD_BONUSES.get(lvl, (0,0))
    if exp_b==0 and gold_b==0:
        bonuses="–Ω–µ—Ç"
    else:
        bonuses=f"–û–ø—ã—Ç: +{exp_b}%, –ó–æ–ª–æ—Ç–æ: +{gold_b}%"

    members_count=len(db.get_guild_members(gid))
    leader_id=g["leader_id"]
    leader_data=db.get_user(leader_id)
    leader_name=leader_data[1] if leader_data[1] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    creation_dt=datetime.fromisoformat(g["created_time"])
    delta=datetime.utcnow()-creation_dt
    days=delta.days
    hours=(delta.seconds//3600)

    text = (
        f"üõ°Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –ø–æ–ª—è–Ω—É –≥–∏–ª—å–¥–∏–∏ {guild_name}!\n\n"
        f"üèÖ –£—Ä–æ–≤–µ–Ω—å –≥–∏–ª—å–¥–∏–∏: {lvl}\n"
        f"‚≠ê –û–ø—ã—Ç –≥–∏–ª—å–¥–∏–∏: {exp} (–æ—Å—Ç–∞–ª–æ—Å—å {left} –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è)\n"
        f"üéñ –†–µ–π—Ç–∏–Ω–≥ –≥–∏–ª—å–¥–∏–∏: {rating}\n"
        f"üí´ –¢–µ–∫—É—â–∏–µ –±–æ–Ω—É—Å—ã: {bonuses}\n\n"
        f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {members_count}\n"
        f"üëë –ì–ª–∞–≤–∞ –≥–∏–ª—å–¥–∏–∏: {leader_name}\n"
        f"‚è≥ –í–æ–∑—Ä–∞—Å—Ç –≥–∏–ª—å–¥–∏–∏: {days} –¥–Ω–µ–π {hours} —á–∞—Å–æ–≤\n"
    )
    return text

async def guilds_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db=context.application.bot_data["db"]
    user=update.effective_user
    u=db.get_user(user.id)
    gid=u[14]
    if gid is None:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –≥–∏–ª—å–¥–∏–∏. –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∏–ª–∏ –≤—Å—Ç—É–ø–∏—Ç—å –≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é?",
            reply_markup=guild_main_menu_keyboard(user.id, db)
        )
    else:
        g=db.get_guild(gid)
        if g and g["name"]:
            text=guild_info_text(gid, db)
        else:
            text="–ü–æ—Ö–æ–∂–µ, –≥–∏–ª—å–¥–∏—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞."
        await update.message.reply_text(text,reply_markup=guild_main_menu_keyboard(user.id,db))
    return GUILD_MENU

async def create_guild(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–∏–ª—å–¥–∏–∏ (–¥–æ 25 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã):",
        reply_markup=ReplyKeyboardRemove()
    )
    return ASK_GUILD_NAME

async def set_guild_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db=context.application.bot_data["db"]
    name=update.message.text.strip()
    if len(name)>25:
        await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –≥–∏–ª—å–¥–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ.")
        return ASK_GUILD_NAME
    if not re.match(r'^[A-Za-z–ê-–Ø–∞-—è–Å—ë\s]+$', name):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã.")
        return ASK_GUILD_NAME

    # –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –≥–∏–ª—å–¥–∏—è
    conn=sqlite3.connect(db.db_path)
    c=conn.cursor()
    c.execute("SELECT guild_id FROM guilds WHERE name=? AND name IS NOT NULL",(name,))
    row=c.fetchone()
    conn.close()
    if row:
        await update.message.reply_text("–ì–∏–ª—å–¥–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return ASK_GUILD_NAME

    context.user_data["new_guild_name"]=name
    await update.message.reply_text(
        f"–°–æ–∑–¥–∞—Ç—å –≥–∏–ª—å–¥–∏—é ¬´{name}¬ª –∑–∞ 1 –∑–æ–ª–æ—Ç–∞?",
        reply_markup=ReplyKeyboardMarkup([
            [KeyboardButton("‚úÖ –î–∞"),KeyboardButton("‚ùå –ù–µ—Ç")]
        ],resize_keyboard=True)
    )
    return CONFIRM_CREATE_GUILD

async def confirm_create_guild(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db=context.application.bot_data["db"]
    user=update.effective_user
    u=db.get_user(user.id)
    gold=u[2]
    name=context.user_data["new_guild_name"]
    if update.message.text=="‚úÖ –î–∞":
        if gold<1:
            await update.message.reply_text(
                "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–∏–ª—å–¥–∏–∏!",
                reply_markup=guild_main_menu_keyboard(user.id,db)
            )
            return GUILD_MENU
        gid=db.create_guild(name, user.id)
        db.update_user(user.id, gold=gold-1, guild_id=gid, guild_join_time=datetime.utcnow().isoformat())
        text=guild_info_text(gid, db)
        await update.message.reply_text(text, reply_markup=guild_main_menu_keyboard(user.id,db))
        return GUILD_MENU
    else:
        await update.message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ –≥–∏–ª—å–¥–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",reply_markup=guild_main_menu_keyboard(user.id,db))
        return GUILD_MENU

async def join_guild(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db=context.application.bot_data["db"]
    conn=sqlite3.connect(db.db_path)
    c=conn.cursor()
    c.execute("SELECT guild_id,name FROM guilds WHERE name IS NOT NULL")
    rows=c.fetchall()
    conn.close()
    user=update.effective_user

    if not rows:
        await update.message.reply_text(
            "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–∏–ª—å–¥–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é!",
            reply_markup=guild_main_menu_keyboard(user.id,db)
        )
        return GUILD_MENU
    text="–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥–∏–ª—å–¥–∏–∏:\n"
    for (g_id, g_name) in rows:
        members = db.get_guild_members(g_id)
        text+=f"{g_name} - {len(members)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
    text+="\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–∏–ª—å–¥–∏–∏ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å."
    kb=[[KeyboardButton(r[1])] for r in rows]
    kb.append([KeyboardButton(BUTTON_GO_BACK)])
    await update.message.reply_text(text,reply_markup=ReplyKeyboardMarkup(kb,resize_keyboard=True))
    return GUILD_LIST

async def select_guild_to_join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db=context.application.bot_data["db"]
    user=update.effective_user
    text_=update.message.text.strip()
    if text_==BUTTON_GO_BACK:
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è...",reply_markup=guild_main_menu_keyboard(user.id,db))
        return GUILD_MENU
    conn=sqlite3.connect(db.db_path)
    c=conn.cursor()
    c.execute("SELECT guild_id FROM guilds WHERE name=? AND name IS NOT NULL",(text_,))
    row=c.fetchone()
    conn.close()
    if not row:
        await update.message.reply_text(
            "–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å.",
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton(BUTTON_GO_BACK)]
            ],resize_keyboard=True)
        )
        return GUILD_LIST
    context.user_data["join_guild_id"]=row[0]
    await update.message.reply_text(
        f"–í—Å—Ç—É–ø–∏—Ç—å –≤ –≥–∏–ª—å–¥–∏—é ¬´{text_}¬ª?",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚úÖ –î–∞"),KeyboardButton("‚ùå –ù–µ—Ç")]],resize_keyboard=True)
    )
    return GUILD_CONFIRM_JOIN

async def confirm_join_guild(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db=context.application.bot_data["db"]
    user=update.effective_user
    if update.message.text=="‚úÖ –î–∞":
        gid=context.user_data["join_guild_id"]
        db.add_guild_member(gid, user.id)
        db.update_user(user.id, guild_id=gid, guild_join_time=datetime.utcnow().isoformat())
        text=guild_info_text(gid, db)
        await update.message.reply_text(text,reply_markup=guild_main_menu_keyboard(user.id,db))
        return GUILD_MENU
    else:
        await update.message.reply_text("–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",reply_markup=guild_main_menu_keyboard(user.id,db))
        return GUILD_MENU

async def leave_guild(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db=context.application.bot_data["db"]
    user=update.effective_user
    u=db.get_user(user.id)
    gid=u[14]
    if gid is None:
        await update.message.reply_text(
            "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏–∏.",
            reply_markup=guild_main_menu_keyboard(user.id,db)
        )
        return GUILD_MENU
    g=db.get_guild(gid)
    await update.message.reply_text(
        f"–ü–æ–∫–∏–Ω—É—Ç—å –≥–∏–ª—å–¥–∏—é ¬´{g['name']}¬ª?",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚úÖ –î–∞"),KeyboardButton("‚ùå –ù–µ—Ç")]],resize_keyboard=True)
    )
    return GUILD_LEAVE_CONFIRM

async def confirm_leave_guild(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db=context.application.bot_data["db"]
    user=update.effective_user
    u=db.get_user(user.id)
    gid=u[14]
    if gid is None:
        await update.message.reply_text(
            "–í—ã –Ω–µ –≤ –≥–∏–ª—å–¥–∏–∏.",
            reply_markup=guild_main_menu_keyboard(user.id,db)
        )
        return GUILD_MENU
    g=db.get_guild(gid)
    if update.message.text=="‚úÖ –î–∞":
        db.remove_guild_member(gid,user.id)
        # –ï—Å–ª–∏ –ª–∏–¥–µ—Ä –ø–æ–∫–∏–Ω—É–ª ‚Äî –ø–µ—Ä–µ–¥–∞—ë–º –ª–∏–¥–µ—Ä—Å—Ç–≤–æ –∏–ª–∏ —É–¥–∞–ª—è–µ–º –≥–∏–ª—å–¥–∏—é
        if g["leader_id"]==user.id:
            mems=db.get_guild_members(gid)
            if mems:
                new_leader=mems[0]
                db.update_guild(gid, leader_id=new_leader)
            else:
                db.update_guild(gid, name=None)  # –£–¥–∞–ª—è–µ–º –≥–∏–ª—å–¥–∏—é
        db.update_user(user.id, guild_id=None, guild_join_time=None)
        await update.message.reply_text(
            "–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –≥–∏–ª—å–¥–∏—é.",
            reply_markup=guild_main_menu_keyboard(user.id,db)
        )
    else:
        await update.message.reply_text(
            "–í—ã –æ—Å—Ç–∞–ª–∏—Å—å –≤ –≥–∏–ª—å–¥–∏–∏.",
            reply_markup=guild_main_menu_keyboard(user.id,db)
        )
    return GUILD_MENU

async def guild_shop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db=context.application.bot_data["db"]
    user=update.effective_user
    u=db.get_user(user.id)
    gid=u[14]
    if gid is None:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –≥–∏–ª—å–¥–∏–∏!",reply_markup=guild_main_menu_keyboard(user.id,db))
        return GUILD_MENU
    g=db.get_guild(gid)
    guild_level=g["level"]
    guild_name=g["name"]

    rods_available=[rod for rod in GUILD_RODS if guild_level>=rod["required_level"]]
    baits_available=[bait for bait in GUILD_BAITS if guild_level>=bait["required_level"]]

    text=f"üõçÔ∏è –ì–∏–ª—å–¥–µ–π—Å–∫–∏–π –ú–∞–≥–∞–∑–∏–Ω ¬´{guild_name}¬ª\n\n"
    if rods_available:
        text+="–î–æ—Å—Ç—É–ø–Ω—ã–µ —É–¥–æ—á–∫–∏:\n"
        for rod in rods_available:
            text+=f"{rod['name']} - {rod['price']} –∑–æ–ª–æ—Ç–∞ (-{rod['bonus_percent']}% –≤—Ä–µ–º—è)\n"
        text+="\n"
    if baits_available:
        text+="–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–∂–∏–≤–∫–∏:\n"
        for bait in baits_available:
            text+=f"{bait['name']} - {bait['price']} –∑–æ–ª–æ—Ç–∞ (–Ω–∞ {bait['duration']} –º–∏–Ω.)\n"

    if not rods_available and not baits_available:
        text+="–£—Ä–æ–≤–µ–Ω—å –≥–∏–ª—å–¥–∏–∏ –ø–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π, –∑–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –Ω–µ—Ç."

    text+="\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å."
    keyboard=[]
    for rod in rods_available:
        keyboard.append([KeyboardButton(rod["name"])])
    for bait in baits_available:
        keyboard.append([KeyboardButton(bait["name"])])

    keyboard.append([KeyboardButton(BUTTON_GUILD_BACK)])
    await update.message.reply_text(text,reply_markup=ReplyKeyboardMarkup(keyboard,resize_keyboard=True))
    return GUILD_SHOP_MENU

async def guild_shop_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db=context.application.bot_data["db"]
    user=update.effective_user
    u=db.get_user(user.id)
    gid=u[14]
    if gid is None:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –≥–∏–ª—å–¥–∏–∏!",reply_markup=guild_main_menu_keyboard(user.id,db))
        return GUILD_MENU
    g=db.get_guild(gid)
    guild_name=g["name"]

    item_name=update.message.text.strip()
    if item_name==BUTTON_GUILD_BACK:
        txt=guild_info_text(gid,db)
        await update.message.reply_text(txt,reply_markup=guild_main_menu_keyboard(user.id,db))
        return GUILD_MENU

    rods_available=[rod for rod in GUILD_RODS if g["level"]>=rod["required_level"]]
    baits_available=[bait for bait in GUILD_BAITS if g["level"]>=bait["required_level"]]

    chosen_item=None
    item_type=None

    for rod in rods_available:
        if rod["name"]==item_name:
            chosen_item=rod
            item_type="rod"
            break
    if not chosen_item:
        for bait in baits_available:
            if bait["name"]==item_name:
                chosen_item=bait
                item_type="bait"
                break

    if not chosen_item:
        await update.message.reply_text(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç.",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BUTTON_GUILD_BACK)]],resize_keyboard=True)
        )
        return GUILD_SHOP_MENU

    if item_type=="rod":
        await update.message.reply_text(
            f"–ö—É–ø–∏—Ç—å ¬´{chosen_item['name']}¬ª –∑–∞ {chosen_item['price']} –∑–æ–ª–æ—Ç–∞?",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚úÖ –î–∞"),KeyboardButton("‚ùå –ù–µ—Ç")]],resize_keyboard=True)
        )
    else:
        await update.message.reply_text(
            f"–ö—É–ø–∏—Ç—å –Ω–∞–∂–∏–≤–∫—É ¬´{chosen_item['name']}¬ª –∑–∞ {chosen_item['price']} –∑–æ–ª–æ—Ç–∞?",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚úÖ –î–∞"),KeyboardButton("‚ùå –ù–µ—Ç")]],resize_keyboard=True)
        )
    context.user_data["guild_shop_item"]=chosen_item
    context.user_data["guild_shop_item_type"]=item_type
    return GUILD_SHOP_CONFIRM

async def guild_shop_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db=context.application.bot_data["db"]
    user=update.effective_user
    u=db.get_user(user.id)
    gid=u[14]
    if gid is None:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –≥–∏–ª—å–¥–∏–∏!",reply_markup=guild_main_menu_keyboard(user.id,db))
        return GUILD_MENU
    g=db.get_guild(gid)
    guild_name=g["name"]

    item=context.user_data["guild_shop_item"]
    item_type=context.user_data["guild_shop_item_type"]
    if update.message.text=="‚úÖ –î–∞":
        if u[2]>=item["price"]:
            gold_left=u[2]-item["price"]
            db.update_user(user.id, gold=gold_left)
            if item_type=="rod":
                new_rod_name=f"{item['name']} {guild_name}"  # –¥–æ–±–∞–≤–∏–º –≥–∏–ª—å–¥–∏—é –∫ –Ω–∞–∑–≤–∞–Ω–∏—é
                db.update_user(user.id, current_rod_name=new_rod_name, current_rod_bonus=item["bonus_percent"])
                await update.message.reply_text(
                    f"–í—ã –∫—É–ø–∏–ª–∏ ¬´{new_rod_name}¬ª!",
                    reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BUTTON_GUILD_BACK)]],resize_keyboard=True)
                )
            else:
                end_time=datetime.utcnow()+timedelta(minutes=item["duration"])
                import json
                db.update_user(
                    user.id,
                    current_bait_name=item["name"],
                    current_bait_end=end_time.isoformat(),
                    current_bait_probs=json.dumps(item["probabilities"])
                )
                await update.message.reply_text(
                    f"–í—ã –∫—É–ø–∏–ª–∏ –Ω–∞–∂–∏–≤–∫—É ¬´{item['name']}¬ª!",
                    reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BUTTON_GUILD_BACK)]],resize_keyboard=True)
                )
        else:
            need=item["price"]-u[2]
            await update.message.reply_text(
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞! –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {need}.",
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BUTTON_GUILD_BACK)]],resize_keyboard=True)
            )
    else:
        await update.message.reply_text(
            "–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BUTTON_GUILD_BACK)]],resize_keyboard=True)
        )
    context.user_data.pop("guild_shop_item",None)
    context.user_data.pop("guild_shop_item_type",None)
    return GUILD_SHOP_MENU

async def guild_members(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db=context.application.bot_data["db"]
    user=update.effective_user
    u=db.get_user(user.id)
    gid=u[14]
    if gid is None:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –≥–∏–ª—å–¥–∏–∏.",
            reply_markup=guild_main_menu_keyboard(user.id,db)
        )
        return GUILD_MENU
    g=db.get_guild(gid)
    members=db.get_guild_members(gid)
    leader_id=g["leader_id"]

    # –£–±–∏—Ä–∞–µ–º –ª–∏–¥–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞, –¥–æ–±–∞–≤–∏–º –µ–≥–æ –≤ –Ω–∞—á–∞–ª–æ
    if leader_id in members:
        members.remove(leader_id)

    def join_dt(uid_):
        u_ = db.get_user(uid_)
        jts = u_[15]  # guild_join_time
        if jts:
            return datetime.fromisoformat(jts)
        return datetime.utcnow()

    # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è
    members.sort(key=join_dt)
    members=[leader_id]+members

    msg="–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥–∏–ª—å–¥–∏–∏:\n"
    i=1
    for uid_ in members:
        d=db.get_user(uid_)
        name=d[1] if d[1] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        lvl=d[4]
        rank=get_guild_membership_rank(uid_,gid,db)
        msg+=f"{i}. {name} (—É—Ä. {lvl}) - {rank}\n"
        i+=1

    kb=[[KeyboardButton(BUTTON_GUILD_BACK)]]
    await update.message.reply_text(msg, reply_markup=ReplyKeyboardMarkup(kb,resize_keyboard=True))
    return GUILD_MEMBERS_MENU

async def not_implemented_leaders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db=context.application.bot_data["db"]
    user=update.effective_user
    u=db.get_user(user.id)
    gid=u[14]
    if gid is None:
        await update.message.reply_text(
            "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏–∏.",
            reply_markup=guild_main_menu_keyboard(user.id,db)
        )
        return GUILD_MENU
    kb=[
        [KeyboardButton(BUTTON_GUILD_LEADERS_GOLD),KeyboardButton(BUTTON_GUILD_LEADERS_KG)],
        [KeyboardButton(BUTTON_GUILD_LEADERS_EXP)],
        [KeyboardButton(BUTTON_GUILD_BACK)]
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≥–∏–ª—å–¥–µ–π—Å–∫–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞:",
        reply_markup=ReplyKeyboardMarkup(kb,resize_keyboard=True)
    )
    return GUILD_LEADERS_MENU

async def guild_leaders_show(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db=context.application.bot_data["db"]
    user=update.effective_user
    u=db.get_user(user.id)
    gid=u[14]
    if gid is None:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –≥–∏–ª—å–¥–∏–∏.",reply_markup=guild_main_menu_keyboard(user.id,db))
        return GUILD_MENU
    g=db.get_guild(gid)

    text_=update.message.text
    members=db.get_guild_members(gid)
    user_list=[]
    for uid_ in members:
        data_=db.get_user(uid_)
        user_list.append(data_)

    if text_==BUTTON_GUILD_LEADERS_GOLD:
        cat="–∑–æ–ª–æ—Ç—É"
        user_list.sort(key=lambda x:x[12],reverse=True) # total_gold_earned
        val=lambda d:d[12]
    elif text_==BUTTON_GUILD_LEADERS_KG:
        cat="—É–ª–æ–≤—É"
        user_list.sort(key=lambda x:x[13],reverse=True) # total_kg_caught
        val=lambda d:d[13]
    elif text_==BUTTON_GUILD_LEADERS_EXP:
        cat="–æ–ø—ã—Ç—É"
        user_list.sort(key=lambda x:x[3],reverse=True) # experience
        val=lambda d:d[3]
    elif text_==BUTTON_GUILD_BACK:
        txt=guild_info_text(gid,db)
        await update.message.reply_text(txt,reply_markup=guild_main_menu_keyboard(user.id,db))
        return GUILD_MENU
    else:
        txt=guild_info_text(gid,db)
        await update.message.reply_text(txt,reply_markup=guild_main_menu_keyboard(user.id,db))
        return GUILD_MENU

    msg=f"üèÜ –¢–æ–ø –ø–æ {cat} –≤–Ω—É—Ç—Ä–∏ –≥–∏–ª—å–¥–∏–∏:\n"
    top=user_list[:10]
    i=1
    for data_ in top:
        name=data_[1] if data_[1] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        lvl=data_[4]
        rnk=get_guild_membership_rank(data_[0], gid, db)
        val_ = val(data_)
        msg+=f"{i}. {name} (—É—Ä. {lvl}) - {rnk} - {val_}\n"
        i+=1

    await update.message.reply_text(
        msg,
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BUTTON_GUILD_BACK)]],resize_keyboard=True)
    )
    return GUILD_LEADERS_MENU

# –ì–ª–∞–≤–Ω–æ–µ –æ—Ç–ª–∏—á–∏–µ: –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è" –º—ã —É—Ö–æ–¥–∏–º –∏–∑ conversation.
async def go_back_guild(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ ¬´üîô –í–µ—Ä–Ω—É—Ç—å—Å—è¬ª –∏–∑ –º–µ–Ω—é –≥–∏–ª—å–¥–∏–∏ ‚Äì –≤—ã—Ö–æ–¥–∏–º –∏–∑ ConversationHandler
    –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    user=update.effective_user

    # –í—ã–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∫–∞–∫ –≤ fishingbot.py)
    main_keyboard = [
        [KeyboardButton("üèû –û–∑–µ—Ä–æ"), KeyboardButton("üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"), KeyboardButton("üë§ –û —Ä—ã–±–∞–∫–µ")],
        [KeyboardButton("üè™ –ú–∞–≥–∞–∑–∏–Ω"), KeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü–∞ –õ–∏–¥–µ—Ä–æ–≤"), KeyboardButton("üõ°Ô∏è –ì–∏–ª—å–¥–∏–∏")],
        [KeyboardButton("üìù –ó–∞–¥–∞–Ω–∏—è"), KeyboardButton("üîç –ü–æ–º–æ—â—å")]
    ]
    await update.message.reply_text(
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
        reply_markup=ReplyKeyboardMarkup(main_keyboard,resize_keyboard=True)
    )
    return ConversationHandler.END

async def go_back_guild_members(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏–º–µ–Ω–Ω–æ –≤ –º–µ–Ω—é –≥–∏–ª—å–¥–∏–∏ (–Ω–µ –≤ –≥–ª–∞–≤–Ω–æ–µ).
    –ù–æ –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç–æ–∂–µ ‚Äì –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ go_back_guild.
    """
    db=context.application.bot_data["db"]
    user=update.effective_user
    u=db.get_user(user.id)
    gid=u[14]
    if gid is None:
        # –Ω–µ—Ç –≥–∏–ª—å–¥–∏–∏
        main_keyboard = [
            [KeyboardButton("üèû –û–∑–µ—Ä–æ"), KeyboardButton("üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"), KeyboardButton("üë§ –û —Ä—ã–±–∞–∫–µ")],
            [KeyboardButton("üè™ –ú–∞–≥–∞–∑–∏–Ω"), KeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü–∞ –õ–∏–¥–µ—Ä–æ–≤"), KeyboardButton("üõ°Ô∏è –ì–∏–ª—å–¥–∏–∏")],
            [KeyboardButton("üìù –ó–∞–¥–∞–Ω–∏—è"), KeyboardButton("üîç –ü–æ–º–æ—â—å")]
        ]
        await update.message.reply_text(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è...",
            reply_markup=ReplyKeyboardMarkup(main_keyboard,resize_keyboard=True)
        )
        return ConversationHandler.END
    else:
        txt=guild_info_text(gid,db)
        await update.message.reply_text(txt,reply_markup=guild_main_menu_keyboard(user.id,db))
        return GUILD_MENU

def guild_conversation_handler():
    """
    ConversationHandler –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–∏–ª—å–¥–∏—è–º–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ, –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –º–∞–≥–∞–∑–∏–Ω, –ª–∏–¥–µ—Ä—ã, —É—á–∞—Å—Ç–Ω–∏–∫–∏).
    """
    guild_entry_filter = filters.Regex(f"^{BUTTON_GUILDS}$|^{BUTTON_MY_GUILD}$")
    return ConversationHandler(
        entry_points=[MessageHandler(guild_entry_filter, guilds_handler)],
        states={
            GUILD_MENU:[
                MessageHandler(filters.Regex("^"+re.escape(BUTTON_CREATE_GUILD)+"$"), create_guild),
                MessageHandler(filters.Regex("^"+re.escape(BUTTON_JOIN_GUILD)+"$"), join_guild),
                MessageHandler(filters.Regex("^"+re.escape(BUTTON_LEAVE_GUILD)+"$"), leave_guild),
                MessageHandler(filters.Regex("^"+re.escape(BUTTON_GUILD_SHOP)+"$"), guild_shop),
                MessageHandler(filters.Regex("^"+re.escape(BUTTON_GUILD_LEADERS)+"$"), not_implemented_leaders),
                MessageHandler(filters.Regex("^"+re.escape(BUTTON_GUILD_MEMBERS)+"$"), guild_members),
                MessageHandler(filters.Regex("^"+re.escape(BUTTON_GO_BACK)+"$"), go_back_guild),
            ],
            ASK_GUILD_NAME:[
                MessageHandler((filters.TEXT & ~filters.COMMAND), set_guild_name),
            ],
            CONFIRM_CREATE_GUILD:[
                MessageHandler(filters.Regex("^‚úÖ –î–∞$|^‚ùå –ù–µ—Ç$"), confirm_create_guild)
            ],
            GUILD_LIST:[
                MessageHandler((filters.TEXT & ~filters.COMMAND), select_guild_to_join),
                MessageHandler(filters.Regex("^"+re.escape(BUTTON_GO_BACK)+"$"), go_back_guild)
            ],
            GUILD_CONFIRM_JOIN:[
                MessageHandler(filters.Regex("^‚úÖ –î–∞$|^‚ùå –ù–µ—Ç$"), confirm_join_guild)
            ],
            GUILD_LEAVE_CONFIRM:[
                MessageHandler(filters.Regex("^‚úÖ –î–∞$|^‚ùå –ù–µ—Ç$"), confirm_leave_guild)
            ],
            GUILD_SHOP_MENU:[
                MessageHandler(filters.Regex("^"+re.escape(BUTTON_GUILD_BACK)+"$"), go_back_guild),
                MessageHandler((filters.TEXT & ~filters.COMMAND), guild_shop_select)
            ],
            GUILD_SHOP_CONFIRM:[
                MessageHandler(filters.Regex("^‚úÖ –î–∞$|^‚ùå –ù–µ—Ç$"), guild_shop_confirm)
            ],
            GUILD_MEMBERS_MENU:[
                MessageHandler(filters.Regex("^"+re.escape(BUTTON_GUILD_BACK)+"$"), go_back_guild_members)
            ],
            GUILD_LEADERS_MENU:[
                MessageHandler(filters.Regex("^"+re.escape(BUTTON_GUILD_LEADERS_GOLD)+"$|^"+re.escape(BUTTON_GUILD_LEADERS_KG)+"$|^"+re.escape(BUTTON_GUILD_LEADERS_EXP)+"$|^"+re.escape(BUTTON_GUILD_BACK)+"$"), guild_leaders_show)
            ],
        },
        fallbacks=[
            MessageHandler(filters.Regex("^"+re.escape(BUTTON_GO_BACK)+"$"), go_back_guild)
        ],
        allow_reentry=True
    )
