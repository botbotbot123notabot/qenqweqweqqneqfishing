import logging
import random
import re
from math import pi
from collections import defaultdict
from datetime import datetime, timedelta

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler,
)

from guilds import guild_conversation_handler, add_guild_exp, guilds_data, get_guild_membership_rank, GUILD_BONUSES, GUILD_LEVELS

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BUTTON_START_FISHING = "üé£ –ù–∞—á–∞—Ç—å —Ä—ã–±–∞–ª–∫—É"
BUTTON_LAKE = "üèû –û–∑–µ—Ä–æ"
BUTTON_INVENTORY = "üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"
BUTTON_SHOP = "üè™ –ú–∞–≥–∞–∑–∏–Ω"
BUTTON_CATCH_FISH = "üé£ –õ–æ–≤–∏—Ç—å —Ä—ã–±–∫—É"
BUTTON_UPDATE = "üîÑ –û–±–Ω–æ–≤–∏—Ç—å"
BUTTON_GO_BACK = "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è"
BUTTON_IDENTIFY_FISH = "üîç –û–ø–æ–∑–Ω–∞—Ç—å —Ä—ã–±—É"
BUTTON_SELL_ALL = "üêü –ü—Ä–æ–¥–∞—Ç—å –≤—Å—é —Ä—ã–±—É"
BUTTON_EXCHANGE_GOLD = "–û–±–º–µ–Ω –∑–æ–ª–æ—Ç–æ –Ω–∞ TON"
BUTTON_PULL = "üêü –¢—è–Ω—É—Ç—å"
BUTTON_CONFIRM_YES = "‚úÖ –î–∞"
BUTTON_CONFIRM_NO = "‚ùå –ù–µ—Ç"
BUTTON_LEADERBOARD = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –õ–∏–¥–µ—Ä–æ–≤"
BUTTON_TOTAL_GOLD = "–õ–∏–¥–µ—Ä—ã –ø–æ –∑–æ–ª–æ—Ç—É"
BUTTON_TOTAL_KG = "–õ–∏–¥–µ—Ä—ã –ø–æ —É–ª–æ–≤—É"
BUTTON_TOTAL_EXPERIENCE = "–õ–∏–¥–µ—Ä—ã –ø–æ –æ–ø—ã—Ç—É"
BUTTON_RODS = "üé£ –£–¥–æ—á–∫–∏"
BUTTON_BAITS = "ü™± –ù–∞–∂–∏–≤–∫–∏"
BUTTON_ABOUT_FISHERMAN = "üë§ –û —Ä—ã–±–∞–∫–µ"
BUTTON_GUILDS = "üõ°Ô∏è –ì–∏–ª—å–¥–∏–∏"
BUTTON_HELP = "üîç –ü–æ–º–æ—â—å"

# –ö–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏
BUTTON_HELP_FISHING = "–†—ã–±–∞–ª–∫–∞"
BUTTON_HELP_RODS = "–£–¥–æ—á–∫–∏"
BUTTON_HELP_BAITS = "–ù–∞–∂–∏–≤–∫–∞"
BUTTON_HELP_SHOP = "–ú–∞–≥–∞–∑–∏–Ω"
BUTTON_HELP_GUILDS = "–ì–∏–ª—å–¥–∏–∏"
BUTTON_HELP_ABOUT = "–û —Ä—ã–±–∞–∫–µ"

ASK_NICKNAME = 1
BUY_ROD = 2
CONFIRM_BUY_ROD = 3
BUY_BAIT = 4
CONFIRM_BUY_BAIT = 5
EXCHANGE = 6
LEADERBOARD_CATEGORY = 7

HELP_MENU = 900
HELP_SUBTOPIC = 901

users_data = defaultdict(lambda: {
    "nickname": None,
    "inventory": defaultdict(int),
    "gold": 0,
    "unidentified": {"common": 0, "rare": 0, "legendary": 0},
    "fishing": None,
    "shop_gold": 0,
    "total_gold_earned": 0,
    "total_kg_caught": 0,
    "current_rod": {
        "name": "–ë–∞–º–±—É–∫–æ–≤–∞—è —É–¥–æ—á–∫–∞ üé£",
        "bonus_percent": 0
    },
    "current_bait": None,
    "experience": 0,
    "level": 1,
    "rank": "–Æ–Ω—ã–π —Ä—ã–±–∞–∫",
    "registration_time": datetime.utcnow(),
    "fish_caught_per_rod": defaultdict(int),
    "fish_caught_per_bait": defaultdict(int),
    "guild_id": None,
    "guild_join_time": None,
    "id": None
})

LEVELS = [
    {"level": 1, "required_xp": 10, "rank": "–Æ–Ω—ã–π —Ä—ã–±–∞–∫"},
    {"level": 2, "required_xp": 38, "rank": "–Æ–Ω—ã–π —Ä—ã–±–∞–∫"},
    {"level": 3, "required_xp": 89, "rank": "–Æ–Ω—ã–π —Ä—ã–±–∞–∫"},
    {"level": 4, "required_xp": 169, "rank": "–ù–∞—á–∏–Ω–∞—é—â–∏–π –ª–æ–≤–µ—Ü"},
    {"level": 5, "required_xp": 477, "rank": "–ù–∞—á–∏–Ω–∞—é—â–∏–π –ª–æ–≤–µ—Ü"},
    {"level": 6, "required_xp": 1008, "rank": "–ù–∞—á–∏–Ω–∞—é—â–∏–π –ª–æ–≤–µ—Ü"},
    {"level": 7, "required_xp": 1809, "rank": "–õ–æ–≤–µ—Ü –º–µ–ª–∫–æ–π —Ä—ã–±—ë—à–∫–∏"},
    {"level": 8, "required_xp": 2940, "rank": "–õ–æ–≤–µ—Ü –º–µ–ª–∫–æ–π —Ä—ã–±—ë—à–∫–∏"},
    {"level": 9, "required_xp": 4470, "rank": "–õ–æ–≤–µ—Ü –º–µ–ª–∫–æ–π —Ä—ã–±—ë—à–∫–∏"},
    {"level": 10, "required_xp": 6471, "rank": "–û–ø—ã—Ç–Ω—ã–π —É–¥–∏–ª—å—â–∏–∫"},
]

for lvl in range(11, 76):
    required_xp = int(LEVELS[-1]["required_xp"] * 1.5)
    if 11 <= lvl <= 15:
        rank = "–õ—é–±–∏—Ç–µ–ª—å –∫–ª—ë–≤–∞"
    elif 16 <= lvl <= 20:
        rank = "–ó–Ω–∞—Ç–æ–∫ –∫—Ä—é—á–∫–æ–≤"
    elif 21 <= lvl <= 25:
        rank = "–ú–∞—Å—Ç–µ—Ä –Ω–∞–∂–∏–≤–∫–∏"
    elif 26 <= lvl <= 30:
        rank = "–ò—Å–∫—É—Å–Ω—ã–π —Ä—ã–±–∞–∫"
    elif 31 <= lvl <= 35:
        rank = "–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ —É–ª–æ–≤–æ–º"
    elif 36 <= lvl <= 40:
        rank = "–ù–∞—Å—Ç–æ—è—â–∏–π —Ä—ã–±–æ–ª–æ–≤"
    elif 41 <= lvl <= 45:
        rank = "–í–∏—Ä—Ç—É–æ–∑ —Ä—ã–±–∞–ª–∫–∏"
    elif 46 <= lvl <= 50:
        rank = "–£–∫—Ä–æ—Ç–∏—Ç–µ–ª—å —Ä–µ–∫"
    elif 51 <= lvl <= 55:
        rank = "–ú–æ—Ä—Å–∫–æ–π –¥–æ–±—ã—Ç—á–∏–∫"
    elif 56 <= lvl <= 60:
        rank = "–õ–µ–≥–µ–Ω–¥–∞ –ø—Ä—É–¥–∞"
    elif 61 <= lvl <= 65:
        rank = "–í–ª–∞—Å—Ç–µ–ª–∏–Ω –æ–∑—ë—Ä"
    elif 66 <= lvl <= 70:
        rank = "–ú–∞—Å—Ç–µ—Ä —Ä—ã–±–∞–ª–∫–∏"
    elif 71 <= lvl <= 75:
        rank = "–≠–ø–∏—á–µ—Å–∫–∏–π —Ä—ã–±–æ–ª–æ–≤"
    else:
        rank = "–†—ã–±–æ–ª–æ–≤"
    LEVELS.append({"level": lvl, "required_xp": required_xp, "rank": rank})

FISH_DATA = {
    "common": {
        "prefixes": ["–ú–µ–ª–∫–∏–π", "–•–∏–ª—ã–π", "–ú–æ–ª–æ–¥–æ–π", "–í–µ—Ä—Ç–ª—è–≤—ã–π", "–ë–æ–ª—å—à–æ–π", "–°—Ç–∞—Ä—ã–π", "–û–±—ã—á–Ω—ã–π", "–ö–æ—Å–æ–π"],
        "names": ["–ö–∞—Ä–∞—Å–∏–∫", "–û–∫—É–Ω–µ–∫", "–ë—ã—á–æ–∫", "–Å—Ä—à", "–ü–æ–¥–ª–µ—â–∏–∫", "–ì–æ–ª–∞–≤–ª—å"],
        "weight_range": (1, 5)
    },
    "rare": {
        "prefixes": ["–°—Ä–µ–¥–Ω–∏–π", "–•–æ—Ä–æ—à–∏–π", "–°–æ–ª–∏–¥–Ω—ã–π", "–ù–∞–ª–∏—Ç—ã–π", "–ë–ª–µ—Å—Ç—è—â–∏–π", "–í–∑—Ä–æ—Å–ª—ã–π", "–£–ø–∏—Ç–∞–Ω–Ω—ã–π", "–ü–æ—á—Ç–∏ –¢—Ä–æ—Ñ–µ–π–Ω—ã–π"],
        "names": ["–ö–∞—Ä–∞—Å—å", "–û–∫—É–Ω—å", "–õ–µ—â", "–†–æ—Ç–∞–Ω", "–£–≥–æ—Ä—å", "–°—É–¥–∞–∫"],
        "weight_range": (7, 16)
    },
    "legendary": {
        "prefixes": ["–ú–æ—â–Ω—ã–π", "–û–≥—Ä–æ–º–Ω—ã–π", "–¢—Ä–æ—Ñ–µ–π–Ω—ã–π", "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π", "–ü–µ—Ä–µ–ª–∏–≤–∞—é—â–∏–π—Å—è", "–ó–¥–æ—Ä–æ–≤–µ–Ω–Ω—ã–π", "–ö–æ–ª–æ—Å—Å–∞–ª—å–Ω—ã–π"],
        "names": ["–Ø–∑—å", "–°–æ–º", "–ù–∞–ª–∏–º", "–¢—É–Ω–µ—Ü", "–£–≥–æ—Ä—å", "–õ–æ—Å–æ—Å—å", "–û—Å—ë—Ç—Ä"],
        "weight_range": (22, 79)
    }
}

RODS = [
    {"name": "–£–¥–æ—á–∫–∞ –ù–æ–≤–∏—á–∫–∞ üé£", "price": 10, "bonus_percent": 5},
    {"name": "–£–¥–æ—á–∫–∞ –õ—é–±–∏—Ç–µ–ª—è üé£", "price": 50, "bonus_percent": 10},
    {"name": "–£–¥–æ—á–∫–∞ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è üé£", "price": 200, "bonus_percent": 15},
    {"name": "–£–¥–æ—á–∫–∞ –ü–†–û üé£", "price": 500, "bonus_percent": 25},
    {"name": "–ó–æ–ª–æ—Ç–∞—è –£–¥–æ—á–∫–∞ üé£", "price": 5000, "bonus_percent": 50},
]

BAITS = [
    {
        "name": "–ß–µ—Ä–≤—è–∫ ü™±",
        "price": 5,
        "duration": timedelta(hours=1),
        "probabilities": {"common": 60, "rare": 35, "legendary": 5}
    },
    {
        "name": "–ü–∏—è–≤–∫–∞ ü™±",
        "price": 20,
        "duration": timedelta(hours=1),
        "probabilities": {"common": 55, "rare": 60, "legendary": 5}
    },
    {
        "name": "–ú—è—Å–æ –∫—Ä–∞–±–∞ ü™±",
        "price": 100,
        "duration": timedelta(hours=1),
        "probabilities": {"common": 55, "rare": 54, "legendary": 6}
    },
    {
        "name": "–û—Å—å–º–∏–Ω–æ–≥ ü™±",
        "price": 250,
        "duration": timedelta(hours=1),
        "probabilities": {"common": 50, "rare": 50, "legendary": 10}
    },
]

def update_rank(user_data):
    level=user_data["level"]
    for lvl_data in LEVELS:
        if lvl_data["level"]==level:
            user_data["rank"]=lvl_data["rank"]
            return

def get_required_xp(level):
    for lvl_data in LEVELS:
        if lvl_data["level"]==level:
            return lvl_data["required_xp"]
    if level>LEVELS[-1]["level"]:
        last_required=LEVELS[-1]["required_xp"]
        additional_levels=level-LEVELS[-1]["level"]
        return int(last_required*(1.5**additional_levels))
    return 10

def check_level_up(user_data):
    level_up=False
    gold_reward=0
    new_level=None
    while user_data["level"]<=len(LEVELS) and user_data["experience"]>=get_required_xp(user_data["level"]):
        user_data["level"]+=1
        update_rank(user_data)
        gold_reward+=user_data["level"]*2
        user_data["gold"]+=user_data["level"]*2
        level_up=True
        new_level=user_data["level"]
    return level_up,new_level,gold_reward

def generate_identified_fish(rarity):
    prefix=random.choice(FISH_DATA[rarity]["prefixes"])
    fname=random.choice(FISH_DATA[rarity]["names"])
    w=random.randint(*FISH_DATA[rarity]["weight_range"])
    return (f"{prefix} {fname}", w, rarity)

def get_welcome_text():
    return (
        "üåÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –±–µ—Ä–µ–≥–∞ —Ç–∏—Ö–æ–π —Ä–µ–∫–∏!\n\n"
        "–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–π–º–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä—ã–±—ã, –æ–ø–æ–∑–Ω–∞—Ç—å –µ—ë –∏ –ø—Ä–æ–¥–∞—Ç—å –∑–∞ –Ω–∞—Å—Ç–æ—è—â—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É.\n\n"
        "–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –±–æ–ª—å—à–æ–π —Ä—ã–±–∞—Ü–∫–æ–π —Å–ª–∞–≤–µ!"
    )

def get_onboarding_text():
    return (
        "üé£ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π –º–∏—Ä —Ä—ã–±–∞–ª–∫–∏!\n\n"
        "–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, –¥–∞–≤–∞–π—Ç–µ –ø—Ä–∏–¥—É–º–∞–µ–º –≤–∞–º –∏–º—è.\n"
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è (–¥–æ 25 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã):"
    )

def get_lake_text(user_nickname):
    return (
        f"üåä {user_nickname} –ø–æ–¥–æ—à—ë–ª –∫ –∑–µ—Ä–∫–∞–ª—å–Ω–æ–π –≥–ª–∞–¥–∏ –æ–∑–µ—Ä–∞. –õ—ë–≥–∫–∏–π –≤–µ—Ç–µ—Ä–æ–∫ –∫–∞—á–∞–µ—Ç –∫–∞–º—ã—à–∏, –∞ –Ω–∞–¥ –≤–æ–¥–æ–π –∫—Ä—É–∂–∞—Ç —Å—Ç—Ä–µ–∫–æ–∑—ã.\n"
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
    )

def main_menu_keyboard():
    keyboard = [
        [KeyboardButton(BUTTON_LAKE)],
        [KeyboardButton(BUTTON_INVENTORY), KeyboardButton(BUTTON_ABOUT_FISHERMAN)],
        [KeyboardButton(BUTTON_SHOP), KeyboardButton(BUTTON_LEADERBOARD), KeyboardButton(BUTTON_GUILDS)],
        [KeyboardButton(BUTTON_HELP)]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_shop_text(user_data):
    inventory = user_data["inventory"]
    identified = [(k,v) for k,v in inventory.items() if v>0 and isinstance(k,tuple)]
    if not identified:
        return ("–ö–∞–∂–µ—Ç—Å—è —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å —Ä—ã–±–∞. –°–∫–æ—Ä–µ–µ –∏–¥–∏—Ç–µ –ø–æ–π–º–∞–π—Ç–µ –∏ –æ–ø–æ–∑–Ω–∞–π—Ç–µ –µ—â–µ! –ò –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏! üêü",0)
    text="üè™ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!\n\n–í–∞—à–∞ –æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ä—ã–±–∞:\n"
    total_weight=0
    for (fname,w,r),qty in identified:
        tw=w*qty
        text+=f"{fname} - {qty} —à—Ç. (–í–µ—Å –æ–¥–Ω–æ–≥–æ: {w} –ö–ì, –≤—Å–µ–≥–æ: {tw} –ö–ì)\n"
        total_weight+=tw
    gold=int(total_weight*pi/4)
    text+=f"\n–û–±—â–∏–π –≤–µ—Å: {total_weight} –ö–ì\n"
    text+=f"\n–ü—Ä–æ–¥–∞—Ç—å –≤—Å—é —Ä—ã–±—É –∑–∞ {gold} –∑–æ–ª–æ—Ç–∞?"
    return (text,gold)

def generate_fish_catch_message(fish_type, xp_gained, level_up=False, new_level=None, gold_reward=0):
    message = (
        f"üéâ –í—ã –≤—ã—É–¥–∏–ª–∏ {fish_type} –∏–∑ –≥–ª—É–±–∏–Ω!\n"
        f"–û–ø—ã—Ç +{xp_gained} ‚≠ê"
    )
    if level_up:
        message += f"\n–í–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω –¥–æ {new_level}!"
        if gold_reward > 0:
            message += f"\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ {gold_reward} –∑–æ–ª–æ—Ç–∞ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!"
    return message

def get_inventory_text(user_data):
    inventory = user_data["inventory"]
    unidentified = user_data["unidentified"]
    gold = user_data["gold"]
    rod = user_data["current_rod"]
    bait = user_data["current_bait"]
    text = "üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n\n"
    text += f"üé£ –£–¥–æ—á–∫–∞: {rod['name']} (—É–º–µ–Ω—å—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ {rod['bonus_percent']}%)\n"
    if bait:
        remaining = int((bait["end_time"]-datetime.utcnow()).total_seconds()/60)
        if remaining>0:
            text += f"ü™± –ù–∞–∂–∏–≤–∫–∞: {bait['name']} (–µ—â—ë {remaining} –º–∏–Ω)\n"
        else:
            text+="ü™± –ù–∞–∂–∏–≤–∫–∞: –Ω–µ—Ç\n"
    else:
        text+="ü™± –ù–∞–∂–∏–≤–∫–∞: –Ω–µ—Ç\n"

    text+="\n"
    common_count=unidentified['common']
    rare_count=unidentified['rare']
    legend_count=unidentified['legendary']
    if common_count>0:
        text+=f"‚Ä¢ –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Ä—ã–±—ã - {common_count}\n"
    if rare_count>0:
        text+=f"‚Ä¢ –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Ä–µ–¥–∫–∏–µ —Ä—ã–±—ã - {rare_count}\n"
    if legend_count>0:
        text+=f"‚Ä¢ –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ —Ä—ã–±—ã - {legend_count}\n"
    if common_count==0 and rare_count==0 and legend_count==0:
        text+="–ù–µ—Ç –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–π —Ä—ã–±—ã.\n"

    identified_fish = [(k,v) for k,v in inventory.items() if v>0 and isinstance(k,tuple)]
    if identified_fish:
        text+="\n–û–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ä—ã–±–∞:\n"
        for (fname, w, r), qty in identified_fish:
            total_w = w*qty
            text+=f"‚Ä¢ {fname} - –≤–µ—Å: {w} –ö–ì - {qty} —à—Ç. (–∏—Ç–æ–≥–æ {total_w} –ö–ì)\n"

    text += f"\nüí∞ –ó–æ–ª–æ—Ç–æ: {gold}"
    return text

def help_menu_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton(BUTTON_HELP_FISHING), KeyboardButton(BUTTON_HELP_RODS)],
        [KeyboardButton(BUTTON_HELP_BAITS), KeyboardButton(BUTTON_HELP_SHOP)],
        [KeyboardButton(BUTTON_HELP_GUILDS), KeyboardButton(BUTTON_HELP_ABOUT)],
        [KeyboardButton(BUTTON_GO_BACK)]
    ], resize_keyboard=True)

def help_text(topic):
    if topic == BUTTON_HELP_FISHING:
        return ("–†—ã–±–∞–ª–∫–∞ - –≤–∞—à –ø—É—Ç—å –∫ —É–ª–æ–≤—É. –ù–∞–∂–º–∏—Ç–µ '–õ–æ–≤–∏—Ç—å —Ä—ã–±–∫—É', –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –∫–ª—é–Ω–µ—Ç, –∏ —Ç—è–Ω–∏—Ç–µ —Ä—ã–±—É! "
                "–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—É—é —Ä—ã–±—É –Ω—É–∂–Ω–æ –ø–æ—Ç–æ–º –æ–ø–æ–∑–Ω–∞—Ç—å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–∞—Ç—å.")
    elif topic == BUTTON_HELP_RODS:
        return ("–£–¥–æ—á–∫–∏ –≤–ª–∏—è—é—Ç –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –ª–æ–≤–ª–∏. –ß–µ–º –ª—É—á—à–µ —É–¥–æ—á–∫–∞, —Ç–µ–º –º–µ–Ω—å—à–µ –∂–¥–∞—Ç—å! "
                "–ü–æ–∫—É–ø–∞–π—Ç–µ —É–¥–æ—á–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –∑–∞ –∑–æ–ª–æ—Ç–æ –∏ —É—Å–∫–æ—Ä—è–π—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Ä—ã–±–∞–ª–∫–∏.")
    elif topic == BUTTON_HELP_BAITS:
        return ("–ù–∞–∂–∏–≤–∫–∞ –ø–æ–≤—ã—à–∞–µ—Ç —à–∞–Ω—Å—ã –≤—ã–ª–æ–≤–∏—Ç—å –±–æ–ª–µ–µ —Ü–µ–Ω–Ω—É—é —Ä—ã–±—É. "
                "–ö—É–ø–∏—Ç–µ –Ω–∞–∂–∏–≤–∫—É –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –µ—ë, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å —à–∞–Ω—Å—ã –Ω–∞ —Ä–µ–¥–∫—É—é –∏ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—É—é —Ä—ã–±—É.")
    elif topic == BUTTON_HELP_SHOP:
        return ("–ú–∞–≥–∞–∑–∏–Ω - –º–µ—Å—Ç–æ, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –æ–ø–æ–∑–Ω–∞–Ω–Ω—É—é —Ä—ã–±—É –∑–∞ –∑–æ–ª–æ—Ç–æ, "
                "–ø–æ–∫—É–ø–∞—Ç—å —É–¥–æ—á–∫–∏ –∏ –Ω–∞–∂–∏–≤–∫–∏, –∞ —Ç–∞–∫–∂–µ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å –∑–æ–ª–æ—Ç–æ –Ω–∞ TON. "
                "–ó–∞—Ä–∞–±–æ—Ç–∞–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—ã–±—ã –∏ –∑–æ–ª–æ—Ç–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ª—É—á—à–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã!")
    elif topic == BUTTON_HELP_GUILDS:
        return ("–ì–∏–ª—å–¥–∏–∏ - –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ä—ã–±–∞–∫–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –≤—Å—Ç—É–ø–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏—é, "
                "–∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –æ–ø—ã—Ç –¥–ª—è –≥–∏–ª—å–¥–∏–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã. "
                "–í –≥–∏–ª—å–¥–µ–π—Å–∫–æ–º –º–∞–≥–∞–∑–∏–Ω–µ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –æ—Å–æ–±—ã–µ —É–¥–æ—á–∫–∏ –∏ –Ω–∞–∂–∏–≤–∫–∏.")
    elif topic == BUTTON_HELP_ABOUT:
        return ("–†–∞–∑–¥–µ–ª '–û —Ä—ã–±–∞–∫–µ' –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: —É—Ä–æ–≤–µ–Ω—å, –æ–ø—ã—Ç, –ª—é–±–∏–º—É—é —É–¥–æ—á–∫—É –∏ –Ω–∞–∂–∏–≤–∫—É, "
                "–∞ —Ç–∞–∫–∂–µ –≥–∏–ª—å–¥–∏—é, –µ—Å–ª–∏ –≤—ã —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ–¥–Ω–æ–π. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –¥–∞–ª–µ–∫–æ –≤—ã –ø—Ä–æ–¥–≤–∏–Ω—É–ª–∏—Å—å –≤ –∫–∞—Ä—å–µ—Ä–µ —Ä—ã–±–∞–∫–∞!")
    return "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."

async def set_nickname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    nickname=update.message.text.strip()
    if len(nickname)>25:
        await update.message.reply_text("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ.")
        return ASK_NICKNAME
    if not re.match(r'^[A-Za-z–ê-–Ø–∞-—è–Å—ë\s]+$', nickname):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã!")
        return ASK_NICKNAME
    existing=[d["nickname"] for uid,d in users_data.items() if d["nickname"]]
    if nickname in existing:
        await update.message.reply_text("‚ùå –≠—Ç–æ –∏–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ.")
        return ASK_NICKNAME
    ud=users_data[user.id]
    ud["nickname"]=nickname
    await update.message.reply_text(f"‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã - {nickname}!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
                                    reply_markup=main_menu_keyboard())
    return ConversationHandler.END

async def cancel_nickname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–∞.",reply_markup=main_menu_keyboard())
    return ConversationHandler.END

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    ud=users_data[user.id]
    ud["id"]=user.id
    if ud["registration_time"] == datetime.utcnow():
        ud["gold"]=0
        ud["total_gold_earned"]=0
        ud["total_kg_caught"]=0
        ud["experience"]=0
        ud["level"]=1
        ud["rank"]="–Æ–Ω—ã–π —Ä—ã–±–∞–∫"
        ud["registration_time"]=datetime.utcnow()
        ud["fish_caught_per_rod"]=defaultdict(int)
        ud["fish_caught_per_bait"]=defaultdict(int)
    logger.info(f"User {user.id} ({user.first_name}) started bot.")
    await update.message.reply_text(get_welcome_text(),reply_markup=ReplyKeyboardMarkup(
        [[KeyboardButton(BUTTON_START_FISHING)]], resize_keyboard=True
    ))

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.warning(f"Unknown command from user {update.effective_user.id}: {update.message.text}")

async def begin_fishing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    ud=users_data[user.id]
    if not ud["nickname"]:
        await update.message.reply_text(get_onboarding_text(),reply_markup=ReplyKeyboardRemove())
        return ASK_NICKNAME
    else:
        await update.message.reply_text("üåû –û—Ç–ª–∏—á–Ω–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è —Ä—ã–±–∞–ª–∫–∏! –£–¥–∞—á–∏!",
                                        reply_markup=main_menu_keyboard())
        return ConversationHandler.END

async def lake_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    ud=users_data[user.id]
    name=ud["nickname"] if ud["nickname"] else user.first_name
    txt=get_lake_text(name)
    await update.message.reply_text(txt,reply_markup=ReplyKeyboardMarkup([
        [KeyboardButton(BUTTON_CATCH_FISH)],
        [KeyboardButton(BUTTON_UPDATE)],
        [KeyboardButton(BUTTON_GO_BACK)],
    ], resize_keyboard=True))

async def catch_fish_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    ud=users_data[user.id]
    if ud["fishing"]:
        await update.message.reply_text("–í—ã —É–∂–µ –∂–¥—ë—Ç–µ —É–ª–æ–≤–∞!")
        return
    rb=ud["current_rod"]["bonus_percent"]
    base_delay=random.randint(5,33)
    delay=int(base_delay*(1-rb/100))
    if delay<1: delay=1
    ud["fishing"]={"end_time":datetime.utcnow()+timedelta(seconds=delay),"status":"fishing"}
    await update.message.reply_text(
        f"üé£ –ó–∞–±—Ä–æ—Å–∏–ª–∏ —É–¥–æ—á–∫—É... –ü–æ–¥–æ–∂–¥–∏—Ç–µ {delay} —Å–µ–∫—É–Ω–¥.",
        reply_markup=ReplyKeyboardMarkup([
            [KeyboardButton(BUTTON_CATCH_FISH)],
            [KeyboardButton(BUTTON_UPDATE)],
            [KeyboardButton(BUTTON_GO_BACK)],
        ], resize_keyboard=True)
    )

async def update_fishing_status_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    ud=users_data[user.id]
    if not ud["fishing"]:
        await update.message.reply_text("–í—ã —Å–µ–π—á–∞—Å –Ω–µ –ª–æ–≤–∏—Ç–µ —Ä—ã–±—É.",reply_markup=main_menu_keyboard())
        return
    end=ud["fishing"]["end_time"]
    now=datetime.utcnow()
    rem=(end-now).total_seconds()
    if rem>0:
        await update.message.reply_text(f"–†—ã–±–∫–∞ –µ—â—ë –Ω–µ –ø–æ–ø–∞–ª–∞—Å—å, –æ—Å—Ç–∞–ª–æ—Å—å ~{int(rem)} —Å–µ–∫.")
    else:
        ud["fishing"]["status"]="ready_to_pull"
        await update.message.reply_text("–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –∫–ª—é–Ω—É–ª–æ! –¢—è–Ω–∏—Ç–µ!",
                                        reply_markup=ReplyKeyboardMarkup([
                                            [KeyboardButton(BUTTON_PULL)],
                                            [KeyboardButton(BUTTON_GO_BACK)]
                                        ],resize_keyboard=True))

async def pull_hook_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    ud=users_data[user.id]
    if not ud["fishing"]:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –ª–æ–≤–∏—Ç—å.",
                                        reply_markup=main_menu_keyboard())
        return
    end=ud["fishing"]["end_time"]
    now=datetime.utcnow()
    if now>=end and ud["fishing"]["status"]=="ready_to_pull":
        r=random.randint(1,100)
        if ud["current_bait"] and (datetime.utcnow()<ud["current_bait"]["end_time"]):
            probs=ud["current_bait"]["probabilities"]
        else:
            probs={"common":70,"rare":25,"legendary":5}

        cumulative=0
        rarity_chosen=None
        for rarity in ["common","rare","legendary"]:
            cumulative+=probs[rarity]
            if r<=cumulative:
                rarity_chosen=rarity
                break

        if rarity_chosen=="common":
            ftype="–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ä—ã–±–∞"
            xp=random.randint(1,3)
        elif rarity_chosen=="rare":
            ftype="–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ä–µ–¥–∫–∞—è —Ä—ã–±–∞"
            xp=random.randint(4,9)
        else:
            ftype="–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è —Ä—ã–±–∞"
            xp=random.randint(10,30)

        ud["unidentified"][rarity_chosen]+=1
        ud["fishing"]=None
        ud["experience"]+=xp
        add_guild_exp(user.id, xp, users_data)
        rod=ud["current_rod"]["name"]
        bait=ud["current_bait"]["name"] if ud["current_bait"] else "–ù–µ—Ç –Ω–∞–∂–∏–≤–∫–∏"
        ud["fish_caught_per_rod"][rod]+=1
        ud["fish_caught_per_bait"][bait]+=1
        lvl_up,n_lvl,g_reward=check_level_up(ud)
        update_rank(ud)
        msg=generate_fish_catch_message(ftype,xp,lvl_up,n_lvl,g_reward)
        await update.message.reply_text(msg,reply_markup=ReplyKeyboardMarkup([
            [KeyboardButton(BUTTON_CATCH_FISH)],
            [KeyboardButton(BUTTON_GO_BACK)]
        ],resize_keyboard=True))
    else:
        await update.message.reply_text("–ü–æ—Ç–æ—Ä–æ–ø–∏–ª–∏—Å—å –∏ —Å–æ—Ä–≤–∞–ª–∏ —Ä—ã–±—É!",
                                        reply_markup=ReplyKeyboardMarkup([
                                            [KeyboardButton(BUTTON_CATCH_FISH)],
                                            [KeyboardButton(BUTTON_GO_BACK)]
                                        ],resize_keyboard=True)
                                        )
        ud["fishing"]=None

async def identify_fish_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    ud=users_data[user.id]
    un=ud["unidentified"]
    if all(x==0 for x in un.values()):
        await update.message.reply_text("–ù–µ—Ç –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–π —Ä—ã–±—ã.",
                                        reply_markup=ReplyKeyboardMarkup([
                                            [KeyboardButton(BUTTON_GO_BACK)],
                                        ], resize_keyboard=True))
        return
    results=[]
    for rarity,count in un.items():
        for _ in range(count):
            fname,w,r=generate_identified_fish(rarity)
            ud["inventory"][(fname,w,r)]+=1
            ud["total_kg_caught"]+=w
            results.append(f"{fname} - –≤–µ—Å {w} –ö–ì")

    ud["unidentified"]={"common":0,"rare":0,"legendary":0}
    msg="üîç –í—ã —Å –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ–º —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ —Å–≤–æ–π —É–ª–æ–≤...\n" \
        "–¢–µ–ø–µ—Ä—å –≤—ã –∑–Ω–∞–µ—Ç–µ, –∫—Ç–æ —Å–∫—Ä—ã–≤–∞–ª—Å—è –≤ –≥–ª—É–±–∏–Ω–∞—Ö:\n"+"\n".join(results)
    await update.message.reply_text(msg,reply_markup=ReplyKeyboardMarkup([
        [KeyboardButton(BUTTON_GO_BACK)]
    ],resize_keyboard=True))

async def inventory_handler_func(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    ud=users_data[user.id]
    txt=get_inventory_text(ud)
    await update.message.reply_text(txt,reply_markup=ReplyKeyboardMarkup([
        [KeyboardButton(BUTTON_IDENTIFY_FISH)],
        [KeyboardButton(BUTTON_GO_BACK)],
    ], resize_keyboard=True))

async def shop_handler_func(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    ud=users_data[user.id]
    info,g= get_shop_text(ud)
    ud["shop_gold"]=g
    await update.message.reply_text(info,reply_markup=ReplyKeyboardMarkup([
        [KeyboardButton(BUTTON_RODS), KeyboardButton(BUTTON_BAITS)],
        [KeyboardButton(BUTTON_SELL_ALL), KeyboardButton(BUTTON_EXCHANGE_GOLD)],
        [KeyboardButton(BUTTON_GO_BACK)],
    ], resize_keyboard=True))

async def sell_fish_handler_func(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    ud=users_data[user.id]
    inv=ud["inventory"]
    identified = [(k,v) for k,v in inv.items() if v>0 and isinstance(k,tuple)]
    if not identified:
        await update.message.reply_text("–ù–µ—Ç –æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–π —Ä—ã–±—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.",
                                        reply_markup=ReplyKeyboardMarkup([
                                            [KeyboardButton(BUTTON_RODS), KeyboardButton(BUTTON_BAITS)],
                                            [KeyboardButton(BUTTON_SELL_ALL), KeyboardButton(BUTTON_EXCHANGE_GOLD)],
                                            [KeyboardButton(BUTTON_GO_BACK)],
                                        ], resize_keyboard=True))
        return
    total_w=0
    for (fname,w,r),qty in identified:
        total_w+=w*qty
        inv[(fname,w,r)]=0
    gold_earned=int(total_w*pi/4)
    ud["gold"]+=gold_earned
    ud["total_gold_earned"]+=gold_earned
    await update.message.reply_text(
        f"–í—ã –ø—Ä–æ–¥–∞–ª–∏ –≤—Å—é –æ–ø–æ–∑–Ω–∞–Ω–Ω—É—é —Ä—ã–±—É –∑–∞ {gold_earned} –∑–æ–ª–æ—Ç–∞!",
        reply_markup=ReplyKeyboardMarkup([
            [KeyboardButton(BUTTON_RODS), KeyboardButton(BUTTON_BAITS)],
            [KeyboardButton(BUTTON_SELL_ALL), KeyboardButton(BUTTON_EXCHANGE_GOLD)],
            [KeyboardButton(BUTTON_GO_BACK)],
        ], resize_keyboard=True)
    )

async def exchange_gold_handler_func(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    ud=users_data[user.id]
    if ud["gold"]>=25000:
        keyboard=[[KeyboardButton(BUTTON_CONFIRM_YES),KeyboardButton(BUTTON_CONFIRM_NO)]]
        await update.message.reply_text("–•–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å 25000 –∑–æ–ª–æ—Ç–∞ –Ω–∞ TON?",
                                        reply_markup=ReplyKeyboardMarkup(keyboard,resize_keyboard=True))
        return EXCHANGE
    else:
        need=25000-ud["gold"]
        await update.message.reply_text(
            f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {need} –∑–æ–ª–æ—Ç–∞ –¥–ª—è –æ–±–º–µ–Ω–∞.",
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton(BUTTON_RODS), KeyboardButton(BUTTON_BAITS)],
                [KeyboardButton(BUTTON_SELL_ALL), KeyboardButton(BUTTON_EXCHANGE_GOLD)],
                [KeyboardButton(BUTTON_GO_BACK)],
            ], resize_keyboard=True)
        )

async def confirm_exchange_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    ud=users_data[user.id]
    if update.message.text==BUTTON_CONFIRM_YES:
        if ud["gold"]>=25000:
            ud["gold"]-=25000
            await update.message.reply_text("–û–±–º–µ–Ω —Å–æ–≤–µ—Ä—à–µ–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ TON.",
                                            reply_markup=ReplyKeyboardMarkup([
                                                [KeyboardButton(BUTTON_RODS), KeyboardButton(BUTTON_BAITS)],
                                                [KeyboardButton(BUTTON_SELL_ALL), KeyboardButton(BUTTON_EXCHANGE_GOLD)],
                                                [KeyboardButton(BUTTON_GO_BACK)],
                                            ], resize_keyboard=True))
        else:
            need=25000-ud["gold"]
            await update.message.reply_text(
                f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {need} –∑–æ–ª–æ—Ç–∞!",
                reply_markup=ReplyKeyboardMarkup([
                    [KeyboardButton(BUTTON_RODS), KeyboardButton(BUTTON_BAITS)],
                    [KeyboardButton(BUTTON_SELL_ALL), KeyboardButton(BUTTON_EXCHANGE_GOLD)],
                    [KeyboardButton(BUTTON_GO_BACK)],
                ], resize_keyboard=True))
    else:
        await update.message.reply_text("–û–±–º–µ–Ω –æ—Ç–º–µ–Ω–µ–Ω.",
                                        reply_markup=ReplyKeyboardMarkup([
                                            [KeyboardButton(BUTTON_RODS), KeyboardButton(BUTTON_BAITS)],
                                            [KeyboardButton(BUTTON_SELL_ALL), KeyboardButton(BUTTON_EXCHANGE_GOLD)],
                                            [KeyboardButton(BUTTON_GO_BACK)],
                                        ], resize_keyboard=True))
    return ConversationHandler.END

async def about_fisherman_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    ud=users_data[user.id]
    txt=get_about_fisherman_text(ud)
    await update.message.reply_text(txt,reply_markup=ReplyKeyboardMarkup([
        [KeyboardButton(BUTTON_GO_BACK)],
    ], resize_keyboard=True))

async def go_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è...",reply_markup=main_menu_keyboard())
    return ConversationHandler.END

async def leaderboard_handler_func(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ–π—Ç–∏–Ω–≥–∞:",
                                    reply_markup=ReplyKeyboardMarkup([
                                        [KeyboardButton(BUTTON_TOTAL_GOLD), KeyboardButton(BUTTON_TOTAL_KG)],
                                        [KeyboardButton(BUTTON_TOTAL_EXPERIENCE)],
                                        [KeyboardButton(BUTTON_GO_BACK)],
                                    ], resize_keyboard=True))
    return LEADERBOARD_CATEGORY

async def leaderboard_show(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text=update.message.text
    all_users=list(users_data.items())
    if text==BUTTON_TOTAL_GOLD:
        all_users.sort(key=lambda x:x[1]["total_gold_earned"],reverse=True)
        cat="–∑–æ–ª–æ—Ç—É"
        val=lambda d:d["total_gold_earned"]
    elif text==BUTTON_TOTAL_KG:
        all_users.sort(key=lambda x:x[1]["total_kg_caught"],reverse=True)
        cat="—É–ª–æ–≤—É"
        val=lambda d:d["total_kg_caught"]
    elif text==BUTTON_TOTAL_EXPERIENCE:
        all_users.sort(key=lambda x:x[1]["experience"],reverse=True)
        cat="–æ–ø—ã—Ç—É"
        val=lambda d:d["experience"]
    else:
        await go_back(update, context)
        return ConversationHandler.END

    msg=f"üèÜ –¢–æ–ø –ø–æ {cat}:\n"
    top=all_users[:10]
    i=1
    for uid,data in top:
        name=data["nickname"] if data["nickname"] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä—ã–±–∞–∫"
        msg+=f"{i}. {name} - {val(data)}\n"
        i+=1
    await update.message.reply_text(msg,reply_markup=ReplyKeyboardMarkup([
        [KeyboardButton(BUTTON_TOTAL_GOLD), KeyboardButton(BUTTON_TOTAL_KG)],
        [KeyboardButton(BUTTON_TOTAL_EXPERIENCE)],
        [KeyboardButton(BUTTON_GO_BACK)],
    ], resize_keyboard=True))
    return LEADERBOARD_CATEGORY

async def rods_section(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text="üé£ –£–¥–æ—á–∫–∏ –≤ –ø—Ä–æ–¥–∞–∂–µ:\n"
    for rod in RODS:
        text+=f"{rod['name']} - {rod['price']} –∑–æ–ª–æ—Ç–∞ (—É–º–µ–Ω—å—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ {rod['bonus_percent']}%)\n"
    text+="–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ—á–∫—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥."
    keyboard=[[KeyboardButton(r["name"])] for r in RODS]
    keyboard.append([KeyboardButton(BUTTON_GO_BACK)])
    await update.message.reply_text(text,reply_markup=ReplyKeyboardMarkup(keyboard,resize_keyboard=True))
    return BUY_ROD

async def buy_rod_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    rod_name=update.message.text.strip()
    if rod_name==BUTTON_GO_BACK:
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω.",
                                        reply_markup=ReplyKeyboardMarkup([
                                            [KeyboardButton(BUTTON_RODS), KeyboardButton(BUTTON_BAITS)],
                                            [KeyboardButton(BUTTON_SELL_ALL), KeyboardButton(BUTTON_EXCHANGE_GOLD)],
                                            [KeyboardButton(BUTTON_GO_BACK)],
                                        ], resize_keyboard=True))
        return ConversationHandler.END
    rod=next((r for r in RODS if r["name"]==rod_name),None)
    if rod:
        context.user_data["pending_rod"]=rod
        keyboard=[[KeyboardButton(BUTTON_CONFIRM_YES),KeyboardButton(BUTTON_CONFIRM_NO)]]
        await update.message.reply_text(
            f"–ö—É–ø–∏—Ç—å {rod['name']} –∑–∞ {rod['price']} –∑–æ–ª–æ—Ç–∞?\n–≠—Ç–æ —É–ª—É—á—à–∏—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –ª–æ–≤–ª–∏ –Ω–∞ {rod['bonus_percent']}%.",
            reply_markup=ReplyKeyboardMarkup(keyboard,resize_keyboard=True)
        )
        return CONFIRM_BUY_ROD
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É–¥–æ—á–∫–∞.",
                                        reply_markup=ReplyKeyboardMarkup([
                                            [KeyboardButton(BUTTON_RODS), KeyboardButton(BUTTON_BAITS)],
                                            [KeyboardButton(BUTTON_SELL_ALL), KeyboardButton(BUTTON_EXCHANGE_GOLD)],
                                            [KeyboardButton(BUTTON_GO_BACK)],
                                        ], resize_keyboard=True))
        return ConversationHandler.END

async def confirm_buy_rod_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    ud=users_data[user.id]
    rod=context.user_data.get("pending_rod")
    if not rod:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É–¥–æ—á–∫–∏.",
                                        reply_markup=ReplyKeyboardMarkup([
                                            [KeyboardButton(BUTTON_RODS), KeyboardButton(BUTTON_BAITS)],
                                            [KeyboardButton(BUTTON_SELL_ALL), KeyboardButton(BUTTON_EXCHANGE_GOLD)],
                                            [KeyboardButton(BUTTON_GO_BACK)],
                                        ], resize_keyboard=True))
        return ConversationHandler.END
    if update.message.text==BUTTON_CONFIRM_YES:
        if ud["gold"]>=rod["price"]:
            ud["gold"]-=rod["price"]
            ud["current_rod"]=rod
            await update.message.reply_text(
                f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {rod['name']}!",
                reply_markup=ReplyKeyboardMarkup([
                    [KeyboardButton(BUTTON_RODS), KeyboardButton(BUTTON_BAITS)],
                    [KeyboardButton(BUTTON_SELL_ALL), KeyboardButton(BUTTON_EXCHANGE_GOLD)],
                    [KeyboardButton(BUTTON_GO_BACK)],
                ], resize_keyboard=True))
        else:
            need=rod["price"]-ud["gold"]
            await update.message.reply_text(
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞! –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {need}.",
                reply_markup=ReplyKeyboardMarkup([
                    [KeyboardButton(BUTTON_RODS), KeyboardButton(BUTTON_BAITS)],
                    [KeyboardButton(BUTTON_SELL_ALL), KeyboardButton(BUTTON_EXCHANGE_GOLD)],
                    [KeyboardButton(BUTTON_GO_BACK)],
                ], resize_keyboard=True))
    else:
        await update.message.reply_text("–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                                        reply_markup=ReplyKeyboardMarkup([
                                            [KeyboardButton(BUTTON_RODS), KeyboardButton(BUTTON_BAITS)],
                                            [KeyboardButton(BUTTON_SELL_ALL), KeyboardButton(BUTTON_EXCHANGE_GOLD)],
                                            [KeyboardButton(BUTTON_GO_BACK)],
                                        ], resize_keyboard=True))
    context.user_data.pop("pending_rod",None)
    return ConversationHandler.END

async def baits_section(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text="ü™± –ù–∞–∂–∏–≤–∫–∏ –≤ –ø—Ä–æ–¥–∞–∂–µ:\n"
    for b in BAITS:
        text+=f"{b['name']} - {b['price']} –∑–æ–ª–æ—Ç–∞\n"
    text+="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∂–∏–≤–∫—É –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥."
    keyboard=[[KeyboardButton(b["name"])] for b in BAITS]
    keyboard.append([KeyboardButton(BUTTON_GO_BACK)])
    await update.message.reply_text(text,reply_markup=ReplyKeyboardMarkup(keyboard,resize_keyboard=True))
    return BUY_BAIT

async def buy_bait_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    bait_name=update.message.text.strip()
    if bait_name==BUTTON_GO_BACK:
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω.",
                                        reply_markup=ReplyKeyboardMarkup([
                                            [KeyboardButton(BUTTON_RODS), KeyboardButton(BUTTON_BAITS)],
                                            [KeyboardButton(BUTTON_SELL_ALL), KeyboardButton(BUTTON_EXCHANGE_GOLD)],
                                            [KeyboardButton(BUTTON_GO_BACK)],
                                        ], resize_keyboard=True))
        return ConversationHandler.END
    bait=next((b for b in BAITS if b["name"]==bait_name),None)
    if bait:
        context.user_data["pending_bait"]=bait
        keyboard=[[KeyboardButton(BUTTON_CONFIRM_YES),KeyboardButton(BUTTON_CONFIRM_NO)]]
        await update.message.reply_text(
            f"–ö—É–ø–∏—Ç—å {bait['name']} –∑–∞ {bait['price']} –∑–æ–ª–æ—Ç–∞?\n–≠—Ç–æ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—à–∏ —à–∞–Ω—Å—ã –ø–æ–π–º–∞—Ç—å —Ä–µ–¥–∫—É—é –∏–ª–∏ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—É—é —Ä—ã–±—É!",
            reply_markup=ReplyKeyboardMarkup(keyboard,resize_keyboard=True)
        )
        return CONFIRM_BUY_BAIT
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞–∂–∏–≤–∫–∞.",
                                        reply_markup=ReplyKeyboardMarkup([
                                            [KeyboardButton(BUTTON_RODS), KeyboardButton(BUTTON_BAITS)],
                                            [KeyboardButton(BUTTON_SELL_ALL), KeyboardButton(BUTTON_EXCHANGE_GOLD)],
                                            [KeyboardButton(BUTTON_GO_BACK)],
                                        ], resize_keyboard=True))
        return ConversationHandler.END

async def confirm_buy_bait_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    ud=users_data[user.id]
    bait=context.user_data.get("pending_bait")
    if not bait:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–∞–∂–∏–≤–∫–∏.",
                                        reply_markup=ReplyKeyboardMarkup([
                                            [KeyboardButton(BUTTON_RODS), KeyboardButton(BUTTON_BAITS)],
                                            [KeyboardButton(BUTTON_SELL_ALL), KeyboardButton(BUTTON_EXCHANGE_GOLD)],
                                            [KeyboardButton(BUTTON_GO_BACK)],
                                        ], resize_keyboard=True))
        return ConversationHandler.END
    if update.message.text==BUTTON_CONFIRM_YES:
        if ud["gold"]>=bait["price"]:
            ud["gold"]-=bait["price"]
            ud["current_bait"]={
                "name":bait["name"],
                "end_time":datetime.utcnow()+bait["duration"],
                "probabilities":bait["probabilities"]
            }
            await update.message.reply_text(
                f"–í—ã –∫—É–ø–∏–ª–∏ {bait['name']}! –¢–µ–ø–µ—Ä—å –≤–∞—à–∏ —à–∞–Ω—Å—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è!",
                reply_markup=ReplyKeyboardMarkup([
                    [KeyboardButton(BUTTON_RODS), KeyboardButton(BUTTON_BAITS)],
                    [KeyboardButton(BUTTON_SELL_ALL), KeyboardButton(BUTTON_EXCHANGE_GOLD)],
                    [KeyboardButton(BUTTON_GO_BACK)],
                ], resize_keyboard=True))
        else:
            need=bait["price"]-ud["gold"]
            await update.message.reply_text(
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞! –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {need}.",
                reply_markup=ReplyKeyboardMarkup([
                    [KeyboardButton(BUTTON_RODS), KeyboardButton(BUTTON_BAITS)],
                    [KeyboardButton(BUTTON_SELL_ALL), KeyboardButton(BUTTON_EXCHANGE_GOLD)],
                    [KeyboardButton(BUTTON_GO_BACK)],
                ], resize_keyboard=True))
    else:
        await update.message.reply_text("–ü–æ–∫—É–ø–∫–∞ –Ω–∞–∂–∏–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                                        reply_markup=ReplyKeyboardMarkup([
                                            [KeyboardButton(BUTTON_RODS), KeyboardButton(BUTTON_BAITS)],
                                            [KeyboardButton(BUTTON_SELL_ALL), KeyboardButton(BUTTON_EXCHANGE_GOLD)],
                                            [KeyboardButton(BUTTON_GO_BACK)],
                                        ], resize_keyboard=True))
    context.user_data.pop("pending_bait",None)
    return ConversationHandler.END

async def universal_go_back_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è...",reply_markup=main_menu_keyboard())

# –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –ø–æ–º–æ—â–∏
async def help_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?",
                                    reply_markup=help_menu_keyboard())
    return HELP_MENU

async def help_subtopic_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    topic=update.message.text
    if topic==BUTTON_GO_BACK:
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–º–æ—â–∏
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø–æ–º–æ—â–∏...",
                                        reply_markup=help_menu_keyboard())
        return HELP_MENU
    # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ —Ç–µ–º–µ
    txt=help_text(topic)
    await update.message.reply_text(txt, reply_markup=ReplyKeyboardMarkup([
        [KeyboardButton(BUTTON_GO_BACK)]
    ],resize_keyboard=True))
    return HELP_SUBTOPIC

async def help_go_back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –º–µ–Ω—é –ø–æ–º–æ—â–∏
    await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
                                    reply_markup=main_menu_keyboard())
    return ConversationHandler.END


def main():
    token = "8132081407:AAGSbjptd2JBrVUNOheyvvfC7nwIfMagD4o"
    application = ApplicationBuilder().token(token).build()
    application.bot_data["global_users_data"]=users_data

    # –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–º–æ—â–∏
    help_conv_handler=ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(f"^{re.escape(BUTTON_HELP)}$"), help_main_menu)],
        states={
            HELP_MENU:[
                MessageHandler(filters.Regex(f"^{re.escape(BUTTON_HELP_FISHING)}$|^{re.escape(BUTTON_HELP_RODS)}$|^{re.escape(BUTTON_HELP_BAITS)}$|^{re.escape(BUTTON_HELP_SHOP)}$|^{re.escape(BUTTON_HELP_GUILDS)}$|^{re.escape(BUTTON_HELP_ABOUT)}$"), help_subtopic_handler),
                MessageHandler(filters.Regex(f"^{re.escape(BUTTON_GO_BACK)}$"), help_go_back_to_main),
            ],
            HELP_SUBTOPIC:[
                MessageHandler(filters.Regex(f"^{re.escape(BUTTON_GO_BACK)}$"), help_main_menu)
            ]
        },
        fallbacks=[MessageHandler(filters.Regex(f"^{re.escape(BUTTON_GO_BACK)}$"), help_go_back_to_main)],
        allow_reentry=True
    )

    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex(f"^{re.escape(BUTTON_START_FISHING)}$"), begin_fishing),
            MessageHandler(filters.Regex(f"^{re.escape(BUTTON_RODS)}$"), rods_section),
            MessageHandler(filters.Regex(f"^{re.escape(BUTTON_BAITS)}$"), baits_section),
            MessageHandler(filters.Regex(f"^{re.escape(BUTTON_EXCHANGE_GOLD)}$"), exchange_gold_handler_func),
            MessageHandler(filters.Regex(f"^{re.escape(BUTTON_LEADERBOARD)}$"), leaderboard_handler_func)
        ],
        states={
            ASK_NICKNAME:[MessageHandler((filters.TEXT & ~filters.COMMAND),set_nickname)],
            BUY_ROD:[MessageHandler((filters.TEXT & ~filters.COMMAND),buy_rod_handler)],
            CONFIRM_BUY_ROD:[MessageHandler(filters.Regex(f"^{BUTTON_CONFIRM_YES}$|^{BUTTON_CONFIRM_NO}$"),confirm_buy_rod_handler)],
            BUY_BAIT:[MessageHandler((filters.TEXT & ~filters.COMMAND),buy_bait_handler)],
            CONFIRM_BUY_BAIT:[MessageHandler(filters.Regex(f"^{BUTTON_CONFIRM_YES}$|^{BUTTON_CONFIRM_NO}$"),confirm_buy_bait_handler)],
            EXCHANGE:[MessageHandler(filters.Regex(f"^{BUTTON_CONFIRM_YES}$|^{BUTTON_CONFIRM_NO}$"),confirm_exchange_handler)],
            LEADERBOARD_CATEGORY:[
                MessageHandler(filters.Regex(f"^{re.escape(BUTTON_TOTAL_GOLD)}$|^{re.escape(BUTTON_TOTAL_KG)}$|^{re.escape(BUTTON_TOTAL_EXPERIENCE)}$"),leaderboard_show),
                MessageHandler(filters.Regex(f"^{re.escape(BUTTON_GO_BACK)}$"), go_back)
            ],
        },
        fallbacks=[
            MessageHandler(filters.Regex(f"^{re.escape(BUTTON_GO_BACK)}$"), go_back),
            CommandHandler("cancel", cancel_nickname)
        ],
        allow_reentry=True
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(guild_conversation_handler())  
    application.add_handler(conv_handler)
    application.add_handler(help_conv_handler)

    # –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    application.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BUTTON_LAKE)}$"), lake_handler))
    application.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BUTTON_INVENTORY)}$"), inventory_handler_func))
    application.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BUTTON_SHOP)}$"), shop_handler_func))
    application.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BUTTON_ABOUT_FISHERMAN)}$"), about_fisherman_handler))
    application.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BUTTON_CATCH_FISH)}$"), catch_fish_handler))
    application.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BUTTON_UPDATE)}$"), update_fishing_status_handler))
    application.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BUTTON_PULL)}$"), pull_hook_handler))
    application.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BUTTON_IDENTIFY_FISH)}$"), identify_fish_handler))
    application.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BUTTON_SELL_ALL)}$"), sell_fish_handler_func))

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤–Ω–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
    application.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BUTTON_GO_BACK)}$"), universal_go_back_handler))

    # –•–µ–Ω–¥–ª–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äì –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.run_polling()

if __name__=="__main__":
    main()
