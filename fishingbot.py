import logging
import random
import re
from math import pi
from collections import defaultdict
from datetime import datetime, timedelta

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç –¥–ª—è –∫–Ω–æ–ø–æ–∫
BUTTON_START_FISHING = "üé£ –ù–∞—á–∞—Ç—å —Ä—ã–±–∞–ª–∫—É"
BUTTON_LAKE = "üèû –û–∑–µ—Ä–æ"
BUTTON_INVENTORY = "üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"
BUTTON_SHOP = "üè™ –ú–∞–≥–∞–∑–∏–Ω"
BUTTON_CATCH_FISH = "üé£ –õ–æ–≤–∏—Ç—å —Ä—ã–±–∫—É"
BUTTON_UPDATE = "üîÑ –û–±–Ω–æ–≤–∏—Ç—å"
BUTTON_GO_BACK = "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è"
BUTTON_IDENTIFY_FISH = "üîç –û–ø–æ–∑–Ω–∞—Ç—å —Ä—ã–±—É"
BUTTON_SELL_ALL = "üí∞ –ü—Ä–æ–¥–∞—Ç—å –≤—Å–µ –∑–∞ –∑–æ–ª–æ—Ç–æ"
BUTTON_EXCHANGE_GOLD = "üîÑ –û–±–º–µ–Ω—è—Ç—å –∑–æ–ª–æ—Ç–æ"
BUTTON_PULL = "üêü –¢—è–Ω—É—Ç—å"
BUTTON_CONFIRM_YES = "‚úÖ –î–∞"
BUTTON_CONFIRM_NO = "‚ùå –ù–µ—Ç"
BUTTON_CONFIRM_NOT_ENOUGH = "‚ùå –ù–µ—Ö–≤–∞—Ç–∞–µ—Ç –∑–æ–ª–æ—Ç–∞! –ù—É–∂–Ω–æ 25000+"
BUTTON_LEADERBOARD = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –õ–∏–¥–µ—Ä–æ–≤"
BUTTON_TOTAL_GOLD = "üí∞ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–æ–ª–æ—Ç–∞"
BUTTON_TOTAL_KG = "üêü –í—Å–µ–≥–æ –ø–æ–π–º–∞–Ω–æ –ö–ì —Ä—ã–±—ã"
BUTTON_TOTAL_EXPERIENCE = "‚≠ê –°–∞–º—ã–µ –æ–ø—ã—Ç–Ω—ã–µ"
BUTTON_RODS = "üé£ –£–¥–æ—á–∫–∏"
BUTTON_BAITS = "ü™± –ù–∞–∂–∏–≤–∫–∏"
BUTTON_ABOUT_FISHERMAN = "üë§ –û —Ä—ã–±–∞–∫–µ"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ASK_NICKNAME = 1
BUY_ROD = 2
CONFIRM_BUY_ROD = 3
CONFIRM_REPLACE_ROD = 4
BUY_BAIT = 5
CONFIRM_BUY_BAIT = 6
CONFIRM_REPLACE_BAIT = 7

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è defaultdict –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
users_data = defaultdict(lambda: {
    "nickname": None,
    "inventory": defaultdict(int),
    "gold": 0,  # –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–æ–ª–æ—Ç–æ
    "unidentified": {"common": 0, "rare": 0, "legendary": 0},
    "fishing": None,  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–æ–≤–ª–∏
    "shop_gold": 0,    # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—á—ë—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏
    "total_gold_earned": 0,  # –ù–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ –∑–æ–ª–æ—Ç–æ
    "total_kg_caught": 0,     # –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –≤–µ—Å —Ä—ã–±—ã
    "current_rod": {
        "name": "–ë–∞–º–±—É–∫–æ–≤–∞—è —É–¥–æ—á–∫–∞ üé£",
        "bonus_percent": 0
    },
    "current_bait": None,  # {"name": str, "end_time": datetime, "probabilities": dict}
    "experience": 0,
    "level": 1,
    "rank": "–Æ–Ω—ã–π —Ä—ã–±–∞–∫",
    "registration_time": datetime.utcnow(),
    "fish_caught_per_rod": defaultdict(int),
    "fish_caught_per_bait": defaultdict(int)
})

# –¢–∞–±–ª–∏—Ü–∞ —É—Ä–æ–≤–Ω–µ–π –¥–æ 75 —É—Ä–æ–≤–Ω—è
LEVELS = [
    {"level": 1, "required_xp": 10, "rank": "–Æ–Ω—ã–π —Ä—ã–±–∞–∫"},
    {"level": 2, "required_xp": 38, "rank": "–Æ–Ω—ã–π —Ä—ã–±–∞–∫"},
    {"level": 3, "required_xp": 89, "rank": "–Æ–Ω—ã–π —Ä—ã–±–∞–∫"},
    {"level": 4, "required_xp": 169, "rank": "–ù–∞—á–∏–Ω–∞—é—â–∏–π –ª–æ–≤–µ—Ü"},
    {"level": 5, "required_xp": 477, "rank": "–ù–∞—á–∏–Ω–∞—é—â–∏–π –ª–æ–≤–µ—Ü"},
    {"level": 6, "required_xp": 1008, "rank": "–ù–∞—á–∏–Ω–∞—é—â–∏–π –ª–æ–≤–µ—Ü"},
    {"level": 7, "required_xp": 1809, "rank": "–õ–æ–≤–µ—Ü –º–µ–ª–∫–æ–π —Ä—ã–±—ë—à–∫–∏"},
    {"level": 8, "required_xp": 2940, "rank": "–õ–æ–≤–µ—Ü –º–µ–ª–∫–æ–π —Ä—ã–±—ë—à–∫–∏"},
    {"level": 9, "required_xp": 4470, "rank": "–õ–æ–≤–µ—Ü –º–µ–ª–∫–æ–π —Ä—ã–±—ë—à–∫–∏"},
    {"level": 10, "required_xp": 6471, "rank": "–û–ø—ã—Ç–Ω—ã–π —É–¥–∏–ª—å—â–∏–∫"},
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π 11-75 —Å –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º –æ–ø—ã—Ç–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Ä–∞–Ω–≥–∞–º–∏
]
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –¥–æ 75
for lvl in range(11, 76):
    required_xp = int(LEVELS[-1]["required_xp"] * 1.5)
    rank = f"–†–∞–Ω–≥ {lvl}"
    LEVELS.append({"level": lvl, "required_xp": required_xp, "rank": rank})

# –†—ã–±—ã
COMMON_FISH = [
    ("–ú–µ–ª–∫–∏–π –∫–∞—Ä–∞—Å—å", 2),
    ("–•–∏–ª—ã–π –æ–∫—É–Ω—å", 3),
    ("–ú–µ–ª–∫–∏–π —â—É–∫–∞", 4),
    ("–•–∏–ª—ã–π –ª–µ—â", 2),
    ("–ú–µ–ª–∫–∏–π –ø–ª–æ—Ç–≤–∞", 1),
    ("–•–∏–ª—ã–π —Å—É–¥–∞–∫", 3),
    ("–ú–µ–ª–∫–∏–π –ª–∏–Ω—å", 1),
    ("–•–∏–ª—ã–π —É–≥–æ—Ä—å", 4),
    ("–ú–µ–ª–∫–∏–π —Å–æ–º", 5),
    ("–•–∏–ª—ã–π —Ç—Ä–µ—â–æ—Ç–∫–∞", 2),
    ("–ú–µ–ª–∫–∏–π –Ω–∞–ª–∏–º", 4),
    ("–•–∏–ª—ã–π —É–∫–ª–µ–π–∫–∞", 2),
    ("–ú–µ–ª–∫–∏–π –µ—Ä—à", 1),
    ("–•–∏–ª—ã–π —Ä–æ—Ç–∞–Ω", 3),
    ("–ú–µ–ª–∫–∏–π –º–∏–Ω—Ç–∞–π", 3),
    # –ù–æ–≤—ã–µ –æ–±—ã—á–Ω—ã–µ —Ä—ã–±—ã
    ("–ú–µ–ª–∫–∏–π –ø–µ—Å–∫–∞—Ä—å", 2),
    ("–•–∏–ª—ã–π –≥–æ–ª–∞–≤–ª–∏–∫", 3),
    ("–ú–æ–ª–æ–¥–æ–π –∫–∞—Ä–∞—Å—å", 2),
    ("–Æ—Ä–∫–∏–π –µ—Ä—à", 1),
    ("–°–µ—Ä–µ–Ω—å–∫–∏–π –æ–∫—É–Ω—å", 3),
    ("–ú–æ–ª–æ–¥–æ–π –Ω–∞–ª–∏–º", 4),
    ("–Æ—Ä–∫–∏–π –ø–æ–¥–ª–µ—â–∏–∫", 2),
    ("–°–µ—Ä–µ–Ω—å–∫–∞—è –ø–ª–æ—Ç–≤–∏—á–∫–∞", 1),
    ("–ú–æ–ª–æ–¥–æ–π –≤–µ—Ä—Ö–æ–≤–æ–¥", 1),
    ("–Æ—Ä–∫–∏–π —Ä–æ—Ç–∞–Ω", 3),
]

RARE_FISH = [
    ("–ö—Ä–∞—Å–∏–≤—ã–π –æ—Å—ë—Ç—Ä", 14),
    ("–ü–µ—Ä–µ–ª–∏–≤–∞—é—â–∞—è—Å—è –∫–∞–º–±–∞–ª–∞", 11),
    ("–°—Ä–µ–¥–Ω–∏–π –ª–æ—Å–æ—Å—å", 13),
    ("–ö—Ä–∞—Å–∏–≤—ã–π –±–µ–ª–æ–≥–æ–ª–æ–≤–∏–∫", 8),
    ("–ü–µ—Ä–µ–ª–∏–≤–∞—é—â–∞—è—Å—è —Ñ–æ—Ä–µ–ª—å", 12),
    ("–°—Ä–µ–¥–Ω–∏–π –≥–æ–ª–∞–≤–ª—å", 9),
    ("–ö—Ä–∞—Å–∏–≤—ã–π —Ç—Ä–µ—Å–∫–∞", 10),
    ("–ü–µ—Ä–µ–ª–∏–≤–∞—é—â–∏–π—Å—è —Å–∞–∑–∞–Ω", 15),
    ("–°—Ä–µ–¥–Ω–∏–π —Å–æ–º", 14),
    ("–ö—Ä–∞—Å–∏–≤—ã–π —â–∏–ø—É–Ω", 7),
    # –ù–æ–≤—ã–µ —Ä–µ–¥–∫–∏–µ —Ä—ã–±—ã
    ("–ö—Ä–∞—Å–∏–≤—ã–π –∞–º—É—Ä", 10),
    ("–ü–µ—Ä–µ–ª–∏–≤–∞—é—â–∞—è—Å—è –±–µ–ª–æ—Ä—ã–±–∏—Ü–∞", 12),
    ("–°—Ä–µ–¥–Ω–∏–π —Å–æ–º–∏–∫", 9),
    ("–ù–µ–æ–±—ã—á–Ω—ã–π —Ç–æ–ª—Å—Ç–æ–ª–æ–±–∏–∫", 13),
    ("–†–µ–¥–∫–∞—è —Å—Ç–µ—Ä–ª—è–¥—å", 15),
    ("–•–æ—Ä–æ—à–∏–π —Å—É–¥–∞–∫", 11),
    ("–ö—Ä–∞—Å–∏–≤—ã–π –≥–æ–ª–∞–≤–ª—å", 9),
    ("–ü–µ—Ä–µ–ª–∏–≤–∞—é—â–∞—è—Å—è –∫–µ—Ñ–∞–ª—å", 12),
    ("–°—Ä–µ–¥–Ω–∏–π —Å–∏–≥", 8),
    ("–ù–µ–æ–±—ã—á–Ω–∞—è —Ç—Ä–µ—Å–∫–∞", 10),
]

LEGENDARY_FISH = [
    ("–ö–æ–ª–æ—Å—Å–∞–ª—å–Ω—ã–π –æ—Å—ë—Ç—Ä", 70),
    ("–ü–µ—Ä–µ–ª–∏–≤–∞—é—â–∏–π—Å—è –ª–æ—Å–æ—Å—å", 60),
    ("–°–≤–µ—Ç—è—â–∏–π—Å—è —Å–æ–º", 55),
    ("–ö–æ–ª–æ—Å—Å–∞–ª—å–Ω–∞—è —â—É–∫–∞", 65),
    ("–ü–µ—Ä–µ–ª–∏–≤–∞—é—â–∏–π—Å—è —Ç—É–Ω–µ—Ü", 50),
    ("–°–≤–µ—Ç—è—â–∏–π—Å—è —Å—É–¥–∞–∫", 45),
    ("–ö–æ–ª–æ—Å—Å–∞–ª—å–Ω—ã–π —É–≥–æ—Ä—å", 75),
    ("–ü–µ—Ä–µ–ª–∏–≤–∞—é—â–∏–π—Å—è –º–æ—Ä—Å–∫–æ–π –∫–∞—Ä–∞—Å—å", 40),
    ("–°–≤–µ—Ç—è—â–∏–π—Å—è —Ç—Ä–µ—Å–∫–∞", 35),
    ("–ö–æ–ª–æ—Å—Å–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–µ–ª—å", 55),
    ("–¢—Ä–æ—Ñ–µ–π–Ω—ã–π –æ—Å—ë—Ç—Ä", 70),
    ("–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–∞—è —Ñ–æ—Ä–µ–ª—å", 60),
    ("–ù–µ–ø—Ä–µ–≤–∑–æ–π–¥—ë–Ω–Ω—ã–π —É–≥–æ—Ä—å", 75),
    ("–¢—Ä–æ—Ñ–µ–π–Ω—ã–π —Å–∞–∑–∞–Ω", 65),
    ("–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–∞—è –∫–µ—Ç–∞", 50),
    ("–ù–µ–ø—Ä–µ–≤–∑–æ–π–¥—ë–Ω–Ω—ã–π —Å–æ–º", 55),
    ("–¢—Ä–æ—Ñ–µ–π–Ω–∞—è —â—É–∫–∞", 45),
    ("–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã–π –ª–æ—Å–æ—Å—å", 72),
    ("–ù–µ–ø—Ä–µ–≤–∑–æ–π–¥—ë–Ω–Ω—ã–π —Å—É–¥–∞–∫", 40),
    ("–ü–µ—Ä–µ–ª–∏–≤–∞—é—â–∏–π—Å—è –∞–º—É—Ä", 50),
]

IDENTIFIED_FISH = {
    # Common
    "–ú–µ–ª–∫–∏–π –∫–∞—Ä–∞—Å—å": 2,
    "–•–∏–ª—ã–π –æ–∫—É–Ω—å": 3,
    "–ú–µ–ª–∫–∏–π —â—É–∫–∞": 4,
    "–•–∏–ª—ã–π –ª–µ—â": 2,
    "–ú–µ–ª–∫–∏–π –ø–ª–æ—Ç–≤–∞": 1,
    "–•–∏–ª—ã–π —Å—É–¥–∞–∫": 3,
    "–ú–µ–ª–∫–∏–π –ª–∏–Ω—å": 1,
    "–•–∏–ª—ã–π —É–≥–æ—Ä—å": 4,
    "–ú–µ–ª–∫–∏–π —Å–æ–º": 5,
    "–•–∏–ª—ã–π —Ç—Ä–µ—â–æ—Ç–∫–∞": 2,
    "–ú–µ–ª–∫–∏–π –Ω–∞–ª–∏–º": 4,
    "–•–∏–ª—ã–π —É–∫–ª–µ–π–∫–∞": 2,
    "–ú–µ–ª–∫–∏–π –µ—Ä—à": 1,
    "–•–∏–ª—ã–π —Ä–æ—Ç–∞–Ω": 3,
    "–ú–µ–ª–∫–∏–π –º–∏–Ω—Ç–∞–π": 3,
    "–ú–µ–ª–∫–∏–π –ø–µ—Å–∫–∞—Ä—å": 2,
    "–•–∏–ª—ã–π –≥–æ–ª–∞–≤–ª–∏–∫": 3,
    "–ú–æ–ª–æ–¥–æ–π –∫–∞—Ä–∞—Å—å": 2,
    "–Æ—Ä–∫–∏–π –µ—Ä—à": 1,
    "–°–µ—Ä–µ–Ω—å–∫–∏–π –æ–∫—É–Ω—å": 3,
    "–ú–æ–ª–æ–¥–æ–π –Ω–∞–ª–∏–º": 4,
    "–Æ—Ä–∫–∏–π –ø–æ–¥–ª–µ—â–∏–∫": 2,
    "–°–µ—Ä–µ–Ω—å–∫–∞—è –ø–ª–æ—Ç–≤–∏—á–∫–∞": 1,
    "–ú–æ–ª–æ–¥–æ–π –≤–µ—Ä—Ö–æ–≤–æ–¥": 1,
    "–Æ—Ä–∫–∏–π —Ä–æ—Ç–∞–Ω": 3,
    # Rare
    "–ö—Ä–∞—Å–∏–≤—ã–π –æ—Å—ë—Ç—Ä": 14,
    "–ü–µ—Ä–µ–ª–∏–≤–∞—é—â–∞—è—Å—è –∫–∞–º–±–∞–ª–∞": 11,
    "–°—Ä–µ–¥–Ω–∏–π –ª–æ—Å–æ—Å—å": 13,
    "–ö—Ä–∞—Å–∏–≤—ã–π –±–µ–ª–æ–≥–æ–ª–æ–≤–∏–∫": 8,
    "–ü–µ—Ä–µ–ª–∏–≤–∞—é—â–∞—è—Å—è —Ñ–æ—Ä–µ–ª—å": 12,
    "–°—Ä–µ–¥–Ω–∏–π –≥–æ–ª–∞–≤–ª—å": 9,
    "–ö—Ä–∞—Å–∏–≤—ã–π —Ç—Ä–µ—Å–∫–∞": 10,
    "–ü–µ—Ä–µ–ª–∏–≤–∞—é—â–∏–π—Å—è —Å–∞–∑–∞–Ω": 15,
    "–°—Ä–µ–¥–Ω–∏–π —Å–æ–º": 14,
    "–ö—Ä–∞—Å–∏–≤—ã–π —â–∏–ø—É–Ω": 7,
    "–ö—Ä–∞—Å–∏–≤—ã–π –∞–º—É—Ä": 10,
    "–ü–µ—Ä–µ–ª–∏–≤–∞—é—â–∞—è—Å—è –±–µ–ª–æ—Ä—ã–±–∏—Ü–∞": 12,
    "–°—Ä–µ–¥–Ω–∏–π —Å–æ–º–∏–∫": 9,
    "–ù–µ–æ–±—ã—á–Ω—ã–π —Ç–æ–ª—Å—Ç–æ–ª–æ–±–∏–∫": 13,
    "–†–µ–¥–∫–∞—è —Å—Ç–µ—Ä–ª—è–¥—å": 15,
    "–•–æ—Ä–æ—à–∏–π —Å—É–¥–∞–∫": 11,
    "–ö—Ä–∞—Å–∏–≤—ã–π –≥–æ–ª–∞–≤–ª—å": 9,
    "–ü–µ—Ä–µ–ª–∏–≤–∞—é—â–∞—è—Å—è –∫–µ—Ñ–∞–ª—å": 12,
    "–°—Ä–µ–¥–Ω–∏–π —Å–∏–≥": 8,
    "–ù–µ–æ–±—ã—á–Ω–∞—è —Ç—Ä–µ—Å–∫–∞": 10,
    # Legendary
    "–ö–æ–ª–æ—Å—Å–∞–ª—å–Ω—ã–π –æ—Å—ë—Ç—Ä": 70,
    "–ü–µ—Ä–µ–ª–∏–≤–∞—é—â–∏–π—Å—è –ª–æ—Å–æ—Å—å": 60,
    "–°–≤–µ—Ç—è—â–∏–π—Å—è —Å–æ–º": 55,
    "–ö–æ–ª–æ—Å—Å–∞–ª—å–Ω–∞—è —â—É–∫–∞": 65,
    "–ü–µ—Ä–µ–ª–∏–≤–∞—é—â–∏–π—Å—è —Ç—É–Ω–µ—Ü": 50,
    "–°–≤–µ—Ç—è—â–∏–π—Å—è —Å—É–¥–∞–∫": 45,
    "–ö–æ–ª–æ—Å—Å–∞–ª—å–Ω—ã–π —É–≥–æ—Ä—å": 75,
    "–ü–µ—Ä–µ–ª–∏–≤–∞—é—â–∏–π—Å—è –º–æ—Ä—Å–∫–æ–π –∫–∞—Ä–∞—Å—å": 40,
    "–°–≤–µ—Ç—è—â–∏–π—Å—è —Ç—Ä–µ—Å–∫–∞": 35,
    "–ö–æ–ª–æ—Å—Å–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–µ–ª—å": 55,
    "–¢—Ä–æ—Ñ–µ–π–Ω—ã–π –æ—Å—ë—Ç—Ä": 70,
    "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–∞—è —Ñ–æ—Ä–µ–ª—å": 60,
    "–ù–µ–ø—Ä–µ–≤–∑–æ–π–¥—ë–Ω–Ω—ã–π —É–≥–æ—Ä—å": 75,
    "–¢—Ä–æ—Ñ–µ–π–Ω—ã–π —Å–∞–∑–∞–Ω": 65,
    "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–∞—è –∫–µ—Ç–∞": 50,
    "–ù–µ–ø—Ä–µ–≤–∑–æ–π–¥—ë–Ω–Ω—ã–π —Å–æ–º": 55,
    "–¢—Ä–æ—Ñ–µ–π–Ω–∞—è —â—É–∫–∞": 45,
    "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã–π –ª–æ—Å–æ—Å—å": 72,
    "–ù–µ–ø—Ä–µ–≤–∑–æ–π–¥—ë–Ω–Ω—ã–π —Å—É–¥–∞–∫": 40,
    "–ü–µ—Ä–µ–ª–∏–≤–∞—é—â–∏–π—Å—è –∞–º—É—Ä": 50,
}

# –£–¥–æ—á–∫–∏
RODS = [
    {"name": "–£–¥–æ—á–∫–∞ –ù–æ–≤–∏—á–∫–∞ üé£", "price": 10, "bonus_percent": 5},
    {"name": "–£–¥–æ—á–∫–∞ –õ—é–±–∏—Ç–µ–ª—è üé£", "price": 50, "bonus_percent": 10},
    {"name": "–£–¥–æ—á–∫–∞ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è üé£", "price": 200, "bonus_percent": 15},
    {"name": "–£–¥–æ—á–∫–∞ –ü–†–û üé£", "price": 500, "bonus_percent": 25},
    {"name": "–ó–æ–ª–æ—Ç–∞—è –£–¥–æ—á–∫–∞ üé£", "price": 5000, "bonus_percent": 50},
]

# –ù–∞–∂–∏–≤–∫–∏
BAITS = [
    {
        "name": "–ß–µ—Ä–≤—è–∫ ü™±",
        "price": 5,
        "duration": timedelta(hours=1),
        "probabilities": {"common": 60, "rare": 35, "legendary": 5}
    },
    {
        "name": "–ü–∏—è–≤–∫–∞ ü™±",
        "price": 20,
        "duration": timedelta(hours=1),
        "probabilities": {"common": 55, "rare": 60, "legendary": 5}
    },
    {
        "name": "–ú—è—Å–æ –∫—Ä–∞–±–∞ ü™±",
        "price": 100,
        "duration": timedelta(hours=1),
        "probabilities": {"common": 55, "rare": 54, "legendary": 6}
    },
    {
        "name": "–û—Å—å–º–∏–Ω–æ–≥ ü™±",
        "price": 250,
        "duration": timedelta(hours=1),
        "probabilities": {"common": 50, "rare": 50, "legendary": 10}
    },
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def get_welcome_text():
    return (
        "üåÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –Ω–∞—Å—Ç–æ—è—â—É—é (–ø–æ—á—Ç–∏) —Ä—ã–±–∞–ª–∫—É!\n\n"
        "–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–π–º–∞—Ç—å –∫—É—á—É —Ä—ã–±—ã –∏ –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º —Ä—ã–±–∞–ª–∫–∏ –≤ –æ–±—ä—è—Ç–∏—è—Ö –ø—Ä–∏—Ä–æ–¥—ã. "
        "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–ª–æ–≤–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç—å —Ä—ã–±—É –∑–∞ –Ω–∞—Å—Ç–æ—è—â—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É. "
        "–ü–æ–≥—Ä—É–∑–∏—Ç–µ—Å—å –≤ –º–∏—Ä —Ä—ã–±–∞–ª–∫–∏ –∏ –∏—Å–ø—ã—Ç–∞–π—Ç–µ —Å–≤–æ—é —É–¥–∞—á—É! üé£üêü"
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
def get_onboarding_text():
    return (
        "üé£ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –º–∏—Ä —Ä—ã–±–∞–ª–∫–∏!\n\n"
        "–£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –æ–∑–µ—Ä–æ, –≥–¥–µ –º–æ–∂–Ω–æ –ª–æ–≤–∏—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—É—é —Ä—ã–±—É. –í –≤–∞—à–µ–º —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–ª–æ–≤–∞ –∏ –º–∞–≥–∞–∑–∏–Ω, "
        "–≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞–≤–∞—Ç—å —Ä—ã–±—É –∑–∞ –Ω–∞—Å—Ç–æ—è—â—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É.\n\n"
        "–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, –Ω–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –≤–∞–º –∏–º—è. –ö–∞–∫ –Ω–∞–º —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å, —Ä—ã–±–∞–∫? –ü—Ä–∏–¥—É–º–∞–π —Å–µ–±–µ –∏–º—è –¥–æ 25 —Å–∏–º–≤–æ–ª–æ–≤. üê†"
    )

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu_keyboard():
    keyboard = [
        [KeyboardButton(BUTTON_LAKE)],
        [KeyboardButton(BUTTON_INVENTORY), KeyboardButton(BUTTON_ABOUT_FISHERMAN)],
        [KeyboardButton(BUTTON_SHOP), KeyboardButton(BUTTON_LEADERBOARD)],
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –û–∑–µ—Ä–æ –º–µ–Ω—é
def lake_menu_keyboard():
    keyboard = [
        [KeyboardButton(BUTTON_CATCH_FISH)],
        [KeyboardButton(BUTTON_UPDATE)],
        [KeyboardButton(BUTTON_GO_BACK)],
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –º–µ–Ω—é
def inventory_menu_keyboard():
    keyboard = [
        [KeyboardButton(BUTTON_IDENTIFY_FISH)],
        [KeyboardButton(BUTTON_GO_BACK)],
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ú–∞–≥–∞–∑–∏–Ω –º–µ–Ω—é
def shop_menu_keyboard():
    keyboard = [
        [KeyboardButton(BUTTON_RODS), KeyboardButton(BUTTON_BAITS)],
        [KeyboardButton(BUTTON_SELL_ALL), KeyboardButton(BUTTON_EXCHANGE_GOLD)],
        [KeyboardButton(BUTTON_GO_BACK)],
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –º–µ–Ω—é
def leaderboard_menu_keyboard():
    keyboard = [
        [KeyboardButton(BUTTON_TOTAL_GOLD), KeyboardButton(BUTTON_TOTAL_KG)],
        [KeyboardButton(BUTTON_TOTAL_EXPERIENCE)],
        [KeyboardButton(BUTTON_GO_BACK)],
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ú–µ–Ω—é "–û —Ä—ã–±–∞–∫–µ"
def about_fisherman_keyboard():
    keyboard = [
        [KeyboardButton(BUTTON_GO_BACK)],
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –æ–∑–µ—Ä–∞
def get_lake_text(user_nickname):
    return (
        f"üåä {user_nickname} –ø—Ä–∏—à—ë–ª –Ω–∞ –æ–∑–µ—Ä–æ. –í–æ–¥–∞ —Å–ø–æ–∫–æ–π–Ω–∞—è, —É—Ç–∫–∏ –ø–ª–∞–≤–∞—é—Ç, –∏ –≤—ã —Ä–µ—à–∞–µ—Ç–µ –∑–∞–∫–∏–Ω—É—Ç—å —É–¥–æ—á–∫—É.\n"
        "–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?"
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
def get_inventory_text(user_data):
    inventory = user_data["inventory"]
    unidentified = user_data["unidentified"]
    gold = user_data["gold"]
    current_rod = user_data["current_rod"]
    current_bait = user_data["current_bait"]
    text = "üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n\n"

    # –£–¥–æ—á–∫–∞
    text += f"üé£ –£–¥–æ—á–∫–∞: {current_rod['name']} üé£ (—É–º–µ–Ω—å—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä—ã–±–∞–ª–∫–∏ –Ω–∞ {current_rod['bonus_percent']}%)\n"

    # –ù–∞–∂–∏–≤–∫–∞
    if current_bait:
        remaining = int((current_bait["end_time"] - datetime.utcnow()).total_seconds() / 60)
        if remaining > 0:
            text += f"ü™± –ù–∞–∂–∏–≤–∫–∞: {current_bait['name']} ü™± (–æ—Å—Ç–∞–ª–æ—Å—å –µ—â—ë {remaining} –º–∏–Ω—É—Ç)\n"
        else:
            text += "ü™± –ù–∞–∂–∏–≤–∫–∞: –Ω–µ—Ç ü™±\n"
    else:
        text += "ü™± –ù–∞–∂–∏–≤–∫–∞: –Ω–µ—Ç ü™±\n"

    text += "\n"  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

    # –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ä—ã–±–∞
    if any(count > 0 for count in unidentified.values()):
        # –£–¥–∞–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ "**–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Ä—ã–±—ã:**"
        if unidentified["common"] > 0:
            text += f"‚Ä¢ –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Ä—ã–±—ã - {unidentified['common']}\n"
        if unidentified["rare"] > 0:
            text += f"‚Ä¢ –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Ä–µ–¥–∫–∏–µ —Ä—ã–±—ã - {unidentified['rare']}\n"
        if unidentified["legendary"] > 0:
            text += f"‚Ä¢ –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ —Ä—ã–±—ã - {unidentified['legendary']}\n"
    else:
        text += "–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–π —Ä—ã–±—ã.\n"

    # –û–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ä—ã–±–∞
    identified = {fish: qty for fish, qty in inventory.items() if fish in IDENTIFIED_FISH and qty > 0}
    if identified:
        for fish, qty in identified.items():
            total_kg = IDENTIFIED_FISH[fish] * qty
            text += f"‚Ä¢ {fish} - {qty} —à—Ç. - {total_kg} –ö–ì\n"

    text += f"\nüí∞ –ó–æ–ª–æ—Ç–æ: {gold}"
    return text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –º–∞–≥–∞–∑–∏–Ω–∞
def get_shop_text(user_data):
    inventory = user_data["inventory"]
    identified_fish = {fish: qty for fish, qty in inventory.items() if fish in IDENTIFIED_FISH}

    if not identified_fish:
        return "üè™ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω —Ä—ã–±–∞–∫–∞!\n\n–£ –≤–∞—Å –Ω–µ—Ç –æ–ø–æ–∑–Ω–∞–Ω–æ–π —Ä—ã–±—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏. –ò–¥–∏—Ç–µ –ª–æ–≤–∏—Ç–µ! üé£"

    text = "üè™ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω —Ä—ã–±–∞–∫–∞!\n\n–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n"
    total_weight = 0
    for fish, qty in identified_fish.items():
        weight = IDENTIFIED_FISH[fish]
        text += f"{fish} - {qty} —à—Ç. (–í–µ—Å: {weight} –ö–ì)\n"
        total_weight += weight * qty

    gold = int(total_weight * pi / 4)
    text += f"\nüí∞ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç—å –≤—Å—é —Ä—ã–±—É –∑–∞ {gold} –∑–æ–ª–æ—Ç–∞."
    return text, gold

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä—ã–±–∞–∫–µ
def get_about_fisherman_text(user_data):
    nickname = user_data["nickname"]
    level = user_data["level"]
    rank = user_data["rank"]
    experience = user_data["experience"]
    required_xp = get_required_xp(level)
    age_delta = datetime.utcnow() - user_data["registration_time"]
    hours, remainder = divmod(int(age_delta.total_seconds()), 3600)
    minutes, _ = divmod(remainder, 60)
    age = f"{hours} —á–∞—Å–æ–≤ –∏ {minutes} –º–∏–Ω—É—Ç"

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª—é–±–∏–º–æ–π —É–¥–æ—á–∫–∏
    if user_data["fish_caught_per_rod"]:
        favorite_rod = max(user_data["fish_caught_per_rod"], key=user_data["fish_caught_per_rod"].get)
    else:
        favorite_rod = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª—é–±–∏–º–æ–π –Ω–∞–∂–∏–≤–∫–∏
    if user_data["fish_caught_per_bait"]:
        favorite_bait = max(user_data["fish_caught_per_bait"], key=user_data["fish_caught_per_bait"].get)
    else:
        favorite_bait = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    text = (
        f"üë§ **–û —Ä—ã–±–∞–∫–µ** üë§\n\n"
        f"**–ò–º—è:** {nickname}\n"
        f"**–£—Ä–æ–≤–µ–Ω—å:** {level}\n"
        f"**–†–∞–Ω–≥:** {rank}\n"
        f"**–û–ø—ã—Ç:** {experience} / {required_xp}\n"
        f"**–í–æ–∑—Ä–∞—Å—Ç –∏–≥—Ä—ã:** {age}\n"
        f"**–õ—é–±–∏–º–∞—è —É–¥–æ—á–∫–∞:** {favorite_rod}\n"
        f"**–õ—é–±–∏–º–∞—è –Ω–∞–∂–∏–≤–∫–∞:** {favorite_bait}"
    )
    return text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –ª–æ–≤–ª–µ —Ä—ã–±—ã
def generate_fish_catch_message(fish_type, xp_gained, level_up=False, new_level=None, gold_reward=0):
    message = (
        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–π–º–∞–ª–∏ {fish_type} üê†\n"
        f"–ü–æ–ª—É—á–µ–Ω–æ {xp_gained} –µ–¥–∏–Ω–∏—Ü –æ–ø—ã—Ç–∞ ‚≠ê"
    )
    if level_up:
        message += f"\n\n–í–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω –¥–æ {new_level}! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!"
        if gold_reward > 0:
            message += f"\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ {gold_reward} –∑–æ–ª–æ—Ç–∞. üí∞"
    return message

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –∏ —Ä–∞–Ω–≥–∞
def check_level_up(user_data):
    level_up = False
    gold_reward = 0
    new_level = None
    while user_data["level"] <= len(LEVELS) and user_data["experience"] >= get_required_xp(user_data["level"]):
        user_data["level"] +=1
        update_rank(user_data)
        gold_reward += user_data["level"] * 2  # –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        user_data["gold"] += user_data["level"] * 2
        level_up = True
        new_level = user_data["level"]
    return level_up, new_level, gold_reward

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –æ–ø—ã—Ç–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è
def get_required_xp(level):
    for lvl in LEVELS:
        if lvl["level"] == level:
            return lvl["required_xp"]
    # –î–ª—è —É—Ä–æ–≤–Ω–µ–π –≤—ã—à–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º—É–ª—É
    # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞: —Ç—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 1.5 —Ä–∞–∑–∞ —Å –∫–∞–∂–¥—ã–º —É—Ä–æ–≤–Ω–µ–º
    if level > LEVELS[-1]["level"]:
        last_required = LEVELS[-1]["required_xp"]
        additional_levels = level - LEVELS[-1]["level"]
        return int(last_required * (1.5 ** additional_levels))
    return 10  # –ë–∞–∑–æ–≤—ã–π –æ–ø—ã—Ç –¥–ª—è —É—Ä–æ–≤–Ω–µ–π –Ω–∏–∂–µ 1

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–Ω–≥–∞
def update_rank(user_data):
    level = user_data["level"]
    rank = "–Æ–Ω—ã–π —Ä—ã–±–∞–∫"
    if 1 <= level <= 3:
        rank = "–Æ–Ω—ã–π —Ä—ã–±–∞–∫"
    elif 4 <= level <= 6:
        rank = "–ù–∞—á–∏–Ω–∞—é—â–∏–π –ª–æ–≤–µ—Ü"
    elif 7 <= level <= 9:
        rank = "–õ–æ–≤–µ—Ü –º–µ–ª–∫–æ–π —Ä—ã–±—ë—à–∫–∏"
    elif 10 <= level <= 12:
        rank = "–û–ø—ã—Ç–Ω—ã–π —É–¥–∏–ª—å—â–∏–∫"
    elif 13 <= level <= 15:
        rank = "–õ—é–±–∏—Ç–µ–ª—å –∫–ª—ë–≤–∞"
    elif 16 <= level <= 18:
        rank = "–ó–Ω–∞—Ç–æ–∫ –∫—Ä—é—á–∫–æ–≤"
    elif 19 <= level <= 21:
        rank = "–ú–∞—Å—Ç–µ—Ä –Ω–∞–∂–∏–≤–∫–∏"
    elif 22 <= level <= 24:
        rank = "–ò—Å–∫—É—Å–Ω—ã–π —Ä—ã–±–∞–∫"
    elif 25 <= level <= 27:
        rank = "–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ —É–ª–æ–≤–æ–º"
    elif 28 <= level <= 30:
        rank = "–ù–∞—Å—Ç–æ—è—â–∏–π —Ä—ã–±–æ–ª–æ–≤"
    elif 31 <= level <= 40:
        rank = "–í–∏—Ä—Ç—É–æ–∑ —Ä—ã–±–∞–ª–∫–∏"
    elif 41 <= level <= 50:
        rank = "–£–∫—Ä–æ—Ç–∏—Ç–µ–ª—å —Ä–µ–∫"
    elif 51 <= level <= 60:
        rank = "–ú–æ—Ä—Å–∫–æ–π –¥–æ–±—ã—Ç—á–∏–∫"
    elif 61 <= level <= 70:
        rank = "–õ–µ–≥–µ–Ω–¥–∞ –ø—Ä—É–¥–∞"
    elif 71 <= level <= 75:
        rank = "–í–ª–∞—Å—Ç–µ–ª–∏–Ω –æ–∑—ë—Ä"
    # –î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–Ω–≥–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    user_data["rank"] = rank

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_data = users_data[user.id]
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π
    if user_data["registration_time"] == datetime.utcnow():
        user_data["gold"] = 0
        user_data["total_gold_earned"] = 0
        user_data["total_kg_caught"] = 0
        user_data["experience"] = 0
        user_data["level"] = 1
        user_data["rank"] = "–Æ–Ω—ã–π —Ä—ã–±–∞–∫"
        user_data["registration_time"] = datetime.utcnow()
        user_data["fish_caught_per_rod"] = defaultdict(int)
        user_data["fish_caught_per_bait"] = defaultdict(int)
    logger.info(f"User {user.id} ({user.first_name}) started the bot.")
    await update.message.reply_text(
        get_welcome_text(),
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton(BUTTON_START_FISHING)]], resize_keyboard=True
        )
    )

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å —Ä—ã–±–∞–ª–∫—É"
async def begin_fishing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_data = users_data[user.id]
    if not user_data["nickname"]:
        # –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∏–∫–∞
        await update.message.reply_text(
            get_onboarding_text(),
            reply_markup=ReplyKeyboardRemove()
        )
        logger.info(f"User {user.id} ({user.first_name}) is prompted to set a nickname.")
        return ASK_NICKNAME
    else:
        logger.info(f"User {user.id} ({user_data['nickname']}) started fishing.")
        await update.message.reply_text(
            "üåû –ö–∞–∂–µ—Ç—Å—è, —Å–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è —Ä—ã–±–∞–ª–∫–∏! –†—ã–±–∞ –≤–∞—Å –∂–¥–µ—Ç! üé£üêü",
            reply_markup=main_menu_keyboard()
        )
        return ConversationHandler.END

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∏–∫–∞
async def set_nickname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    nickname = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if len(nickname) > 25:
        await update.message.reply_text(
            "‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ 25 —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ASK_NICKNAME

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã)
    if not re.match(r'^[A-Za-z–ê-–Ø–∞-—è–Å—ë\s]+$', nickname):
        await update.message.reply_text(
            "‚ùå –ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ASK_NICKNAME

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∏–∫–∞
    existing_nicknames = [data["nickname"] for uid, data in users_data.items() if data["nickname"]]
    if nickname in existing_nicknames:
        await update.message.reply_text(
            "‚ùå –≠—Ç–æ –∏–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ASK_NICKNAME

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∏–∫–∞
    users_data[user.id]["nickname"] = nickname
    await update.message.reply_text(
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –º—ã –±—É–¥–µ–º –Ω–∞–∑—ã–≤–∞—Ç—å —Ç–µ–±—è {nickname}!\n\n"
        "üåû –ö–∞–∂–µ—Ç—Å—è, —Å–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è —Ä—ã–±–∞–ª–∫–∏! –†—ã–±–∞ –≤–∞—Å –∂–¥–µ—Ç! üé£üêü",
        reply_markup=main_menu_keyboard()
    )
    logger.info(f"User {user.id} set nickname to '{nickname}'.")
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∏–∫–∞
async def cancel_nickname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        "‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–∏–∫–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    logger.info(f"User {user.id} ({user.first_name}) cancelled nickname setting.")
    return ConversationHandler.END

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –û–∑–µ—Ä–∞
async def lake(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_data = users_data[user.id]
    nickname = user_data["nickname"] if user_data["nickname"] else user.first_name
    welcome_lake_text = get_lake_text(nickname)
    logger.info(f"User {user.id} ({nickname}) arrived at the lake.")
    await update.message.reply_text(
        welcome_lake_text,
        reply_markup=lake_menu_keyboard()
    )

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ª–æ–≤–ª–∏ —Ä—ã–±—ã
async def catch_fish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_data = users_data[user.id]
    nickname = user_data["nickname"] if user_data["nickname"] else user.first_name
    logger.info(f"User {user.id} ({nickname}) started catching fish.")

    if user_data["fishing"]:
        await update.message.reply_text(
            "‚ùó –í—ã —É–∂–µ –ª–æ–≤–∏—Ç–µ —Ä—ã–±—É! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É üîÑ –û–±–Ω–æ–≤–∏—Ç—å, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å."
        )
        logger.warning(f"User {user.id} ({nickname}) is already fishing.")
        return

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ —É–¥–æ—á–∫–∏
    rod_bonus = user_data["current_rod"]["bonus_percent"]
    base_delay = random.randint(5, 33)  # –ú–∞–∫—Å–∏–º—É–º 33 —Å–µ–∫—É–Ω–¥—ã
    adjusted_delay = int(base_delay * (1 - rod_bonus / 100))
    if adjusted_delay < 1:
        adjusted_delay = 1  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞

    end_time = datetime.utcnow() + timedelta(seconds=adjusted_delay)
    user_data["fishing"] = {
        "end_time": end_time,
        "status": "fishing"
    }

    await update.message.reply_text(
        f"üé£ –†—ã–±–∫–∞ –ª–æ–≤–∏—Ç—Å—è... –ü–æ–¥–æ–∂–¥–∏ –µ—â—ë {adjusted_delay} —Å–µ–∫—É–Ω–¥ ‚è≥",
        reply_markup=lake_menu_keyboard()
    )
    logger.info(f"User {user.id} fishing will end at {end_time} UTC.")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ª–æ–≤–ª–∏
async def update_fishing_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_data = users_data[user.id]
    nickname = user_data["nickname"] if user_data["nickname"] else user.first_name
    logger.info(f"User {user.id} ({nickname}) requested fishing status update.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–∂–∏–≤–∫–∏
    current_bait = user_data["current_bait"]
    if current_bait:
        if datetime.utcnow() >= current_bait["end_time"]:
            user_data["current_bait"] = None
            await update.message.reply_text(
                "ü™± –í–∞—à–∞ –Ω–∞–∂–∏–≤–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.",
                reply_markup=lake_menu_keyboard()
            )
            logger.info(f"User {user.id} ({nickname})'s bait has expired.")

    if not user_data["fishing"]:
        await update.message.reply_text(
            "‚ùó –í—ã —Å–µ–π—á–∞—Å –Ω–µ –ª–æ–≤–∏—Ç–µ —Ä—ã–±—É.",
            reply_markup=lake_menu_keyboard()
        )
        logger.warning(f"User {user.id} ({nickname}) is not fishing.")
        return

    end_time = user_data["fishing"]["end_time"]
    now = datetime.utcnow()
    remaining = (end_time - now).total_seconds()

    if remaining > 0:
        remaining = int(remaining)
        await update.message.reply_text(
            f"üé£ –†—ã–±–∫–∞ –≤—Å—ë –µ—â—ë –ª–æ–≤–∏—Ç—Å—è... –û—Å—Ç–∞–ª–æ—Å—å –µ—â—ë {remaining} —Å–µ–∫—É–Ω–¥ ‚è≥"
        )
        logger.info(f"User {user.id} fishing has {remaining} seconds left.")
    else:
        user_data["fishing"]["status"] = "ready_to_pull"
        await update.message.reply_text(
            "üé£ –ö–∞–∂–µ—Ç—Å—è, –∫—Ç–æ-—Ç–æ –ø–æ–ø–∞–ª—Å—è! –õ–æ–≤–∏ —Å–∫–æ—Ä–µ–µ! üêü",
            reply_markup=ReplyKeyboardMarkup(
                [
                    [KeyboardButton(BUTTON_PULL)],
                    [KeyboardButton(BUTTON_GO_BACK)]
                ], resize_keyboard=True
            )
        )
        logger.info(f"User {user.id} fishing is ready to pull.")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ç—è–≥–∏–≤–∞–Ω–∏—è —É–¥–æ—á–∫–∏
async def pull_hook(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_data = users_data[user.id]
    nickname = user_data["nickname"] if user_data["nickname"] else user.first_name
    logger.info(f"User {user.id} ({nickname}) attempted to pull the hook.")

    if not user_data["fishing"]:
        await update.message.reply_text(
            "‚ùó –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –ª–æ–≤–∏—Ç—å —Ä—ã–±—É.",
            reply_markup=lake_menu_keyboard()
        )
        logger.warning(f"User {user.id} ({nickname}) tried to pull hook without fishing.")
        return

    end_time = user_data["fishing"]["end_time"]
    now = datetime.utcnow()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–∂–∏–≤–∫–∏
    current_bait = user_data["current_bait"]
    if current_bait and now >= current_bait["end_time"]:
        user_data["current_bait"] = None
        await update.message.reply_text(
            "ü™± –í–∞—à–∞ –Ω–∞–∂–∏–≤–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.",
            reply_markup=lake_menu_keyboard()
        )
        logger.info(f"User {user.id} ({nickname})'s bait has expired.")

    if now >= end_time and user_data["fishing"]["status"] == "ready_to_pull":
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä—ã–±—ã —Å —É—á—ë—Ç–æ–º –Ω–∞–∂–∏–≤–∫–∏
        if user_data["current_bait"]:
            probabilities = user_data["current_bait"]["probabilities"]
        else:
            probabilities = {"common": 70, "rare": 25, "legendary": 5}  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏

        rand = random.randint(1, 100)
        if rand <= probabilities["common"]:
            fish_type = "–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ä—ã–±–∞"
            xp_gained = random.randint(1, 3)
        elif rand <= probabilities["common"] + probabilities["rare"]:
            fish_type = "–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ä–µ–¥–∫–∞—è —Ä—ã–±–∞"
            xp_gained = random.randint(2, 9)
        else:
            fish_type = "–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è —Ä—ã–±–∞"
            xp_gained = random.randint(15, 30)

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏ –ø–æ–π–º–∞–Ω–Ω–æ–π —Ä—ã–±—ã
        rarity = "common"
        if fish_type == "–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ä—ã–±–∞":
            rarity = "common"
        elif fish_type == "–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ä–µ–¥–∫–∞—è —Ä—ã–±–∞":
            rarity = "rare"
        elif fish_type == "–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è —Ä—ã–±–∞":
            rarity = "legendary"

        user_data["unidentified"][rarity] += 1
        user_data["fishing"] = None  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ª–æ–≤–ª–∏

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞
        user_data["experience"] += xp_gained

        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–æ–≤ –¥–ª—è –ª—é–±–∏–º—ã—Ö —É–¥–æ—á–µ–∫ –∏ –Ω–∞–∂–∏–≤–æ–∫
        current_rod = user_data["current_rod"]["name"]
        current_bait_name = user_data["current_bait"]["name"] if user_data["current_bait"] else "–ù–µ—Ç –Ω–∞–∂–∏–≤–∫–∏"
        user_data["fish_caught_per_rod"][current_rod] += 1
        user_data["fish_caught_per_bait"][current_bait_name] += 1

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è
        level_up, new_level, gold_reward = check_level_up(user_data)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞
        update_rank(user_data)

        if level_up:
            message = generate_fish_catch_message(fish_type, xp_gained, True, new_level, gold_reward)
        else:
            message = generate_fish_catch_message(fish_type, xp_gained)

        await update.message.reply_text(
            message,
            reply_markup=ReplyKeyboardMarkup(
                [
                    [KeyboardButton(BUTTON_CATCH_FISH)],
                    [KeyboardButton(BUTTON_GO_BACK)]
                ], resize_keyboard=True
            )
        )
        logger.info(f"User {user.id} ({nickname}) caught {fish_type} and gained {xp_gained} XP.")
        if level_up:
            logger.info(f"User {user.id} ({nickname}) leveled up to {new_level} and received {gold_reward} gold.")
    else:
        # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –¥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ª–æ–≤–ª–∏
        await update.message.reply_text(
            "–≠—Ö, —Å–æ—Ä–≤–∞–ª–∞—Å—å! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑. üé£",
            reply_markup=ReplyKeyboardMarkup(
                [
                    [KeyboardButton(BUTTON_CATCH_FISH)],
                    [KeyboardButton(BUTTON_GO_BACK)]
                ], resize_keyboard=True
            )
        )
        logger.info(f"User {user.id} ({nickname}) pulled hook before time.")
        user_data["fishing"] = None  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ª–æ–≤–ª–∏

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –û–ø–æ–∑–Ω–∞–Ω–∏—è —Ä—ã–±—ã
async def identify_fish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_data = users_data[user.id]
    unidentified = user_data["unidentified"]
    nickname = user_data["nickname"] if user_data["nickname"] else user.first_name

    logger.info(f"User {user.id} ({nickname}) is attempting to identify fish.")

    if all(count == 0 for count in unidentified.values()):
        await update.message.reply_text(
            "‚ùó –£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–π —Ä—ã–±—ã –¥–ª—è –æ–ø–æ–∑–Ω–∞–Ω–∏—è. –ò–¥–∏—Ç–µ –ª–æ–≤–∏—Ç–µ! üé£",
            reply_markup=inventory_menu_keyboard()
        )
        logger.warning(f"User {user.id} ({nickname}) has no unidentified fish.")
        return

    inventory = user_data["inventory"]
    identification_results = []
    for rarity, count in unidentified.items():
        for _ in range(count):
            if rarity == "common":
                identified_fish = random.choice(COMMON_FISH)[0]
            elif rarity == "rare":
                identified_fish = random.choice(RARE_FISH)[0]
            elif rarity == "legendary":
                identified_fish = random.choice(LEGENDARY_FISH)[0]
            else:
                identified_fish = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä—ã–±–∞"  # –ù–∞ —Å–ª—É—á–∞–π –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ identified_fish –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ IDENTIFIED_FISH
            if identified_fish not in IDENTIFIED_FISH:
                logger.error(f"Identified fish '{identified_fish}' not found in IDENTIFIED_FISH.")
                continue
            inventory[identified_fish] += 1
            weight = IDENTIFIED_FISH.get(identified_fish, 0)
            identification_results.append(f"{identified_fish} - {weight} –ö–ì")
            logger.info(f"User {user.id} ({nickname}) identified {identified_fish} with weight {weight} –ö–ì.")

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–µ—Å–∞ —Ä—ã–±—ã
            user_data["total_kg_caught"] += weight

    # –°–±—Ä–æ—Å –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Ä—ã–±
    user_data["unidentified"] = {"common": 0, "rare": 0, "legendary": 0}
    await update.message.reply_text(
        "‚úÖ –í—Å–µ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Ä—ã–±—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–æ–∑–Ω–∞–Ω—ã! üêü\n\n–í—ã –ø–æ–ª—É—á–∏–ª–∏:\n" + "\n".join(identification_results),
        reply_markup=inventory_menu_keyboard()
    )

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ò–Ω–≤–µ–Ω—Ç–∞—Ä—è
async def inventory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_data = users_data[user.id]
    inventory_text = get_inventory_text(user_data)
    nickname = user_data["nickname"] if user_data["nickname"] else user.first_name
    logger.info(f"User {user.id} ({nickname}) viewed inventory.")
    await update.message.reply_text(
        inventory_text,
        reply_markup=inventory_menu_keyboard()
    )

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ú–∞–≥–∞–∑–∏–Ω–∞
async def shop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_data = users_data[user.id]
    shop_info = get_shop_text(user_data)

    if isinstance(shop_info, tuple):
        text, gold = shop_info
    else:
        text = shop_info
        gold = 0

    await update.message.reply_text(
        text,
        reply_markup=shop_menu_keyboard()
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –∑–æ–ª–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
    if gold > 0:
        user_data["shop_gold"] = gold
    else:
        user_data["shop_gold"] = 0
    nickname = user_data["nickname"] if user_data["nickname"] else user.first_name
    logger.info(f"User {user.id} ({nickname}) viewed shop. Potential gold: {gold}.")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Ä—ã–±—ã
async def sell_fish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_data = users_data[user.id]
    inventory = user_data["inventory"]
    identified_fish = {fish: qty for fish, qty in inventory.items() if fish in IDENTIFIED_FISH}
    nickname = user_data["nickname"] if user_data["nickname"] else user.first_name

    if not identified_fish:
        await update.message.reply_text(
            "‚ùó –£ –≤–∞—Å –Ω–µ—Ç –æ–ø–æ–∑–Ω–∞–Ω–æ–π —Ä—ã–±—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏. –ò–¥–∏—Ç–µ –ª–æ–≤–∏—Ç–µ! üé£",
            reply_markup=shop_menu_keyboard()
        )
        logger.warning(f"User {user.id} ({nickname}) has no identified fish to sell.")
        return

    # –†–∞—Å—á—ë—Ç —Å—É–º–º—ã –∑–æ–ª–æ—Ç–∞
    total_weight = sum(IDENTIFIED_FISH[fish] * qty for fish, qty in identified_fish.items())
    gold_earned = int(total_weight * pi / 4)

    # –ü—Ä–æ–¥–∞–∂–∞ —Ä—ã–±—ã
    for fish, qty in identified_fish.items():
        inventory[fish] = 0
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ä—ã–± —Å –Ω—É–ª–µ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    inventory = {fish: qty for fish, qty in inventory.items() if qty > 0}
    user_data["inventory"] = inventory
    user_data["gold"] += gold_earned
    user_data["total_gold_earned"] += gold_earned

    await update.message.reply_text(
        f"üí∞ –í—ã –ø—Ä–æ–¥–∞–ª–∏ –≤—Å—é —Ä—ã–±—É –∑–∞ {gold_earned} –∑–æ–ª–æ—Ç–∞! üéâ",
        reply_markup=shop_menu_keyboard()
    )
    logger.info(f"User {user.id} ({nickname}) sold fish for {gold_earned} gold.")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –û–±–º–µ–Ω—è—Ç—å –∑–æ–ª–æ—Ç–æ
async def exchange_gold(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_data = users_data[user.id]
    gold = user_data["gold"]
    exchange_rate = 700  # 1 TON = 700 –∑–æ–ª–æ—Ç–∞
    minimum_gold = 25000  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 5000 –Ω–∞ 25000
    nickname = user_data["nickname"] if user_data["nickname"] else user.first_name

    logger.info(f"User {user.id} ({nickname}) requested gold exchange.")

    if gold >= minimum_gold:
        keyboard = [
            [KeyboardButton(BUTTON_CONFIRM_YES), KeyboardButton(BUTTON_CONFIRM_NO)]
        ]
        await update.message.reply_text(
            f"üí± –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ –∑–æ–ª–æ—Ç–∞ –Ω–∞ TON —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 1 TON = {exchange_rate} –∑–æ–ª–æ—Ç–∞.\n"
            "–°–æ–≤–µ—Ä—à–∏—Ç—å –æ–±–º–µ–Ω? üîÑ",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
    else:
        needed = minimum_gold - gold
        keyboard = [
            [KeyboardButton(BUTTON_CONFIRM_NOT_ENOUGH)],
            [KeyboardButton(BUTTON_CONFIRM_NO)]
        ]
        await update.message.reply_text(
            f"üí± –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ –∑–æ–ª–æ—Ç–∞ –Ω–∞ TON —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 1 TON = {exchange_rate} –∑–æ–ª–æ—Ç–∞.\n"
            f"–ù–µ—Ö–≤–∞—Ç–∞–µ—Ç –µ—â—ë {needed} –∑–æ–ª–æ—Ç–∞ –¥–ª—è –æ–±–º–µ–Ω–∞.",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        logger.warning(f"User {user.id} ({nickname}) does not have enough gold for exchange. Needs {needed} more gold.")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±–º–µ–Ω–∞
async def confirm_exchange(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_data = users_data[user.id]
    gold = user_data["gold"]
    exchange_rate = 700
    minimum_gold = 25000  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 5000 –Ω–∞ 25000
    nickname = user_data["nickname"] if user_data["nickname"] else user.first_name

    logger.info(f"User {user.id} ({nickname}) is confirming exchange: {update.message.text}")

    if update.message.text == BUTTON_CONFIRM_YES:
        if gold >= minimum_gold:
            user_data["gold"] -= minimum_gold
            ton = minimum_gold / exchange_rate
            ton = round(ton, 2)
            await update.message.reply_text(
                f"üîÑ –û–±–º–µ–Ω –ø—Ä–æ–∏–∑–≤–µ–¥—ë–Ω —É—Å–ø–µ—à–Ω–æ! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {ton} TON. –ü–æ–∫–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º! üõ†Ô∏è",
                reply_markup=shop_menu_keyboard()
            )
            logger.info(f"User {user.id} ({nickname}) exchanged {minimum_gold} gold for {ton} TON.")
        else:
            needed = minimum_gold - gold
            await update.message.reply_text(
                f"‚ùó –ù–µ—Ö–≤–∞—Ç–∞–µ—Ç –µ—â—ë {needed} –∑–æ–ª–æ—Ç–∞ –¥–ª—è –æ–±–º–µ–Ω–∞.",
                reply_markup=shop_menu_keyboard()
            )
            logger.warning(f"User {user.id} ({nickname}) tried to exchange but lacks {needed} gold.")
    elif update.message.text == BUTTON_CONFIRM_NOT_ENOUGH:
        needed = minimum_gold - gold
        await update.message.reply_text(
            f"‚ùó –ù–µ—Ö–≤–∞—Ç–∞–µ—Ç –µ—â—ë {needed} –∑–æ–ª–æ—Ç–∞ –¥–ª—è –æ–±–º–µ–Ω–∞.",
            reply_markup=shop_menu_keyboard()
        )
        logger.warning(f"User {user.id} ({nickname}) lacks {needed} gold for exchange.")
    elif update.message.text == BUTTON_CONFIRM_NO:
        await update.message.reply_text(
            "‚ùå –û–±–º–µ–Ω –æ—Ç–º–µ–Ω—ë–Ω.",
            reply_markup=shop_menu_keyboard()
        )
        logger.info(f"User {user.id} ({nickname}) cancelled the exchange.")
    else:
        await update.message.reply_text(
            "‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
            reply_markup=shop_menu_keyboard()
        )
        logger.error(f"User {user.id} ({nickname}) sent an unknown response for exchange: {update.message.text}")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è "–í–µ—Ä–Ω—É—Ç—å—Å—è"
async def go_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_data = users_data[user.id]
    nickname = user_data["nickname"] if user_data["nickname"] else user.first_name
    logger.info(f"User {user.id} ({nickname}) is returning to main menu.")
    await update.message.reply_text(
        "üîô –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_menu_keyboard()
    )
    return ConversationHandler.END

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –¢–∞–±–ª–∏—Ü—ã –õ–∏–¥–µ—Ä–æ–≤
async def leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_data = users_data[user.id]
    nickname = user_data["nickname"] if user_data["nickname"] else user.first_name
    logger.info(f"User {user.id} ({nickname}) accessed the leaderboard.")
    await update.message.reply_text(
        "üèÜ **–¢–∞–±–ª–∏—Ü–∞ –õ–∏–¥–µ—Ä–æ–≤** üèÜ\n\n"
        "–ù–∞ —ç—Ç–æ–π –¥–æ—Å–∫–µ —Å–ª–∞–≤—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω—ã –ª—É—á—à–∏–µ –∏–∑ –ª—É—á—à–∏—Ö!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–∏–¥–µ—Ä–æ–≤:",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=leaderboard_menu_keyboard()
    )

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –õ–∏–¥–µ—Ä–æ–≤ –ø–æ –ó–æ–ª–æ—Ç—É
async def leaderboard_total_gold(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    leaderboard_data = sorted(users_data.items(), key=lambda x: x[1]["total_gold_earned"], reverse=True)
    top_users = leaderboard_data[:10]  # –¢–æ–ø 10

    if not top_users:
        leaderboard_text = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø—É—Å—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä–∞—Ç—å, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å —Å—é–¥–∞! üêü"
    else:
        leaderboard_text = "**üèÜ –¢–æ–ø 10 –ø–æ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–æ–ª–æ—Ç–∞ üèÜ**\n\n"
        for idx, (uid, data) in enumerate(top_users, start=1):
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            nickname = data["nickname"] if data["nickname"] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            leaderboard_text += f"{idx}. {nickname} - {data['total_gold_earned']} –∑–æ–ª–æ—Ç–∞\n"

    leaderboard_text += "\nüìú –ù–∞ —ç—Ç–æ–π –¥–æ—Å–∫–µ —Å–ª–∞–≤—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ª—É—á—à–∏–µ –∏–∑ –ª—É—á—à–∏—Ö! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å –∏ –ø–æ–¥–Ω–∏–º–∞–π—Ç–µ—Å—å –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ! üéâ"

    await update.message.reply_text(
        leaderboard_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=leaderboard_menu_keyboard()
    )

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –õ–∏–¥–µ—Ä–æ–≤ –ø–æ –ö–ì –†—ã–±—ã
async def leaderboard_total_kg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    leaderboard_data = sorted(users_data.items(), key=lambda x: x[1]["total_kg_caught"], reverse=True)
    top_users = leaderboard_data[:10]  # –¢–æ–ø 10

    if not top_users:
        leaderboard_text = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø—É—Å—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä–∞—Ç—å, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å —Å—é–¥–∞! üêü"
    else:
        leaderboard_text = "**üèÜ –¢–æ–ø 10 –ø–æ –í—Å–µ–≥–æ –ø–æ–π–º–∞–Ω–æ –ö–ì —Ä—ã–±—ã üèÜ**\n\n"
        for idx, (uid, data) in enumerate(top_users, start=1):
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            nickname = data["nickname"] if data["nickname"] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            leaderboard_text += f"{idx}. {nickname} - {data['total_kg_caught']} –ö–ì —Ä—ã–±—ã\n"

    leaderboard_text += "\nüìú –ù–∞ —ç—Ç–æ–π –¥–æ—Å–∫–µ —Å–ª–∞–≤—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ª—É—á—à–∏–µ –∏–∑ –ª—É—á—à–∏—Ö! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å –∏ –ø–æ–¥–Ω–∏–º–∞–π—Ç–µ—Å—å –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ! üéâ"

    await update.message.reply_text(
        leaderboard_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=leaderboard_menu_keyboard()
    )

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –õ–∏–¥–µ—Ä–æ–≤ –ø–æ –û–ø—ã—Ç—É
async def leaderboard_total_experience(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    leaderboard_data = sorted(users_data.items(), key=lambda x: x[1]["experience"], reverse=True)
    top_users = leaderboard_data[:10]  # –¢–æ–ø 10

    if not top_users:
        leaderboard_text = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø—É—Å—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä–∞—Ç—å, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å —Å—é–¥–∞! üêü"
    else:
        leaderboard_text = "**üèÜ –¢–æ–ø 10 –ø–æ –û–ø—ã—Ç üèÜ**\n\n"
        for idx, (uid, data) in enumerate(top_users, start=1):
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            nickname = data["nickname"] if data["nickname"] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            leaderboard_text += f"{idx}. {nickname} - {data['experience']} XP\n"

    leaderboard_text += "\nüìú –ù–∞ —ç—Ç–æ–π –¥–æ—Å–∫–µ —Å–ª–∞–≤—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ª—É—á—à–∏–µ –∏–∑ –ª—É—á—à–∏—Ö! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å –∏ –ø–æ–¥–Ω–∏–º–∞–π—Ç–µ—Å—å –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ! üéâ"

    await update.message.reply_text(
        leaderboard_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=leaderboard_menu_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
async def handle_leaderboard_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text == BUTTON_LEADERBOARD:
        await leaderboard(update, context)
    elif text == BUTTON_TOTAL_GOLD:
        await leaderboard_total_gold(update, context)
    elif text == BUTTON_TOTAL_KG:
        await leaderboard_total_kg(update, context)
    elif text == BUTTON_TOTAL_EXPERIENCE:
        await leaderboard_total_experience(update, context)
    else:
        # –î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ö–µ–Ω–¥–ª–µ—Ä–µ
        pass

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –£–¥–æ—á–µ–∫
async def rods_section(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_data = users_data[user.id]
    text = (
        "üé£ **–£–¥–æ—á–∫–∏** üé£\n\n"
        "–ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–æ–¥–µ–ª–∏ —É–¥–æ—á–µ–∫.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —É–¥–æ—á–∫–∏:\n"
    )
    for rod in RODS:
        text += f"- {rod['name']} - {rod['price']} –∑–æ–ª–æ—Ç–∞ (—É–º–µ–Ω—å—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä—ã–±–∞–ª–∫–∏ –Ω–∞ {rod['bonus_percent']}%)\n"

    text += "\n–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ—á–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:"
    keyboard = [[KeyboardButton(rod["name"])] for rod in RODS]
    keyboard.append([KeyboardButton(BUTTON_GO_BACK)])
    await update.message.reply_text(
        text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return BUY_ROD

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —É–¥–æ—á–∫–∏
async def buy_rod(update: Update, context: ContextTypes.DEFAULT_TYPE):
    selected_rod_name = update.message.text.strip()
    rod = next((r for r in RODS if r["name"] == selected_rod_name), None)
    user = update.effective_user
    user_data = users_data[user.id]
    nickname = user_data["nickname"] if user_data["nickname"] else user.first_name

    if rod:
        user_data["pending_purchase"] = {"type": "rod", "rod": rod}
        await update.message.reply_text(
            f"‚ùì –ö—É–ø–∏—Ç—å {rod['name']} –∑–∞ {rod['price']} –∑–æ–ª–æ—Ç–∞?",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton(BUTTON_CONFIRM_YES), KeyboardButton(BUTTON_CONFIRM_NO)]],
                resize_keyboard=True
            )
        )
        logger.info(f"User {user.id} ({nickname}) is attempting to buy rod '{rod['name']}' for {rod['price']} gold.")
        return CONFIRM_BUY_ROD
    else:
        await update.message.reply_text(
            "‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É–¥–æ—á–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ—á–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞.",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton(r["name"]) for r in RODS], [KeyboardButton(BUTTON_GO_BACK)]],
                resize_keyboard=True
            )
        )
        logger.warning(f"User {user.id} ({nickname}) selected an unknown rod: '{selected_rod_name}'.")
        return BUY_ROD

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ —É–¥–æ—á–∫–∏
async def confirm_buy_rod(update: Update, context: ContextTypes.DEFAULT_TYPE):
    confirmation = update.message.text.strip()
    user = update.effective_user
    user_data = users_data[user.id]
    nickname = user_data["nickname"] if user_data["nickname"] else user.first_name
    rod = user_data.get("pending_purchase", {}).get("rod")

    if confirmation == BUTTON_CONFIRM_YES and rod:
        if user_data["gold"] >= rod["price"]:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —É–¥–æ—á–∫–∞ —Ö—É–∂–µ –Ω–æ–≤–æ–π
            current_bonus = user_data["current_rod"]["bonus_percent"]
            if rod["bonus_percent"] > current_bonus:
                # –ó–∞–º–µ–Ω—è–µ–º —É–¥–æ—á–∫—É
                user_data["gold"] -= rod["price"]
                previous_rod = user_data["current_rod"]["name"]
                user_data["current_rod"] = {"name": rod["name"], "bonus_percent": rod["bonus_percent"]}
                await update.message.reply_text(
                    f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏ {rod['name']} –∑–∞ {rod['price']} –∑–æ–ª–æ—Ç–∞ –∏ –∑–∞–º–µ–Ω–∏–ª–∏ {previous_rod}.",
                    reply_markup=shop_menu_keyboard()
                )
                logger.info(f"User {user.id} ({nickname}) bought rod '{rod['name']}' and replaced '{previous_rod}'.")
            elif rod["bonus_percent"] < current_bonus:
                # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–º–µ–Ω—ã –Ω–∞ –±–æ–ª–µ–µ —Å–ª–∞–±—É—é —É–¥–æ—á–∫—É
                user_data["pending_purchase"] = {"type": "rod_replace", "rod": rod}
                await update.message.reply_text(
                    f"‚ö†Ô∏è –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å —É–¥–æ—á–∫—É {user_data['current_rod']['name']} –Ω–∞ {rod['name']}? "
                    f"–¢–µ–∫—É—â–∞—è —É–¥–æ—á–∫–∞ –±—É–¥–µ—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞!",
                    reply_markup=ReplyKeyboardMarkup(
                        [[KeyboardButton(BUTTON_CONFIRM_YES), KeyboardButton(BUTTON_CONFIRM_NO)]],
                        resize_keyboard=True
                    )
                )
                logger.info(f"User {user.id} ({nickname}) is attempting to replace rod '{user_data['current_rod']['name']}' with weaker rod '{rod['name']}'.")
                return CONFIRM_REPLACE_ROD
            else:
                # –¢–æ –∂–µ —Å–∞–º–æ–µ –±–æ–Ω—É—Å, –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ–Ω—è–µ–º
                user_data["gold"] -= rod["price"]
                user_data["current_rod"] = {"name": rod["name"], "bonus_percent": rod["bonus_percent"]}
                await update.message.reply_text(
                    f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏ {rod['name']} –∑–∞ {rod['price']} –∑–æ–ª–æ—Ç–∞.",
                    reply_markup=shop_menu_keyboard()
                )
                logger.info(f"User {user.id} ({nickname}) bought rod '{rod['name']}' with same bonus.")
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–π —É–¥–æ—á–∫–∏.",
                reply_markup=shop_menu_keyboard()
            )
            logger.warning(f"User {user.id} ({nickname}) does not have enough gold to buy rod '{rod['name']}'.")
        user_data["pending_purchase"] = None
        return ConversationHandler.END
    elif confirmation == BUTTON_CONFIRM_NO:
        if user_data.get("pending_purchase", {}).get("type") == "rod_replace":
            await update.message.reply_text(
                "‚ùå –ó–∞–º–µ–Ω–∞ —É–¥–æ—á–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=shop_menu_keyboard()
            )
            logger.info(f"User {user.id} ({nickname}) cancelled rod replacement.")
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ–∫—É–ø–∫–∞ —É–¥–æ—á–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=shop_menu_keyboard()
            )
            logger.info(f"User {user.id} ({nickname}) cancelled rod purchase.")
        user_data["pending_purchase"] = None
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            "‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
            reply_markup=shop_menu_keyboard()
        )
        logger.error(f"User {user.id} ({nickname}) sent an unknown confirmation: '{confirmation}'.")
        return ConversationHandler.END

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–º–µ–Ω—ã —É–¥–æ—á–∫–∏ –Ω–∞ –±–æ–ª–µ–µ —Å–ª–∞–±—É—é
async def confirm_replace_rod(update: Update, context: ContextTypes.DEFAULT_TYPE):
    confirmation = update.message.text.strip()
    user = update.effective_user
    user_data = users_data[user.id]
    nickname = user_data["nickname"] if user_data["nickname"] else user.first_name
    rod = user_data.get("pending_purchase", {}).get("rod")

    if confirmation == BUTTON_CONFIRM_YES and rod:
        if user_data["gold"] >= rod["price"]:
            previous_rod = user_data["current_rod"]["name"]
            user_data["gold"] -= rod["price"]
            user_data["current_rod"] = {"name": rod["name"], "bonus_percent": rod["bonus_percent"]}
            await update.message.reply_text(
                f"‚úÖ –í—ã –ø–æ–º–µ–Ω—è–ª–∏ —É–¥–æ—á–∫—É {previous_rod} –Ω–∞ {rod['name']} –∑–∞ {rod['price']} –∑–æ–ª–æ—Ç–∞.",
                reply_markup=shop_menu_keyboard()
            )
            logger.info(f"User {user.id} ({nickname}) replaced rod '{previous_rod}' with '{rod['name']}'.")
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–π —É–¥–æ—á–∫–∏.",
                reply_markup=shop_menu_keyboard()
            )
            logger.warning(f"User {user.id} ({nickname}) does not have enough gold to replace rod with '{rod['name']}'.")
        user_data["pending_purchase"] = None
        return ConversationHandler.END
    elif confirmation == BUTTON_CONFIRM_NO:
        await update.message.reply_text(
            "‚ùå –ó–∞–º–µ–Ω–∞ —É–¥–æ—á–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=shop_menu_keyboard()
        )
        logger.info(f"User {user.id} ({nickname}) cancelled rod replacement.")
        user_data["pending_purchase"] = None
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            "‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
            reply_markup=shop_menu_keyboard()
        )
        logger.error(f"User {user.id} ({nickname}) sent an unknown confirmation for rod replacement: '{confirmation}'.")
        return ConversationHandler.END

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –ù–∞–∂–∏–≤–æ–∫
async def baits_section(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_data = users_data[user.id]
    text = (
        "ü™± **–ù–∞–∂–∏–≤–∫–∏** ü™±\n\n"
        "–ü—Ä–æ–¥–∞–≤–µ—Ü —Å—Ç–∞–≤–∏—Ç –ø–æ–¥–¥–æ–Ω, –≤ –∫–æ—Ç–æ—Ä–æ–º –º–Ω–æ–≥–æ —Ä–∞–∑–Ω—ã—Ö –Ω–∞–∂–∏–≤–æ–∫ –¥–ª—è –ª—é–±–æ–π —Ü–µ–ª–∏! –ì–æ–≤–æ—Ä—è—Ç, —á—Ç–æ –Ω–∞–∂–∏–≤–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç –ø–æ–π–º–∞—Ç—å –±–æ–ª—å—à–µ —Ä—ã–±—ã! –ù–æ —Ç–∞–∫ –ª–∏ —ç—Ç–æ..\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–∂–∏–≤–∫–∏:\n"
    )
    for bait in BAITS:
        text += f"- {bait['name']} - {bait['price']} –∑–æ–ª–æ—Ç–∞ (–¥–µ–π—Å—Ç–≤—É–µ—Ç —á–∞—Å)\n"

    text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∂–∏–≤–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:"
    keyboard = [[KeyboardButton(bait["name"])] for bait in BAITS]
    keyboard.append([KeyboardButton(BUTTON_GO_BACK)])
    await update.message.reply_text(
        text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return BUY_BAIT

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–∂–∏–≤–∫–∏
async def buy_bait(update: Update, context: ContextTypes.DEFAULT_TYPE):
    selected_bait_name = update.message.text.strip()
    bait = next((b for b in BAITS if b["name"] == selected_bait_name), None)
    user = update.effective_user
    user_data = users_data[user.id]
    nickname = user_data["nickname"] if user_data["nickname"] else user.first_name

    if bait:
        user_data["pending_purchase"] = {"type": "bait", "bait": bait}
        await update.message.reply_text(
            f"‚ùì –ö—É–ø–∏—Ç—å {bait['name']} –∑–∞ {bait['price']} –∑–æ–ª–æ—Ç–∞? (–¥–µ–π—Å—Ç–≤—É–µ—Ç 1 —á–∞—Å)",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton(BUTTON_CONFIRM_YES), KeyboardButton(BUTTON_CONFIRM_NO)]],
                resize_keyboard=True
            )
        )
        logger.info(f"User {user.id} ({nickname}) is attempting to buy bait '{bait['name']}' for {bait['price']} gold.")
        return CONFIRM_BUY_BAIT
    else:
        await update.message.reply_text(
            "‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞–∂–∏–≤–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∂–∏–≤–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞.",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton(b["name"]) for b in BAITS], [KeyboardButton(BUTTON_GO_BACK)]],
                resize_keyboard=True
            )
        )
        logger.warning(f"User {user.id} ({nickname}) selected an unknown bait: '{selected_bait_name}'.")
        return BUY_BAIT

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–∂–∏–≤–∫–∏
async def confirm_buy_bait(update: Update, context: ContextTypes.DEFAULT_TYPE):
    confirmation = update.message.text.strip()
    user = update.effective_user
    user_data = users_data[user.id]
    nickname = user_data["nickname"] if user_data["nickname"] else user.first_name
    bait = user_data.get("pending_purchase", {}).get("bait")

    if confirmation == BUTTON_CONFIRM_YES and bait:
        if user_data["gold"] >= bait["price"]:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –Ω–∞–∂–∏–≤–∫–∏
            current_bait = user_data["current_bait"]
            if current_bait:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–µ—à–µ–≤–ª–µ –ª–∏ –Ω–æ–≤–∞—è –Ω–∞–∂–∏–≤–∫–∞
                new_bait_cost = bait["price"]
                current_bait_cost = next((b["price"] for b in BAITS if b["name"] == current_bait["name"]), 0)
                if new_bait_cost < current_bait_cost:
                    # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–º–µ–Ω—ã
                    remaining_time = int((current_bait["end_time"] - datetime.utcnow()).total_seconds() / 60)
                    user_data["pending_purchase"] = {"type": "bait_replace", "bait": bait}
                    await update.message.reply_text(
                        f"‚ö†Ô∏è –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {bait['name']} –≤–æ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è {current_bait['name']}? "
                        f"–¢–µ–∫—É—â–µ–π –æ—Å—Ç–∞–ª–æ—Å—å –µ—â—ë {remaining_time} –º–∏–Ω—É—Ç.",
                        reply_markup=ReplyKeyboardMarkup(
                            [[KeyboardButton(BUTTON_CONFIRM_YES), KeyboardButton(BUTTON_CONFIRM_NO)]],
                            resize_keyboard=True
                        )
                    )
                    logger.info(f"User {user.id} ({nickname}) is attempting to replace bait '{current_bait['name']}' with '{bait['name']}'.")
                    return CONFIRM_REPLACE_BAIT
                else:
                    # –ü—Ä–æ—Å—Ç–æ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞–∂–∏–≤–∫—É
                    user_data["gold"] -= bait["price"]
                    user_data["current_bait"] = {
                        "name": bait["name"],
                        "end_time": datetime.utcnow() + bait["duration"],
                        "probabilities": bait["probabilities"]
                    }
                    await update.message.reply_text(
                        f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏ {bait['name']} –∑–∞ {bait['price']} –∑–æ–ª–æ—Ç–∞ –∏ –∑–∞–º–µ–Ω–∏–ª–∏ {current_bait['name']}.",
                        reply_markup=shop_menu_keyboard()
                    )
                    logger.info(f"User {user.id} ({nickname}) bought bait '{bait['name']}' and replaced '{current_bait['name']}'.")
            else:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –Ω–∞–∂–∏–≤–∫—É
                user_data["gold"] -= bait["price"]
                user_data["current_bait"] = {
                    "name": bait["name"],
                    "end_time": datetime.utcnow() + bait["duration"],
                    "probabilities": bait["probabilities"]
                }
                await update.message.reply_text(
                    f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏ {bait['name']} –∑–∞ {bait['price']} –∑–æ–ª–æ—Ç–∞.",
                    reply_markup=shop_menu_keyboard()
                )
                logger.info(f"User {user.id} ({nickname}) bought bait '{bait['name']}' for {bait['price']} gold.")
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–π –Ω–∞–∂–∏–≤–∫–∏.",
                reply_markup=shop_menu_keyboard()
            )
            logger.warning(f"User {user.id} ({nickname}) does not have enough gold to buy bait '{bait['name']}'.")
        user_data["pending_purchase"] = None
        return ConversationHandler.END
    elif confirmation == BUTTON_CONFIRM_NO:
        if user_data.get("pending_purchase", {}).get("type") == "bait_replace":
            await update.message.reply_text(
                "‚ùå –ó–∞–º–µ–Ω–∞ –Ω–∞–∂–∏–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=shop_menu_keyboard()
            )
            logger.info(f"User {user.id} ({nickname}) cancelled bait replacement.")
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–∞–∂–∏–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=shop_menu_keyboard()
            )
            logger.info(f"User {user.id} ({nickname}) cancelled bait purchase.")
        user_data["pending_purchase"] = None
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            "‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
            reply_markup=shop_menu_keyboard()
        )
        logger.error(f"User {user.id} ({nickname}) sent an unknown confirmation: '{confirmation}'.")
        return ConversationHandler.END

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–º–µ–Ω—ã –Ω–∞–∂–∏–≤–∫–∏ –Ω–∞ –±–æ–ª–µ–µ –¥–µ—à–µ–≤—É—é
async def confirm_replace_bait(update: Update, context: ContextTypes.DEFAULT_TYPE):
    confirmation = update.message.text.strip()
    user = update.effective_user
    user_data = users_data[user.id]
    nickname = user_data["nickname"] if user_data["nickname"] else user.first_name
    bait = user_data.get("pending_purchase", {}).get("bait")

    if confirmation == BUTTON_CONFIRM_YES and bait:
        if user_data["gold"] >= bait["price"]:
            previous_bait = user_data["current_bait"]["name"]
            user_data["gold"] -= bait["price"]
            user_data["current_bait"] = {
                "name": bait["name"],
                "end_time": datetime.utcnow() + bait["duration"],
                "probabilities": bait["probabilities"]
            }
            await update.message.reply_text(
                f"‚úÖ –í—ã –ø–æ–º–µ–Ω—è–ª–∏ –Ω–∞–∂–∏–≤–∫—É {previous_bait} –Ω–∞ {bait['name']} –∑–∞ {bait['price']} –∑–æ–ª–æ—Ç–∞.",
                reply_markup=shop_menu_keyboard()
            )
            logger.info(f"User {user.id} ({nickname}) replaced bait '{previous_bait}' with '{bait['name']}'.")
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–π –Ω–∞–∂–∏–≤–∫–∏.",
                reply_markup=shop_menu_keyboard()
            )
            logger.warning(f"User {user.id} ({nickname}) does not have enough gold to replace bait with '{bait['name']}'.")
        user_data["pending_purchase"] = None
        return ConversationHandler.END
    elif confirmation == BUTTON_CONFIRM_NO:
        await update.message.reply_text(
            "‚ùå –ó–∞–º–µ–Ω–∞ –Ω–∞–∂–∏–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=shop_menu_keyboard()
        )
        logger.info(f"User {user.id} ({nickname}) cancelled bait replacement.")
        user_data["pending_purchase"] = None
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            "‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
            reply_markup=shop_menu_keyboard()
        )
        logger.error(f"User {user.id} ({nickname}) sent an unknown confirmation for bait replacement: '{confirmation}'.")
        return ConversationHandler.END

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–û —Ä—ã–±–∞–∫–µ"
async def about_fisherman(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_data = users_data[user.id]
    about_text = get_about_fisherman_text(user_data)
    await update.message.reply_text(
        about_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=about_fisherman_keyboard()
    )
    logger.info(f"User {user.id} ({user_data['nickname']}) viewed about fisherman.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user = update.effective_user
    user_data = users_data[user.id]
    nickname = user_data["nickname"] if user_data["nickname"] else user.first_name

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–∂–∏–≤–∫–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
    current_bait = user_data["current_bait"]
    if current_bait:
        if datetime.utcnow() >= current_bait["end_time"]:
            user_data["current_bait"] = None
            await update.message.reply_text(
                "ü™± –í–∞—à–∞ –Ω–∞–∂–∏–≤–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.",
                reply_markup=inventory_menu_keyboard()
            )
            logger.info(f"User {user.id} ({nickname})'s bait has expired.")

    logger.info(f"Received message from user {user.id} ({nickname}): {update.message.text}")

    if text == BUTTON_START_FISHING:
        await begin_fishing(update, context)
    elif text == BUTTON_LAKE:
        await lake(update, context)
    elif text == BUTTON_INVENTORY:
        await inventory(update, context)
    elif text == BUTTON_SHOP:
        await shop(update, context)
    elif text == BUTTON_IDENTIFY_FISH:
        await identify_fish(update, context)
    elif text == BUTTON_SELL_ALL:
        await sell_fish(update, context)
    elif text == BUTTON_EXCHANGE_GOLD:
        await exchange_gold(update, context)
    elif text == BUTTON_UPDATE:
        await update_fishing_status(update, context)
    elif text == BUTTON_CATCH_FISH:
        await catch_fish(update, context)
    elif text == BUTTON_PULL:
        await pull_hook(update, context)
    elif text == BUTTON_ABOUT_FISHERMAN:
        await about_fisherman(update, context)
    elif text == BUTTON_GO_BACK:
        await go_back(update, context)
    elif text in [BUTTON_CONFIRM_YES, BUTTON_CONFIRM_NO, BUTTON_CONFIRM_NOT_ENOUGH]:
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–∫—É–ø–∫–∏
        pending = user_data.get("pending_purchase")
        if pending:
            if pending["type"] == "rod":
                await confirm_buy_rod(update, context)
            elif pending["type"] == "rod_replace":
                await confirm_replace_rod(update, context)
            elif pending["type"] == "bait":
                await confirm_buy_bait(update, context)
            elif pending["type"] == "bait_replace":
                await confirm_replace_bait(update, context)
            else:
                await update.message.reply_text(
                    "‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=main_menu_keyboard()
                )
                logger.error(f"User {user.id} ({nickname}) has unknown pending purchase type.")
        else:
            await update.message.reply_text(
                "‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
                reply_markup=main_menu_keyboard()
            )
            logger.warning(f"User {user.id} ({nickname}) sent a confirmation without pending purchase.")
    elif text == BUTTON_LEADERBOARD or text in [BUTTON_TOTAL_GOLD, BUTTON_TOTAL_KG, BUTTON_TOTAL_EXPERIENCE]:
        await handle_leaderboard_menu(update, context)
    else:
        await update.message.reply_text(
            "‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
            reply_markup=main_menu_keyboard()
        )
        logger.warning(f"Unknown command from user {user.id} ({nickname}): {update.message.text}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à —Ä–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω –Ω–∏–∂–µ
    application = ApplicationBuilder().token("8132081407:AAGSbjptd2JBrVUNOheyvvfC7nwIfMagD4o").build()

    # –°–æ–∑–¥–∞–Ω–∏–µ ConversationHandler –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∏–∫–∞ –∏ –ø–æ–∫—É–ø–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex(re.escape(BUTTON_START_FISHING)), begin_fishing),
            MessageHandler(filters.Regex(re.escape(BUTTON_RODS)), rods_section),
            MessageHandler(filters.Regex(re.escape(BUTTON_BAITS)), baits_section)
        ],
        states={
            ASK_NICKNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_nickname)],
            BUY_ROD: [MessageHandler(filters.TEXT & ~filters.COMMAND, buy_rod)],
            CONFIRM_BUY_ROD: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_buy_rod)],
            CONFIRM_REPLACE_ROD: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_replace_rod)],
            BUY_BAIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, buy_bait)],
            CONFIRM_BUY_BAIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_buy_bait)],
            CONFIRM_REPLACE_BAIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_replace_bait)],
        },
        fallbacks=[
            CommandHandler("cancel", cancel_nickname),
            MessageHandler(filters.Regex(re.escape(BUTTON_GO_BACK)), go_back)
        ],
        allow_reentry=True
    )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ConversationHandler
    application.add_handler(conv_handler)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
