import logging
import random
import re
from math import pi
from datetime import datetime, timedelta
import math

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler,
)

from guilds import guild_conversation_handler, add_guild_exp, get_guild_membership_rank, GUILD_BONUSES, GUILD_LEVELS
from db import Database
from quests import quests_conversation_handler, BUTTON_TASKS

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

db = None

BUTTON_START_FISHING = "üé£ –ù–∞—á–∞—Ç—å —Ä—ã–±–∞–ª–∫—É"
BUTTON_LAKE = "üèû –û–∑–µ—Ä–æ"
BUTTON_INVENTORY = "üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"
BUTTON_SHOP = "üè™ –ú–∞–≥–∞–∑–∏–Ω"
BUTTON_CATCH_FISH = "üé£ –õ–æ–≤–∏—Ç—å —Ä—ã–±–∫—É"
BUTTON_UPDATE = "üîÑ –û–±–Ω–æ–≤–∏—Ç—å"
BUTTON_GO_BACK = "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è"
BUTTON_IDENTIFY_FISH = "üîç –û–ø–æ–∑–Ω–∞—Ç—å —Ä—ã–±—É"
BUTTON_SELL_ALL = "üêü –ü—Ä–æ–¥–∞—Ç—å –≤—Å—é —Ä—ã–±—É"
BUTTON_EXCHANGE_GOLD = "–û–±–º–µ–Ω –∑–æ–ª–æ—Ç–æ –Ω–∞ TON"
BUTTON_PULL = "üêü –¢—è–Ω—É—Ç—å"
BUTTON_CONFIRM_YES = "‚úÖ –î–∞"
BUTTON_CONFIRM_NO = "‚ùå –ù–µ—Ç"
BUTTON_LEADERBOARD = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –õ–∏–¥–µ—Ä–æ–≤"
BUTTON_TOTAL_GOLD = "–õ–∏–¥–µ—Ä—ã –ø–æ –∑–æ–ª–æ—Ç—É"
BUTTON_TOTAL_KG = "–õ–∏–¥–µ—Ä—ã –ø–æ —É–ª–æ–≤—É"
BUTTON_TOTAL_EXPERIENCE = "–õ–∏–¥–µ—Ä—ã –ø–æ –æ–ø—ã—Ç—É"
BUTTON_RODS = "üé£ –£–¥–æ—á–∫–∏"
BUTTON_BAITS = "ü™± –ù–∞–∂–∏–≤–∫–∏"
BUTTON_ABOUT_FISHERMAN = "üë§ –û —Ä—ã–±–∞–∫–µ"
BUTTON_GUILDS = "üõ°Ô∏è –ì–∏–ª—å–¥–∏–∏"
BUTTON_MY_GUILD = "üõ°Ô∏è –ú–æ—è –ì–∏–ª—å–¥–∏—è"
BUTTON_HELP = "üîç –ü–æ–º–æ—â—å"

BUTTON_HELP_FISHING = "–†—ã–±–∞–ª–∫–∞ üé£"
BUTTON_HELP_RODS = "–£–¥–æ—á–∫–∏ üé£"
BUTTON_HELP_BAITS = "–ù–∞–∂–∏–≤–∫–∞ ü™±"
BUTTON_HELP_SHOP = "–ú–∞–≥–∞–∑–∏–Ω üè™"
BUTTON_HELP_GUILDS = "–ì–∏–ª—å–¥–∏–∏ üõ°Ô∏è"
BUTTON_HELP_ABOUT = "–û —Ä—ã–±–∞–∫–µ üë§"

ASK_NICKNAME = 1
BUY_ROD = 2
CONFIRM_BUY_ROD = 3
BUY_BAIT = 4
CONFIRM_BUY_BAIT = 5
EXCHANGE = 6
LEADERBOARD_CATEGORY = 7

HELP_MENU = 900
HELP_SUBTOPIC = 901

FISH_DATA = {
    "common": {
        "prefixes": ["–ú–µ–ª–∫–∏–π", "–•–∏–ª—ã–π", "–ú–æ–ª–æ–¥–æ–π", "–í–µ—Ä—Ç–ª—è–≤—ã–π", "–ë–æ–ª—å—à–æ–π", "–°—Ç–∞—Ä—ã–π", "–û–±—ã—á–Ω—ã–π", "–ö–æ—Å–æ–π"],
        "names": ["–ö–∞—Ä–∞—Å–∏–∫", "–û–∫—É–Ω–µ–∫", "–ë—ã—á–æ–∫", "–Å—Ä—à", "–ü–æ–¥–ª–µ—â–∏–∫", "–ì–æ–ª–∞–≤–ª—å"],
        "weight_range": (1, 5)
    },
    "rare": {
        "prefixes": ["–°—Ä–µ–¥–Ω–∏–π", "–•–æ—Ä–æ—à–∏–π", "–°–æ–ª–∏–¥–Ω—ã–π", "–ù–∞–ª–∏—Ç—ã–π", "–ë–ª–µ—Å—Ç—è—â–∏–π", "–í–∑—Ä–æ—Å–ª—ã–π", "–£–ø–∏—Ç–∞–Ω–Ω—ã–π", "–ü–æ—á—Ç–∏ –¢—Ä–æ—Ñ–µ–π–Ω—ã–π"],
        "names": ["–ö–∞—Ä–∞—Å—å", "–û–∫—É–Ω—å", "–õ–µ—â", "–†–æ—Ç–∞–Ω", "–£–≥–æ—Ä—ë–∫", "–°—É–¥–∞–∫"],  # <-- –ë–´–õ–û ‚Äú–£–≥–æ—Ä—å‚Äù, —Ç–µ–ø–µ—Ä—å ‚Äú–£–≥–æ—Ä—ë–∫‚Äù
        "weight_range": (7, 16)
    },
    "legendary": {
        "prefixes": ["–ú–æ—â–Ω—ã–π", "–û–≥—Ä–æ–º–Ω—ã–π", "–¢—Ä–æ—Ñ–µ–π–Ω—ã–π", "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π", "–ü–µ—Ä–µ–ª–∏–≤–∞—é—â–∏–π—Å—è", "–ó–¥–æ—Ä–æ–≤–µ–Ω–Ω—ã–π", "–ö–æ–ª–æ—Å—Å–∞–ª—å–Ω—ã–π"],
        "names": ["–Ø–∑—å", "–°–æ–º", "–ù–∞–ª–∏–º", "–¢—É–Ω–µ—Ü", "–£–≥–æ—Ä—å", "–õ–æ—Å–æ—Å—å", "–û—Å—ë—Ç—Ä"],
        "weight_range": (22, 79)
    }
}

RODS = [
    {"name": "–£–¥–æ—á–∫–∞ –ù–æ–≤–∏—á–∫–∞ üé£", "price": 10, "bonus_percent": 5},
    {"name": "–£–¥–æ—á–∫–∞ –õ—é–±–∏—Ç–µ–ª—è üé£", "price": 50, "bonus_percent": 10},
    {"name": "–£–¥–æ—á–∫–∞ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è üé£", "price": 200, "bonus_percent": 15},
    {"name": "–£–¥–æ—á–∫–∞ –ü–†–û üé£", "price": 500, "bonus_percent": 25},
    {"name": "–ó–æ–ª–æ—Ç–∞—è –£–¥–æ—á–∫–∞ üé£", "price": 5000, "bonus_percent": 50},
]

BAITS = [
    {
        "name": "–ß–µ—Ä–≤—è–∫ ü™±",
        "price": 5,
        "duration": timedelta(hours=1),
        "probabilities": {"common": 60, "rare": 35, "legendary": 5}
    },
    {
        "name": "–ü–∏—è–≤–∫–∞ ü™±",
        "price": 20,
        "duration": timedelta(hours=1),
        "probabilities": {"common": 55, "rare": 60, "legendary": 5}
    },
    {
        "name": "–ú—è—Å–æ –∫—Ä–∞–±–∞ ü™±",
        "price": 100,
        "duration": timedelta(hours=1),
        "probabilities": {"common": 55, "rare": 54, "legendary": 6}
    },
    {
        "name": "–û—Å—å–º–∏–Ω–æ–≥ ü™±",
        "price": 250,
        "duration": timedelta(hours=1),
        "probabilities": {"common": 50, "rare": 50, "legendary": 10}
    },
]

def main_menu_keyboard(user_id):
    u=db.get_user(user_id)
    guild_id=u[14]
    guild_button = BUTTON_MY_GUILD if guild_id is not None else BUTTON_GUILDS
    keyboard = [
        [KeyboardButton(BUTTON_LAKE), KeyboardButton(BUTTON_INVENTORY), KeyboardButton(BUTTON_ABOUT_FISHERMAN)],
        [KeyboardButton(BUTTON_SHOP), KeyboardButton(BUTTON_LEADERBOARD), KeyboardButton(guild_button)],
        [KeyboardButton(BUTTON_TASKS), KeyboardButton(BUTTON_HELP)]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_required_xp(level):
    LEVELS = [
        {"level": 1, "required_xp": 10},
        {"level": 2, "required_xp": 38},
        {"level": 3, "required_xp": 89},
        {"level": 4, "required_xp": 169},
        {"level": 5, "required_xp": 477},
        {"level": 6, "required_xp": 1008},
        {"level": 7, "required_xp": 1809},
        {"level": 8, "required_xp": 2940},
        {"level": 9, "required_xp": 4470},
        {"level": 10, "required_xp": 6471},
    ]
    for lvl in range(11,76):
        required_xp = int(LEVELS[-1]["required_xp"] * 1.5)
        LEVELS.append({"level": lvl,"required_xp": required_xp})
    for lvl_data in LEVELS:
        if lvl_data["level"]==level:
            return lvl_data["required_xp"]
    if level>LEVELS[-1]["level"]:
        last_required=LEVELS[-1]["required_xp"]
        additional_levels=level-LEVELS[-1]["level"]
        return int(last_required*(1.5**additional_levels))
    return 10

def update_rank(user_id):
    LEVELS = [
        {"level": 1, "required_xp": 10, "rank": "–Æ–Ω—ã–π —Ä—ã–±–∞–∫"},
        {"level": 2, "required_xp": 38, "rank": "–Æ–Ω—ã–π —Ä—ã–±–∞–∫"},
        {"level": 3, "required_xp": 89, "rank": "–Æ–Ω—ã–π —Ä—ã–±–∞–∫"},
        {"level": 4, "required_xp": 169, "rank": "–ù–∞—á–∏–Ω–∞—é—â–∏–π –ª–æ–≤–µ—Ü"},
        {"level": 5, "required_xp": 477, "rank": "–ù–∞—á–∏–Ω–∞—é—â–∏–π –ª–æ–≤–µ—Ü"},
        {"level": 6, "required_xp": 1008, "rank": "–ù–∞—á–∏–Ω–∞—é—â–∏–π –ª–æ–≤–µ—Ü"},
        {"level": 7, "required_xp": 1809, "rank": "–õ–æ–≤–µ—Ü –º–µ–ª–∫–æ–π —Ä—ã–±—ë—à–∫–∏"},
        {"level": 8, "required_xp": 2940, "rank": "–õ–æ–≤–µ—Ü –º–µ–ª–∫–æ–π —Ä—ã–±—ë—à–∫–∏"},
        {"level": 9, "required_xp": 4470, "rank": "–õ–æ–≤–µ—Ü –º–µ–ª–∫–æ–π —Ä—ã–±—ë—à–∫–∏"},
        {"level": 10, "required_xp": 6471, "rank": "–û–ø—ã—Ç–Ω—ã–π —É–¥–∏–ª—å—â–∏–∫"},
    ]
    for lvl in range(11,76):
        required_xp = int(LEVELS[-1]["required_xp"] * 1.5)
        if 11 <= lvl <= 15:
            rank = "–õ—é–±–∏—Ç–µ–ª—å –∫–ª—ë–≤–∞"
        elif 16 <= lvl <= 20:
            rank = "–ó–Ω–∞—Ç–æ–∫ –∫—Ä—é—á–∫–æ–≤"
        elif 21 <= lvl <= 25:
            rank = "–ú–∞—Å—Ç–µ—Ä –Ω–∞–∂–∏–≤–∫–∏"
        elif 26 <= lvl <= 30:
            rank = "–ò—Å–∫—É—Å–Ω—ã–π —Ä—ã–±–∞–∫"
        elif 31 <= lvl <= 35:
            rank = "–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ —É–ª–æ–≤–æ–º"
        elif 36 <= lvl <= 40:
            rank = "–ù–∞—Å—Ç–æ—è—â–∏–π —Ä—ã–±–æ–ª–æ–≤"
        elif 41 <= lvl <= 45:
            rank = "–í–∏—Ä—Ç—É–æ–∑ —Ä—ã–±–∞–ª–∫–∏"
        elif 46 <= lvl <= 50:
            rank = "–£–∫—Ä–æ—Ç–∏—Ç–µ–ª—å —Ä–µ–∫"
        elif 51 <= lvl <= 55:
            rank = "–ú–æ—Ä—Å–∫–æ–π –¥–æ–±—ã—Ç—á–∏–∫"
        elif 56 <= lvl <= 60:
            rank = "–õ–µ–≥–µ–Ω–¥–∞ –ø—Ä—É–¥–∞"
        elif 61 <= lvl <= 65:
            rank = "–í–ª–∞—Å—Ç–µ–ª–∏–Ω –æ–∑—ë—Ä"
        elif 66 <= lvl <= 70:
            rank = "–ú–∞—Å—Ç–µ—Ä —Ä—ã–±–∞–ª–∫–∏"
        elif 71 <= lvl <= 75:
            rank = "–≠–ø–∏—á–µ—Å–∫–∏–π —Ä—ã–±–æ–ª–æ–≤"
        else:
            rank = "–†—ã–±–æ–ª–æ–≤"
        LEVELS.append({"level": lvl, "required_xp": required_xp, "rank": rank})

    u=db.get_user(user_id)
    level = u[4]
    for lvl_data in LEVELS:
        if lvl_data["level"]==level:
            db.update_user(user_id, rank=lvl_data["rank"])
            return

def check_level_up(user_id):
    u=db.get_user(user_id)
    experience = u[3]
    level = u[4]
    gold = u[2]

    level_up=False
    gold_reward=0
    new_level=None
    while level<=75 and experience>=get_required_xp(level):
        level+=1
        reward = level*2
        gold+=reward
        gold_reward+=reward
        level_up=True
        new_level=level
    db.update_user(user_id, level=level, gold=gold)
    update_rank(user_id)
    return level_up,new_level,gold_reward

def get_about_fisherman_text(user_id):
    u=db.get_user(user_id)
    nickname = u[1]
    gold = u[2]
    experience = u[3]
    level = u[4]
    rank = u[5]
    registration_time = datetime.fromisoformat(u[6])
    age_delta = datetime.utcnow() - registration_time
    hours, remainder = divmod(int(age_delta.total_seconds()), 3600)
    minutes, _ = divmod(remainder, 60)
    age = f"{hours} —á–∞—Å–æ–≤ –∏ {minutes} –º–∏–Ω—É—Ç"
    total_gold_earned = u[12]
    total_kg_caught = u[13]
    guild_id = u[14]

    rods_stats,baits_stats = db.get_stats(user_id)
    if rods_stats:
        favorite_rod = max(rods_stats, key=rods_stats.get)
    else:
        favorite_rod = "–Ω–µ—Ç"
    if baits_stats:
        favorite_bait = max(baits_stats, key=baits_stats.get)
    else:
        favorite_bait = "–Ω–µ—Ç"

    guild_str = "–Ω–µ—Ç"
    guild_rank_str=""
    if guild_id is not None:
        g = db.get_guild(guild_id)
        if g and g["name"]:
            guild_str = g["name"]
            guild_rank_str = get_guild_membership_rank(user_id, guild_id, db)

    text = (
      "üë§ –û —Ä—ã–±–∞–∫–µ:\n\n"
        f"üìõ –ò–º—è: {nickname}\n"
        f"üèÖ –£—Ä–æ–≤–µ–Ω—å: {level}\n"
        f"üéñ –†–∞–Ω–≥: {rank}\n"
        f"‚≠ê –û–ø—ã—Ç: {experience}/{get_required_xp(level)}\n"
        f"‚è≥ –í–æ–∑—Ä–∞—Å—Ç –≤–∞—à–µ–≥–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è: {age}\n"
        f"üé£ –õ—é–±–∏–º–∞—è —É–¥–æ—á–∫–∞: {favorite_rod}\n"
        f"ü™± –õ—é–±–∏–º–∞—è –Ω–∞–∂–∏–≤–∫–∞: {favorite_bait}\n"
    )

    bonus = db.get_bonus(user_id)
    if bonus:
        end_time = datetime.fromisoformat(bonus["bonus_end"])
        now = datetime.utcnow()
        diff = (end_time - now).total_seconds()
        if diff>0:
            remain = int(diff//60)
            b_name=bonus["bonus_name"]
            b_fs=bonus["bonus_fishing_speed"]
            b_gold=bonus["bonus_gold_percent"]
            b_xp=bonus["bonus_xp_percent"]
            text += f"\nüêæ –ë–æ–Ω—É—Å: {b_name} ({remain} –º–∏–Ω) (+{b_fs}% –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏, +{b_xp}% –∫ –æ–ø—ã—Ç—É, +{b_gold}% –∫ –∑–æ–ª–æ—Ç—É)"

    text += f"\n\nüõ°Ô∏è –ì–∏–ª—å–¥–∏—è: {guild_str}"
    if guild_id is not None and guild_str!="–Ω–µ—Ç":
        text += f"\nüî∞ –†–∞–Ω–≥ –≤ –≥–∏–ª—å–¥–∏–∏: {guild_rank_str}"

    text += (
        f"\n\nüí∞ –í—Å–µ–≥–æ –∑–æ–ª–æ—Ç–∞ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_gold_earned}"
        f"\nüêü –í—Å–µ–≥–æ –ö–ì —Ä—ã–±—ã –ø–æ–π–º–∞–Ω–æ: {total_kg_caught}"
        "\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ª–æ–≤–∏—Ç—å, –æ–ø–æ–∑–Ω–∞–≤–∞—Ç—å –∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å —Ä—ã–±—É, —á—Ç–æ–±—ã —Ä–∞—Å—Ç–∏ –≤ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–µ!"
    )
    return text

def get_welcome_text():
    return (
        "üåÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –±–µ—Ä–µ–≥–∞ —Ç–∏—Ö–æ–π —Ä–µ–∫–∏!\n\n"
        "–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–π–º–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä—ã–±—ã, –æ–ø–æ–∑–Ω–∞—Ç—å –µ—ë –∏ –ø—Ä–æ–¥–∞—Ç—å –∑–∞ –Ω–∞—Å—Ç–æ—è—â—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É.\n\n"
        "–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –±–æ–ª—å—à–æ–π —Ä—ã–±–∞—Ü–∫–æ–π —Å–ª–∞–≤–µ!"
    )

def get_onboarding_text():
    return (
        "üé£ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π –º–∏—Ä —Ä—ã–±–∞–ª–∫–∏!\n\n"
        "–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, –¥–∞–≤–∞–π—Ç–µ –ø—Ä–∏–¥—É–º–∞–µ–º –≤–∞–º –∏–º—è.\n"
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è (–¥–æ 25 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã):"
    )

def get_lake_text(user_nickname):
    return (
        f"üåä {user_nickname} –ø–æ–¥–æ—à—ë–ª –∫ –∑–µ—Ä–∫–∞–ª—å–Ω–æ–π –≥–ª–∞–¥–∏ –æ–∑–µ—Ä–∞. –õ—ë–≥–∫–∏–π –≤–µ—Ç–µ—Ä–æ–∫ –∫–∞—á–∞–µ—Ç –∫–∞–º—ã—à–∏, "
        "–∞ –Ω–∞–¥ –≤–æ–¥–æ–π –∫—Ä—É–∂–∞—Ç —Å—Ç—Ä–µ–∫–æ–∑—ã.\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
    )

def get_inventory_text(user_id):
    u = db.get_user(user_id)
    inv = db.get_inventory(user_id)
    un = db.get_unidentified(user_id)
    gold = u[2]
    rod = u[7] if u[7] else "–ë–∞–º–±—É–∫–æ–≤–∞—è —É–¥–æ—á–∫–∞ üé£"
    rod_bonus = u[8] if u[8] else 0
    bait_name = u[9]
    bait_end = u[10]

    text = "üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n\n"
    text += f"üé£ –£–¥–æ—á–∫–∞: {rod} (—É–º–µ–Ω—å—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ {rod_bonus}%)\n"
    if bait_name and bait_end:
        end_time = datetime.fromisoformat(bait_end)
        remaining = int((end_time - datetime.utcnow()).total_seconds()/60)
        if remaining > 0:
            text+=f"ü™± –ù–∞–∂–∏–≤–∫–∞: {bait_name} (–µ—â—ë {remaining} –º–∏–Ω)\n"
        else:
            text+="ü™± –ù–∞–∂–∏–≤–∫–∞: –Ω–µ—Ç\n"
    else:
        text+="ü™± –ù–∞–∂–∏–≤–∫–∞: –Ω–µ—Ç\n"

    text+="\n"
    # –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ä—ã–±–∞
    c=un['common']
    r=un['rare']
    l=un['legendary']
    if c>0:
        text+=f"‚Ä¢ –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Ä—ã–±—ã - {c}\n"
    if r>0:
        text+=f"‚Ä¢ –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Ä–µ–¥–∫–∏–µ —Ä—ã–±—ã - {r}\n"
    if l>0:
        text+=f"‚Ä¢ –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ —Ä—ã–±—ã - {l}\n"
    if c==0 and r==0 and l==0:
        text+="–ù–µ—Ç –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–π —Ä—ã–±—ã.\n"

    identified_fish = [(k,v) for k,v in inv.items() if v>0 and isinstance(k,tuple)]
    total_identified_weight = 0
    if identified_fish:
        text+="\n–û–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ä—ã–±–∞:\n"
        for (fname, w, rar), qty in identified_fish:
            total_w = w*qty
            text += f"‚Ä¢ {fname} - –≤–µ—Å: {w} –ö–ì - {qty} —à—Ç. (–∏—Ç–æ–≥–æ {total_w} –ö–ì)\n"
            total_identified_weight += total_w

        # –ü–æ—Å–ª–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π –≤–µ—Å
        text += f"\n–û–±—â–∏–π –≤–µ—Å —Ä—ã–±—ã: {total_identified_weight} –ö–ì"

    text += f"\n\nüí∞ –ó–æ–ª–æ—Ç–æ: {gold}"
    return text

async def set_nickname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    nickname=update.message.text.strip()
    if len(nickname)>25:
        await update.message.reply_text("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ.")
        return ASK_NICKNAME
    if not re.match(r'^[A-Za-z–ê-–Ø–∞-—è–Å—ë\s]+$', nickname):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã!")
        return ASK_NICKNAME
    db.update_user(user.id, nickname=nickname)
    await update.message.reply_text(f"‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã - {nickname}!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
                                    reply_markup=main_menu_keyboard(user.id))
    return ConversationHandler.END

async def cancel_nickname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    await update.message.reply_text("–û—Ç–º–µ–Ω–∞.",reply_markup=main_menu_keyboard(user.id))
    return ConversationHandler.END

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    db.get_user(user.id)
    logger.info(f"User {user.id} ({user.first_name}) started bot.")
    await update.message.reply_text(get_welcome_text(),
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BUTTON_START_FISHING)]], resize_keyboard=True)
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.warning(f"Unknown command from user {update.effective_user.id}: {update.message.text}")

async def begin_fishing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    u=db.get_user(user.id)
    nickname = u[1]
    if not nickname:
        await update.message.reply_text(get_onboarding_text(),reply_markup=ReplyKeyboardRemove())
        return ASK_NICKNAME
    else:
        await update.message.reply_text("üåû –û—Ç–ª–∏—á–Ω–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è —Ä—ã–±–∞–ª–∫–∏! –£–¥–∞—á–∏!",
                                        reply_markup=main_menu_keyboard(user.id))
        return ConversationHandler.END

async def lake_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    u=db.get_user(user.id)
    name = u[1] if u[1] else user.first_name
    txt=get_lake_text(name)
    await update.message.reply_text(txt,reply_markup=ReplyKeyboardMarkup([
        [KeyboardButton(BUTTON_CATCH_FISH)],
        [KeyboardButton(BUTTON_UPDATE)],
        [KeyboardButton(BUTTON_GO_BACK)],
    ], resize_keyboard=True))

async def catch_fish_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    if "fishing" in context.user_data and context.user_data["fishing"]:
        await update.message.reply_text("–í—ã —É–∂–µ –∂–¥—ë—Ç–µ —É–ª–æ–≤–∞!")
        return
    u=db.get_user(user.id)
    current_rod_bonus = u[8] if u[8] else 0
    base_delay=random.randint(5,33)

    def apply_bonus_to_fishing_time(user_id, base_sec, db_):
        bonus = db_.get_bonus(user_id)
        delay=int(base_sec*(1-current_rod_bonus/100))
        if delay<1:
            delay=1
        if bonus:
            speed=bonus["bonus_fishing_speed"]
            if speed>0:
                dec=math.ceil(delay*(speed/100.0))
                delay=delay-dec
                if delay<1:
                    delay=1
        return delay

    delay=apply_bonus_to_fishing_time(user.id, base_delay, db)
    context.user_data["fishing"]={
        "end_time":datetime.utcnow()+timedelta(seconds=delay),
        "status":"fishing"
    }
    await update.message.reply_text(
        f"üé£ –ó–∞–±—Ä–æ—Å–∏–ª–∏ —É–¥–æ—á–∫—É... –ü–æ–¥–æ–∂–¥–∏—Ç–µ {delay} —Å–µ–∫—É–Ω–¥.",
        reply_markup=ReplyKeyboardMarkup([
            [KeyboardButton(BUTTON_CATCH_FISH)],
            [KeyboardButton(BUTTON_UPDATE)],
            [KeyboardButton(BUTTON_GO_BACK)],
        ], resize_keyboard=True)
    )

async def update_fishing_status_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "fishing" not in context.user_data or not context.user_data["fishing"]:
        await update.message.reply_text("–í—ã —Å–µ–π—á–∞—Å –Ω–µ –ª–æ–≤–∏—Ç–µ —Ä—ã–±—É.",reply_markup=main_menu_keyboard(update.effective_user.id))
        return
    fishing=context.user_data["fishing"]
    end=fishing["end_time"]
    now=datetime.utcnow()
    rem=(end-now).total_seconds()
    if rem>0:
        await update.message.reply_text(f"–†—ã–±–∫–∞ –µ—â—ë –Ω–µ –ø–æ–ø–∞–ª–∞—Å—å, –æ—Å—Ç–∞–ª–æ—Å—å ~{int(rem)} —Å–µ–∫.")
    else:
        fishing["status"]="ready_to_pull"
        await update.message.reply_text(
            "–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –∫–ª—é–Ω—É–ª–æ! –¢—è–Ω–∏—Ç–µ!",
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton(BUTTON_PULL)],
                [KeyboardButton(BUTTON_GO_BACK)]
            ],resize_keyboard=True)
        )

async def pull_hook_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "fishing" not in context.user_data or not context.user_data["fishing"]:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –ª–æ–≤–∏—Ç—å.",
                                        reply_markup=main_menu_keyboard(update.effective_user.id))
        return
    fishing=context.user_data["fishing"]
    end=fishing["end_time"]
    now=datetime.utcnow()
    user=update.effective_user

    if now>=end and fishing["status"]=="ready_to_pull":
        u=db.get_user(user.id)
        bait_name=u[9]
        bait_end=u[10]
        if bait_name and bait_end:
            end_time=datetime.fromisoformat(bait_end)
            if end_time>datetime.utcnow():
                probs_str=u[11]
                import json
                if probs_str:
                    probs=json.loads(probs_str)
                else:
                    probs={"common":70,"rare":25,"legendary":5}
            else:
                probs={"common":70,"rare":25,"legendary":5}
        else:
            probs={"common":70,"rare":25,"legendary":5}

        r=random.randint(1,100)
        cumulative=0
        rarity_chosen=None
        for rarity in ["common","rare","legendary"]:
            cumulative+=probs[rarity]
            if r<=cumulative:
                rarity_chosen=rarity
                break

        if rarity_chosen=="common":
            ftype="–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ä—ã–±–∞"
            xp=random.randint(1,3)
        elif rarity_chosen=="rare":
            ftype="–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ä–µ–¥–∫–∞—è —Ä—ã–±–∞"
            xp=random.randint(4,9)
        else:
            ftype="–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è —Ä—ã–±–∞"
            xp=random.randint(10,30)
        un=db.get_unidentified(user.id)
        un[rarity_chosen]+=1
        db.update_unidentified(user.id, common=un["common"],rare=un["rare"],legendary=un["legendary"])
        new_exp = u[3]+xp
        db.update_user(user.id, experience=new_exp)
        add_guild_exp(user.id, xp, db)

        rods_stats,baits_stats = db.get_stats(user.id)
        rod=u[7] if u[7] else "–ë–∞–º–±—É–∫–æ–≤–∞—è —É–¥–æ—á–∫–∞ üé£"
        bait=u[9] if u[9] else "–ù–µ—Ç –Ω–∞–∂–∏–≤–∫–∏"
        rods_stats[rod]=rods_stats.get(rod,0)+1
        baits_stats[bait]=baits_stats.get(bait,0)+1
        db.update_stats(user.id, rods_stats=rods_stats, baits_stats=baits_stats)

        lvl_up,n_lvl,g_reward=check_level_up(user.id)
        update_rank(user.id)
        msg=(f"üéâ –í—ã –≤—ã—É–¥–∏–ª–∏ {ftype} –∏–∑ –≥–ª—É–±–∏–Ω!\n–û–ø—ã—Ç +{xp} ‚≠ê")
        if lvl_up:
            msg+=f"\n–í–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω –¥–æ {n_lvl}!"
            if g_reward>0:
                msg+=f"\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ {g_reward} –∑–æ–ª–æ—Ç–∞!"
        await update.message.reply_text(
            msg,
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton(BUTTON_CATCH_FISH)],
                [KeyboardButton(BUTTON_GO_BACK)]
            ],resize_keyboard=True)
        )
        context.user_data["fishing"]=None
    else:
        await update.message.reply_text(
            "–ü–æ—Ç–æ—Ä–æ–ø–∏–ª–∏—Å—å –∏ —Å–æ—Ä–≤–∞–ª–∏ —Ä—ã–±—É!",
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton(BUTTON_CATCH_FISH)],
                [KeyboardButton(BUTTON_GO_BACK)]
            ],resize_keyboard=True)
        )
        context.user_data["fishing"]=None

async def identify_fish_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    un=db.get_unidentified(user.id)
    if all(x==0 for x in un.values()):
        await update.message.reply_text(
            "–ù–µ—Ç –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–π —Ä—ã–±—ã.",
            reply_markup=ReplyKeyboardMarkup([
                [BUTTON_GO_BACK],
            ], resize_keyboard=True)
        )
        return
    inv=db.get_inventory(user.id)
    results=[]
    for rarity,count in un.items():
        for _ in range(count):
            prefix=random.choice(FISH_DATA[rarity]["prefixes"])
            fname=random.choice(FISH_DATA[rarity]["names"])
            w=random.randint(*FISH_DATA[rarity]["weight_range"])
            inv[(f"{prefix} {fname}",w,rarity)] = inv.get((f"{prefix} {fname}",w,rarity),0)+1
            u=db.get_user(user.id)
            db.update_user(user.id, total_kg_caught=u[13]+w)
            results.append(f"{prefix} {fname} - –≤–µ—Å {w} –ö–ì")

    db.update_inventory(user.id, inv)
    db.update_unidentified(user.id,0,0,0)
    msg="üîç –í—ã —Å –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ–º —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ —Å–≤–æ–π —É–ª–æ–≤...\n" \
        "–¢–µ–ø–µ—Ä—å –≤—ã –∑–Ω–∞–µ—Ç–µ, –∫—Ç–æ —Å–∫—Ä—ã–≤–∞–ª—Å—è –≤ –≥–ª—É–±–∏–Ω–∞—Ö:\n"+ "\n".join(results)
    await update.message.reply_text(
        msg,
        reply_markup=ReplyKeyboardMarkup([
            [BUTTON_GO_BACK]
        ],resize_keyboard=True)
    )

async def inventory_handler_func(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    txt=get_inventory_text(user.id)
    await update.message.reply_text(
        txt,
        reply_markup=ReplyKeyboardMarkup([
            [BUTTON_IDENTIFY_FISH],
            [BUTTON_GO_BACK],
        ], resize_keyboard=True)
    )

def get_shop_text(user_id):
    inv=db.get_inventory(user_id)
    identified = [(k,v) for k,v in inv.items() if v>0 and isinstance(k,tuple)]
    if not identified:
        return ("–ö–∞–∂–µ—Ç—Å—è —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å —Ä—ã–±–∞. –°–∫–æ—Ä–µ–µ –∏–¥–∏—Ç–µ –ø–æ–π–º–∞–π—Ç–µ –∏ –æ–ø–æ–∑–Ω–∞–π—Ç–µ –µ—â–µ!",0)
    text="üè™ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!\n\n–í–∞—à–∞ –æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ä—ã–±–∞:\n"
    total_weight=0
    for (fname,w,r),qty in identified:
        tw=w*qty
        text+=f"{fname} - {qty} —à—Ç. (–í–µ—Å –æ–¥–Ω–æ–≥–æ: {w} –ö–ì, –≤—Å–µ–≥–æ: {tw} –ö–ì)\n"
        total_weight+=tw
    gold=int(total_weight*pi/4)
    text+=f"\n–û–±—â–∏–π –≤–µ—Å: {total_weight} –ö–ì\n"
    text+=f"\n–ü—Ä–æ–¥–∞—Ç—å –≤—Å—é —Ä—ã–±—É –∑–∞ {gold} –∑–æ–ª–æ—Ç–∞?"
    return (text,gold)

async def shop_handler_func(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    info,g=get_shop_text(user.id)
    context.user_data["shop_gold"]=g
    await update.message.reply_text(
        info,
        reply_markup=ReplyKeyboardMarkup([
            [BUTTON_RODS, BUTTON_BAITS],
            [BUTTON_SELL_ALL, BUTTON_EXCHANGE_GOLD],
            [BUTTON_GO_BACK],
        ], resize_keyboard=True)
    )

async def sell_fish_handler_func(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    inv=db.get_inventory(user.id)
    identified=[(k,v) for k,v in inv.items() if v>0 and isinstance(k,tuple)]
    if not identified:
        await update.message.reply_text(
            "–ù–µ—Ç –æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–π —Ä—ã–±—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.",
            reply_markup=ReplyKeyboardMarkup([
                [BUTTON_RODS, BUTTON_BAITS],
                [BUTTON_SELL_ALL, BUTTON_EXCHANGE_GOLD],
                [BUTTON_GO_BACK],
            ], resize_keyboard=True)
        )
        return
    total_w=0
    for (fname,w,r),qty in identified:
        total_w+=w*qty
        inv[(fname,w,r)]=0
    db.update_inventory(user.id, inv)
    gold_earned=int(total_w*pi/4)
    u=db.get_user(user.id)
    db.update_user(user.id, gold=u[2]+gold_earned, total_gold_earned=u[12]+gold_earned)
    await update.message.reply_text(
        f"–í—ã –ø—Ä–æ–¥–∞–ª–∏ –≤—Å—é –æ–ø–æ–∑–Ω–∞–Ω–Ω—É—é —Ä—ã–±—É –∑–∞ {gold_earned} –∑–æ–ª–æ—Ç–∞!",
        reply_markup=ReplyKeyboardMarkup([
            [BUTTON_RODS, BUTTON_BAITS],
            [BUTTON_SELL_ALL, BUTTON_EXCHANGE_GOLD],
            [BUTTON_GO_BACK],
        ], resize_keyboard=True)
    )

async def exchange_gold_handler_func(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    u=db.get_user(user.id)
    gold=u[2]
    if gold>=25000:
        keyboard=[[BUTTON_CONFIRM_YES,BUTTON_CONFIRM_NO]]
        await update.message.reply_text(
            "–•–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å 25000 –∑–æ–ª–æ—Ç–∞ –Ω–∞ TON?",
            reply_markup=ReplyKeyboardMarkup(keyboard,resize_keyboard=True)
        )
        return EXCHANGE
    else:
        need=25000-gold
        await update.message.reply_text(
            f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {need} –∑–æ–ª–æ—Ç–∞ –¥–ª—è –æ–±–º–µ–Ω–∞.",
            reply_markup=ReplyKeyboardMarkup([
                [BUTTON_RODS, BUTTON_BAITS],
                [BUTTON_SELL_ALL, BUTTON_EXCHANGE_GOLD],
                [BUTTON_GO_BACK],
            ], resize_keyboard=True)
        )

async def confirm_exchange_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    u=db.get_user(user.id)
    if update.message.text==BUTTON_CONFIRM_YES:
        if u[2]>=25000:
            db.update_user(user.id, gold=u[2]-25000)
            await update.message.reply_text(
                "–û–±–º–µ–Ω —Å–æ–≤–µ—Ä—à–µ–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ TON.",
                reply_markup=ReplyKeyboardMarkup([
                    [BUTTON_RODS, BUTTON_BAITS],
                    [BUTTON_SELL_ALL, BUTTON_EXCHANGE_GOLD],
                    [BUTTON_GO_BACK],
                ], resize_keyboard=True)
            )
        else:
            need=25000-u[2]
            await update.message.reply_text(
                f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {need} –∑–æ–ª–æ—Ç–∞!",
                reply_markup=ReplyKeyboardMarkup([
                    [BUTTON_RODS, BUTTON_BAITS],
                    [BUTTON_SELL_ALL, BUTTON_EXCHANGE_GOLD],
                    [BUTTON_GO_BACK],
                ], resize_keyboard=True)
            )
    else:
        await update.message.reply_text(
            "–û–±–º–µ–Ω –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=ReplyKeyboardMarkup([
                [BUTTON_RODS, BUTTON_BAITS],
                [BUTTON_SELL_ALL, BUTTON_EXCHANGE_GOLD],
                [BUTTON_GO_BACK],
            ], resize_keyboard=True)
        )
    return ConversationHandler.END

async def about_fisherman_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    txt=get_about_fisherman_text(user.id)
    await update.message.reply_text(
        txt,
        reply_markup=ReplyKeyboardMarkup([[BUTTON_GO_BACK]], resize_keyboard=True)
    )

async def go_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    await update.message.reply_text(
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è...",
        reply_markup=main_menu_keyboard(user.id)
    )
    return ConversationHandler.END

async def leaderboard_handler_func(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ–π—Ç–∏–Ω–≥–∞:",
        reply_markup=ReplyKeyboardMarkup([
            [BUTTON_TOTAL_GOLD, BUTTON_TOTAL_KG],
            [BUTTON_TOTAL_EXPERIENCE],
            [BUTTON_GO_BACK],
        ], resize_keyboard=True)
    )
    return LEADERBOARD_CATEGORY

async def leaderboard_show(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text=update.message.text
    import sqlite3
    conn = sqlite3.connect(db.db_path)
    c=conn.cursor()
    c.execute("SELECT user_id,nickname,gold,experience,total_gold_earned,total_kg_caught FROM users")
    rows=c.fetchall()
    conn.close()
    all_users=rows

    if text==BUTTON_TOTAL_GOLD:
        all_users.sort(key=lambda x:x[4],reverse=True)
        cat="–∑–æ–ª–æ—Ç—É"
        val=lambda d:d[4]
    elif text==BUTTON_TOTAL_KG:
        all_users.sort(key=lambda x:x[5],reverse=True)
        cat="—É–ª–æ–≤—É"
        val=lambda d:d[5]
    elif text==BUTTON_TOTAL_EXPERIENCE:
        all_users.sort(key=lambda x:x[3],reverse=True)
        cat="–æ–ø—ã—Ç—É"
        val=lambda d:d[3]
    else:
        await go_back(update, context)
        return ConversationHandler.END

    msg=f"üèÜ –¢–æ–ø –ø–æ {cat}:\n"
    top=all_users[:10]
    i=1
    for data in top:
        name=data[1] if data[1] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä—ã–±–∞–∫"
        msg+=f"{i}. {name} - {val(data)}\n"
        i+=1
    await update.message.reply_text(
        msg,
        reply_markup=ReplyKeyboardMarkup([
            [BUTTON_TOTAL_GOLD, BUTTON_TOTAL_KG],
            [BUTTON_TOTAL_EXPERIENCE],
            [BUTTON_GO_BACK],
        ], resize_keyboard=True)
    )
    return LEADERBOARD_CATEGORY

async def rods_section(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text="üé£ –£–¥–æ—á–∫–∏ –≤ –ø—Ä–æ–¥–∞–∂–µ:\n"
    for rod in RODS:
        text+=f"{rod['name']} - {rod['price']} –∑–æ–ª–æ—Ç–∞ (—É–º–µ–Ω—å—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ {rod['bonus_percent']}%)\n"
    text+="–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ—á–∫—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥."
    keyboard=[[KeyboardButton(r["name"])] for r in RODS]
    keyboard.append([BUTTON_GO_BACK])
    await update.message.reply_text(
        text,
        reply_markup=ReplyKeyboardMarkup(keyboard,resize_keyboard=True)
    )
    return BUY_ROD

async def buy_rod_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    rod_name=update.message.text.strip()
    if rod_name==BUTTON_GO_BACK:
        await update.message.reply_text(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω.",
            reply_markup=ReplyKeyboardMarkup([
                [BUTTON_RODS, BUTTON_BAITS],
                [BUTTON_SELL_ALL, BUTTON_EXCHANGE_GOLD],
                [BUTTON_GO_BACK],
            ], resize_keyboard=True)
        )
        return ConversationHandler.END
    rod=next((r for r in RODS if r["name"]==rod_name),None)
    if rod:
        context.user_data["pending_rod"]=rod
        keyboard=[[BUTTON_CONFIRM_YES,BUTTON_CONFIRM_NO]]
        await update.message.reply_text(
            f"–ö—É–ø–∏—Ç—å {rod['name']} –∑–∞ {rod['price']} –∑–æ–ª–æ—Ç–∞?\n–≠—Ç–æ —É–ª—É—á—à–∏—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –ª–æ–≤–ª–∏ –Ω–∞ {rod['bonus_percent']}%.",
            reply_markup=ReplyKeyboardMarkup(keyboard,resize_keyboard=True)
        )
        return CONFIRM_BUY_ROD
    else:
        await update.message.reply_text(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É–¥–æ—á–∫–∞.",
            reply_markup=ReplyKeyboardMarkup([
                [BUTTON_RODS, BUTTON_BAITS],
                [BUTTON_SELL_ALL, BUTTON_EXCHANGE_GOLD],
                [BUTTON_GO_BACK],
            ], resize_keyboard=True)
        )
        return ConversationHandler.END

async def confirm_buy_rod_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    u=db.get_user(user.id)
    rod=context.user_data.get("pending_rod")
    if not rod:
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞: –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É–¥–æ—á–∫–∏.",
            reply_markup=ReplyKeyboardMarkup([
                [BUTTON_RODS, BUTTON_BAITS],
                [BUTTON_SELL_ALL, BUTTON_EXCHANGE_GOLD],
                [BUTTON_GO_BACK],
            ], resize_keyboard=True)
        )
        return ConversationHandler.END
    if update.message.text==BUTTON_CONFIRM_YES:
        gold=u[2]
        if gold>=rod["price"]:
            gold-=rod["price"]
            db.update_user(user.id, gold=gold, current_rod_name=rod["name"], current_rod_bonus=rod["bonus_percent"])
            await update.message.reply_text(
                f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {rod['name']}!",
                reply_markup=ReplyKeyboardMarkup([
                    [BUTTON_RODS, BUTTON_BAITS],
                    [BUTTON_SELL_ALL, BUTTON_EXCHANGE_GOLD],
                    [BUTTON_GO_BACK],
                ], resize_keyboard=True)
            )
        else:
            need=rod["price"]-gold
            await update.message.reply_text(
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞! –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {need}.",
                reply_markup=ReplyKeyboardMarkup([
                    [BUTTON_RODS, BUTTON_BAITS],
                    [BUTTON_SELL_ALL, BUTTON_EXCHANGE_GOLD],
                    [BUTTON_GO_BACK],
                ], resize_keyboard=True)
            )
    else:
        await update.message.reply_text(
            "–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=ReplyKeyboardMarkup([
                [BUTTON_RODS, BUTTON_BAITS],
                [BUTTON_SELL_ALL, BUTTON_EXCHANGE_GOLD],
                [BUTTON_GO_BACK],
            ], resize_keyboard=True)
        )
    context.user_data.pop("pending_rod",None)
    return ConversationHandler.END

async def baits_section(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text="ü™± –ù–∞–∂–∏–≤–∫–∏ –≤ –ø—Ä–æ–¥–∞–∂–µ:\n"
    for b in BAITS:
        text+=f"{b['name']} - {b['price']} –∑–æ–ª–æ—Ç–∞\n"
    text+="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∂–∏–≤–∫—É –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥."
    keyboard=[[KeyboardButton(b["name"])] for b in BAITS]
    keyboard.append([BUTTON_GO_BACK])
    await update.message.reply_text(text,reply_markup=ReplyKeyboardMarkup(keyboard,resize_keyboard=True))
    return BUY_BAIT

async def buy_bait_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    bait_name=update.message.text.strip()
    if bait_name==BUTTON_GO_BACK:
        await update.message.reply_text(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω.",
            reply_markup=ReplyKeyboardMarkup([
                [BUTTON_RODS, BUTTON_BAITS],
                [BUTTON_SELL_ALL, BUTTON_EXCHANGE_GOLD],
                [BUTTON_GO_BACK],
            ], resize_keyboard=True)
        )
        return ConversationHandler.END
    bait=next((x for x in BAITS if x["name"]==bait_name),None)
    if bait:
        context.user_data["pending_bait"]=bait
        keyboard=[[BUTTON_CONFIRM_YES,BUTTON_CONFIRM_NO]]
        await update.message.reply_text(
            f"–ö—É–ø–∏—Ç—å {bait['name']} –∑–∞ {bait['price']} –∑–æ–ª–æ—Ç–∞?\n–≠—Ç–æ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—à–∏ —à–∞–Ω—Å—ã –ø–æ–π–º–∞—Ç—å —Ä–µ–¥–∫—É—é –∏–ª–∏ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—É—é —Ä—ã–±—É!",
            reply_markup=ReplyKeyboardMarkup(keyboard,resize_keyboard=True)
        )
        return CONFIRM_BUY_BAIT
    else:
        await update.message.reply_text(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞–∂–∏–≤–∫–∞.",
            reply_markup=ReplyKeyboardMarkup([
                [BUTTON_RODS, BUTTON_BAITS],
                [BUTTON_SELL_ALL, BUTTON_EXCHANGE_GOLD],
                [BUTTON_GO_BACK],
            ], resize_keyboard=True)
        )
        return ConversationHandler.END

async def confirm_buy_bait_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    bait=context.user_data.get("pending_bait")
    if not bait:
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞: –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–∞–∂–∏–≤–∫–∏.",
            reply_markup=ReplyKeyboardMarkup([
                [BUTTON_RODS, BUTTON_BAITS],
                [BUTTON_SELL_ALL, BUTTON_EXCHANGE_GOLD],
                [BUTTON_GO_BACK],
            ], resize_keyboard=True)
        )
        return ConversationHandler.END
    u=db.get_user(user.id)
    gold=u[2]
    if update.message.text==BUTTON_CONFIRM_YES:
        if gold>=bait["price"]:
            gold-=bait["price"]
            end_time = datetime.utcnow()+bait["duration"]
            import json
            db.update_user(user.id, gold=gold, current_bait_name=bait["name"],
                           current_bait_end=end_time.isoformat(),
                           current_bait_probs=json.dumps(bait["probabilities"]))
            await update.message.reply_text(
                f"–í—ã –∫—É–ø–∏–ª–∏ {bait['name']}! –¢–µ–ø–µ—Ä—å –≤–∞—à–∏ —à–∞–Ω—Å—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è!",
                reply_markup=ReplyKeyboardMarkup([
                    [BUTTON_RODS, BUTTON_BAITS],
                    [BUTTON_SELL_ALL, BUTTON_EXCHANGE_GOLD],
                    [BUTTON_GO_BACK],
                ], resize_keyboard=True)
            )
        else:
            need=bait["price"]-gold
            await update.message.reply_text(
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞! –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {need}.",
                reply_markup=ReplyKeyboardMarkup([
                    [BUTTON_RODS, BUTTON_BAITS],
                    [BUTTON_SELL_ALL, BUTTON_EXCHANGE_GOLD],
                    [BUTTON_GO_BACK],
                ], resize_keyboard=True)
            )
    else:
        await update.message.reply_text(
            "–ü–æ–∫—É–ø–∫–∞ –Ω–∞–∂–∏–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=ReplyKeyboardMarkup([
                [BUTTON_RODS, BUTTON_BAITS],
                [BUTTON_SELL_ALL, BUTTON_EXCHANGE_GOLD],
                [BUTTON_GO_BACK],
            ], resize_keyboard=True)
        )
    context.user_data.pop("pending_bait",None)
    return ConversationHandler.END

async def universal_go_back_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è...",reply_markup=main_menu_keyboard(user.id))

def help_text(topic):
    if topic == BUTTON_HELP_FISHING:
        return (
            "–†—ã–±–∞–ª–∫–∞ - –≤–∞—à –ø—É—Ç—å –∫ —É–ª–æ–≤—É. –ù–∞–∂–º–∏—Ç–µ ¬´–õ–æ–≤–∏—Ç—å —Ä—ã–±–∫—É¬ª, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –∫–ª—é–Ω–µ—Ç, –∏ —Ç—è–Ω–∏—Ç–µ —Ä—ã–±—É! "
            "–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—É—é —Ä—ã–±—É –æ–ø–æ–∑–Ω–∞–≤–∞–π—Ç–µ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ, –∑–∞—Ç–µ–º –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ."
        )
    elif topic == BUTTON_HELP_RODS:
        return (
            "–£–¥–æ—á–∫–∏ –≤–ª–∏—è—é—Ç –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –ª–æ–≤–ª–∏. –ß–µ–º –ª—É—á—à–µ —É–¥–æ—á–∫–∞, —Ç–µ–º –º–µ–Ω—å—à–µ –∂–¥–∞—Ç—å. "
            "–ü–æ–∫—É–ø–∞–π—Ç–µ —É–¥–æ—á–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ!"
        )
    elif topic == BUTTON_HELP_BAITS:
        return (
            "–ù–∞–∂–∏–≤–∫–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å—ã –ø–æ–π–º–∞—Ç—å —Ä–µ–¥–∫—É—é –∏–ª–∏ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—É—é —Ä—ã–±—É. –ö—É–ø–∏—Ç–µ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ!"
        )
    elif topic == BUTTON_HELP_SHOP:
        return (
            "–í –º–∞–≥–∞–∑–∏–Ω–µ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ –æ–ø–æ–∑–Ω–∞–Ω–Ω—É—é —Ä—ã–±—É –∑–∞ –∑–æ–ª–æ—Ç–æ, –ø–æ–∫—É–ø–∞–π—Ç–µ —É–¥–æ—á–∫–∏, –Ω–∞–∂–∏–≤–∫–∏ "
            "–∏ –º–µ–Ω—è–π—Ç–µ –∑–æ–ª–æ—Ç–æ –Ω–∞ TON."
        )
    elif topic == BUTTON_HELP_GUILDS:
        return (
            "–ì–∏–ª—å–¥–∏–∏ ‚Äî –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ä—ã–±–∞–∫–æ–≤. –í—Å—Ç—É–ø–∞–π—Ç–µ, –ø–æ–≤—ã—à–∞–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≥–∏–ª—å–¥–∏–∏, "
            "–ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –∏ –æ—Å–æ–±—ã–µ —Ç–æ–≤–∞—Ä—ã!"
        )
    elif topic == BUTTON_HELP_ABOUT:
        return (
            "'–û —Ä—ã–±–∞–∫–µ' –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, —É—Ä–æ–≤–µ–Ω—å, –æ–ø—ã—Ç, –ª—é–±–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –≥–∏–ª—å–¥–∏—é."
        )
    return "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."

async def help_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton(BUTTON_HELP_FISHING), KeyboardButton(BUTTON_HELP_RODS)],
        [KeyboardButton(BUTTON_HELP_BAITS), KeyboardButton(BUTTON_HELP_SHOP)],
        [KeyboardButton(BUTTON_HELP_GUILDS), KeyboardButton(BUTTON_HELP_ABOUT)],
        [KeyboardButton(BUTTON_GO_BACK)]
    ]
    await update.message.reply_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?",reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return HELP_MENU

async def help_subtopic_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    topic=update.message.text
    if topic==BUTTON_GO_BACK:
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø–æ–º–æ—â–∏...",reply_markup=ReplyKeyboardMarkup([
            [KeyboardButton(BUTTON_HELP_FISHING), KeyboardButton(BUTTON_HELP_RODS)],
            [KeyboardButton(BUTTON_HELP_BAITS), KeyboardButton(BUTTON_HELP_SHOP)],
            [KeyboardButton(BUTTON_HELP_GUILDS), KeyboardButton(BUTTON_HELP_ABOUT)],
            [KeyboardButton(BUTTON_GO_BACK)]
        ], resize_keyboard=True))
        return HELP_MENU
    txt=help_text(topic)
    await update.message.reply_text(
        txt,
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BUTTON_GO_BACK)]],resize_keyboard=True)
    )
    return HELP_SUBTOPIC

async def help_go_back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",reply_markup=main_menu_keyboard(user.id))
    return ConversationHandler.END

def main():
    global db
    db = Database()

    token = "7646871331:AAHmQunhNsmblkFQsAzYLee3ko5-nOo62iA"
    application = ApplicationBuilder().token(token).build()

    application.bot_data["db"] = db
    application.bot_data["FISH_DATA"] = FISH_DATA

    help_conv_handler=ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(f"^{re.escape(BUTTON_HELP)}$"), help_main_menu)],
        states={
            HELP_MENU:[
                MessageHandler(filters.Regex(f"^{re.escape(BUTTON_HELP_FISHING)}$|^{re.escape(BUTTON_HELP_RODS)}$|^{re.escape(BUTTON_HELP_BAITS)}$|^{re.escape(BUTTON_HELP_SHOP)}$|^{re.escape(BUTTON_HELP_GUILDS)}$|^{re.escape(BUTTON_HELP_ABOUT)}$"), help_subtopic_handler),
                MessageHandler(filters.Regex(f"^{re.escape(BUTTON_GO_BACK)}$"), help_go_back_to_main),
            ],
            HELP_SUBTOPIC:[
                MessageHandler(filters.Regex(f"^{re.escape(BUTTON_GO_BACK)}$"), help_main_menu)
            ]
        },
        fallbacks=[MessageHandler(filters.Regex(f"^{re.escape(BUTTON_GO_BACK)}$"), help_go_back_to_main)],
        allow_reentry=True
    )

    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex(f"^{re.escape(BUTTON_START_FISHING)}$"), begin_fishing),
            MessageHandler(filters.Regex(f"^{re.escape(BUTTON_RODS)}$"), rods_section),
            MessageHandler(filters.Regex(f"^{re.escape(BUTTON_BAITS)}$"), baits_section),
            MessageHandler(filters.Regex(f"^{re.escape(BUTTON_EXCHANGE_GOLD)}$"), exchange_gold_handler_func),
            MessageHandler(filters.Regex(f"^{re.escape(BUTTON_LEADERBOARD)}$"), leaderboard_handler_func)
        ],
        states={
            ASK_NICKNAME:[MessageHandler((filters.TEXT & ~filters.COMMAND),set_nickname)],
            BUY_ROD:[MessageHandler((filters.TEXT & ~filters.COMMAND),buy_rod_handler)],
            CONFIRM_BUY_ROD:[MessageHandler(filters.Regex(f"^{BUTTON_CONFIRM_YES}$|^{BUTTON_CONFIRM_NO}$"),confirm_buy_rod_handler)],
            BUY_BAIT:[MessageHandler((filters.TEXT & ~filters.COMMAND),buy_bait_handler)],
            CONFIRM_BUY_BAIT:[MessageHandler(filters.Regex(f"^{BUTTON_CONFIRM_YES}$|^{BUTTON_CONFIRM_NO}$"),confirm_buy_bait_handler)],
            EXCHANGE:[MessageHandler(filters.Regex(f"^{BUTTON_CONFIRM_YES}$|^{BUTTON_CONFIRM_NO}$"),confirm_exchange_handler)],
            LEADERBOARD_CATEGORY:[
                MessageHandler(filters.Regex(f"^{re.escape(BUTTON_TOTAL_GOLD)}$|^{re.escape(BUTTON_TOTAL_KG)}$|^{re.escape(BUTTON_TOTAL_EXPERIENCE)}$"),leaderboard_show),
                MessageHandler(filters.Regex(f"^{re.escape(BUTTON_GO_BACK)}$"), go_back)
            ],
        },
        fallbacks=[
            MessageHandler(filters.Regex(f"^{re.escape(BUTTON_GO_BACK)}$"), go_back),
            CommandHandler("cancel", cancel_nickname)
        ],
        allow_reentry=True
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(guild_conversation_handler())
    application.add_handler(conv_handler)
    application.add_handler(help_conv_handler)
    application.add_handler(quests_conversation_handler())

    application.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BUTTON_LAKE)}$"), lake_handler))
    application.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BUTTON_INVENTORY)}$"), inventory_handler_func))
    application.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BUTTON_SHOP)}$"), shop_handler_func))
    application.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BUTTON_ABOUT_FISHERMAN)}$"), about_fisherman_handler))
    application.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BUTTON_CATCH_FISH)}$"), catch_fish_handler))
    application.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BUTTON_UPDATE)}$"), update_fishing_status_handler))
    application.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BUTTON_PULL)}$"), pull_hook_handler))
    application.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BUTTON_IDENTIFY_FISH)}$"), identify_fish_handler))
    application.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BUTTON_SELL_ALL)}$"), sell_fish_handler_func))

    application.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BUTTON_GO_BACK)}$"), universal_go_back_handler))

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.run_polling()

if __name__=="__main__":
    main()
