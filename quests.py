import logging
import random
import math
import re
import sqlite3
from datetime import datetime, timedelta

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

logger = logging.getLogger(__name__)

BUTTON_TASKS = "üìù –ó–∞–¥–∞–Ω–∏—è"
BUTTON_CAT = "–ö–æ—Ç–∏–∫"
BUTTON_SAILOR = "–°—Ç–∞—Ä—ã–π –ú–æ—Ä—è–∫"
BUTTON_ACCEPT = "–î–∞"
BUTTON_DECLINE = "–ù–µ—Ç"
BUTTON_OK = "–•–æ—Ä–æ—à–æ!"
BUTTON_BACK_QUESTS = "üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞–Ω–∏—è–º"
BUTTON_NO_FISH = "–ü–æ–∫–∞ –Ω–µ—Ç"
BUTTON_YES_TAKE = "–î–∞, –±–µ—Ä–∏!"
BUTTON_GO_BACK = "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è"

QUESTS_MENU = 2000
CAT_STATE = 2001
SAILOR_STATE = 2002

CAT_COOLDOWN_HOURS = 6
CAT_BONUS_MINUTES = 120
CAT_COLORS = ["–°–µ—Ä—ã–π", "–ü–æ–ª–æ—Å–∞—Ç—ã–π", "–†—ã–∂–∏–π", "–ú—É—Ä–ª—ã–∫–∞—é—â–∏–π", "–ì—Ä—É—Å—Ç–Ω—ã–π", "–ú–æ—Ö–Ω–∞—Ç—ã–π", "–û–∑–æ—Ä–Ω–æ–π"]

def main_menu_keyboard_quests():
    """
    –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ fishingbot.py.
    –ì–∏–ª—å–¥–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ "üõ°Ô∏è –ì–∏–ª—å–¥–∏–∏" –≤—Å–µ–≥–¥–∞, —É–ø—Ä–æ—â—ë–Ω–Ω–æ.
    """
    return ReplyKeyboardMarkup([
        [KeyboardButton("üèû –û–∑–µ—Ä–æ"), KeyboardButton("üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"), KeyboardButton("üë§ –û —Ä—ã–±–∞–∫–µ")],
        [KeyboardButton("üè™ –ú–∞–≥–∞–∑–∏–Ω"), KeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü–∞ –õ–∏–¥–µ—Ä–æ–≤"), KeyboardButton("üõ°Ô∏è –ì–∏–ª—å–¥–∏–∏")],
        [KeyboardButton("üìù –ó–∞–¥–∞–Ω–∏—è"), KeyboardButton("üîç –ü–æ–º–æ—â—å")]
    ], resize_keyboard=True)

def tasks_main_menu_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton(BUTTON_CAT), KeyboardButton(BUTTON_SAILOR)],
        [KeyboardButton(BUTTON_GO_BACK)]
    ], resize_keyboard=True)

def get_required_xp(level):
    """
    –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥—Å—á—ë—Ç–∞ XP –¥–ª—è —É—Ä–æ–≤–Ω–µ–π.
    """
    LEVELS = [
        {"level": 1, "required_xp": 10},
        {"level": 2, "required_xp": 38},
        {"level": 3, "required_xp": 89},
        {"level": 4, "required_xp": 169},
        {"level": 5, "required_xp": 477},
        {"level": 6, "required_xp": 1008},
        {"level": 7, "required_xp": 1809},
        {"level": 8, "required_xp": 2940},
        {"level": 9, "required_xp": 4470},
        {"level": 10, "required_xp": 6471},
    ]
    for lvl in range(11,76):
        required_xp = int(LEVELS[-1]["required_xp"] * 1.5)
        LEVELS.append({"level": lvl,"required_xp": required_xp})
    for lvl_data in LEVELS:
        if lvl_data["level"]==level:
            return lvl_data["required_xp"]
    if level>LEVELS[-1]["level"]:
        last_required=LEVELS[-1]["required_xp"]
        additional_levels=level-LEVELS[-1]["level"]
        return int(last_required*(1.5**additional_levels))
    return 10

def update_rank_local(user_id, db_):
    """
    –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è update_rank.
    """
    LEVELS = [
        {"level": 1, "required_xp": 10, "rank": "–Æ–Ω—ã–π —Ä—ã–±–∞–∫"},
        {"level": 2, "required_xp": 38, "rank": "–Æ–Ω—ã–π —Ä—ã–±–∞–∫"},
        {"level": 3, "required_xp": 89, "rank": "–Æ–Ω—ã–π —Ä—ã–±–∞–∫"},
        {"level": 4, "required_xp": 169, "rank": "–ù–∞—á–∏–Ω–∞—é—â–∏–π –ª–æ–≤–µ—Ü"},
        {"level": 5, "required_xp": 477, "rank": "–ù–∞—á–∏–Ω–∞—é—â–∏–π –ª–æ–≤–µ—Ü"},
        {"level": 6, "required_xp": 1008, "rank": "–ù–∞—á–∏–Ω–∞—é—â–∏–π –ª–æ–≤–µ—Ü"},
        {"level": 7, "required_xp": 1809, "rank": "–õ–æ–≤–µ—Ü –º–µ–ª–∫–æ–π —Ä—ã–±—ë—à–∫–∏"},
        {"level": 8, "required_xp": 2940, "rank": "–õ–æ–≤–µ—Ü –º–µ–ª–∫–æ–π —Ä—ã–±—ë—à–∫–∏"},
        {"level": 9, "required_xp": 4470, "rank": "–õ–æ–≤–µ—Ü –º–µ–ª–∫–æ–π —Ä—ã–±—ë—à–∫–∏"},
        {"level": 10, "required_xp": 6471, "rank": "–û–ø—ã—Ç–Ω—ã–π —É–¥–∏–ª—å—â–∏–∫"},
    ]
    for lvl in range(11,76):
        required_xp = int(LEVELS[-1]["required_xp"] * 1.5)
        if 11 <= lvl <= 15:
            rank = "–õ—é–±–∏—Ç–µ–ª—å –∫–ª—ë–≤–∞"
        elif 16 <= lvl <= 20:
            rank = "–ó–Ω–∞—Ç–æ–∫ –∫—Ä—é—á–∫–æ–≤"
        elif 21 <= lvl <= 25:
            rank = "–ú–∞—Å—Ç–µ—Ä –Ω–∞–∂–∏–≤–∫–∏"
        elif 26 <= lvl <= 30:
            rank = "–ò—Å–∫—É—Å–Ω—ã–π —Ä—ã–±–∞–∫"
        elif 31 <= lvl <= 35:
            rank = "–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ —É–ª–æ–≤–æ–º"
        elif 36 <= lvl <= 40:
            rank = "–ù–∞—Å—Ç–æ—è—â–∏–π —Ä—ã–±–æ–ª–æ–≤"
        elif 41 <= lvl <= 45:
            rank = "–í–∏—Ä—Ç—É–æ–∑ —Ä—ã–±–∞–ª–∫–∏"
        elif 46 <= lvl <= 50:
            rank = "–£–∫—Ä–æ—Ç–∏—Ç–µ–ª—å —Ä–µ–∫"
        elif 51 <= lvl <= 55:
            rank = "–ú–æ—Ä—Å–∫–æ–π –¥–æ–±—ã—Ç—á–∏–∫"
        elif 56 <= lvl <= 60:
            rank = "–õ–µ–≥–µ–Ω–¥–∞ –ø—Ä—É–¥–∞"
        elif 61 <= lvl <= 65:
            rank = "–í–ª–∞—Å—Ç–µ–ª–∏–Ω –æ–∑—ë—Ä"
        elif 66 <= lvl <= 70:
            rank = "–ú–∞—Å—Ç–µ—Ä —Ä—ã–±–∞–ª–∫–∏"
        elif 71 <= lvl <= 75:
            rank = "–≠–ø–∏—á–µ—Å–∫–∏–π —Ä—ã–±–æ–ª–æ–≤"
        else:
            rank = "–†—ã–±–æ–ª–æ–≤"
        LEVELS.append({"level": lvl, "required_xp": required_xp, "rank": rank})

    u=db_.get_user(user_id)
    level = u[4]
    for lvl_data in LEVELS:
        if lvl_data["level"]==level:
            db_.update_user(user_id, rank=lvl_data["rank"])
            return

def simple_check_level_up(user_id, db_):
    """
    –õ–æ–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ level-up, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è fucntion –≤ fishingbot.py,
    –Ω–æ –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞.
    """
    uu=db_.get_user(user_id)
    exp=uu[3]
    lvl=uu[4]
    gol=uu[2]
    level_up=False
    gold_reward=0
    new_lvl=None
    while lvl<=75 and exp>=get_required_xp(lvl):
        lvl+=1
        reward = lvl*2
        gol+=reward
        gold_reward+=reward
        level_up=True
        new_lvl=lvl
    if new_lvl:
        db_.update_user(user_id, level=new_lvl, gold=gol)
        update_rank_local(user_id, db_)
    return level_up,new_lvl,gold_reward

def apply_bonus_to_xp(user_id, base_xp, db_):
    if base_xp<=0:
        return base_xp
    bonus = db_.get_bonus(user_id)
    if not bonus:
        return base_xp
    xp_percent = bonus["bonus_xp_percent"]
    if xp_percent<=0:
        return base_xp
    inc = math.ceil(base_xp*(xp_percent/100.0))
    if inc<1:
        inc=1
    return base_xp+inc

def apply_bonus_to_gold(user_id, base_gold, db_):
    if base_gold<=0:
        return base_gold
    bonus = db_.get_bonus(user_id)
    if not bonus:
        return base_gold
    gold_percent = bonus["bonus_gold_percent"]
    if gold_percent<=0:
        return base_gold
    inc = math.ceil(base_gold*(gold_percent/100.0))
    if inc<1:
        inc=1
    return base_gold+inc

# ------------------- –ö–û–¢–ò–ö -------------------

async def tasks_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–í—ã –≤—ã—Ö–æ–¥–∏—Ç–µ –Ω–∞ –æ–∂–∏–≤–ª—ë–Ω–Ω—É—é –ø–ª–æ—â–∞–¥—å, –≥–¥–µ –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è: "
        "–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ –∏–ª–∏ –≤–∑—è—Ç—å –Ω–µ–æ–±—ã—á–Ω—ã–µ –ø–æ—Ä—É—á–µ–Ω–∏—è.\n"
        "–ö–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–≤–µ—Å—Ç–∏—Ç—å?"
    )
    await update.message.reply_text(text, reply_markup=tasks_main_menu_keyboard())
    return QUESTS_MENU

async def cat_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    db_=context.application.bot_data["db"]
    quests_data=db_.get_quests(user.id)
    cat_next_str = quests_data["cat_next_time"]
    cat_color = quests_data["cat_color"]

    if cat_next_str:
        cat_next_dt=datetime.fromisoformat(cat_next_str)
        now=datetime.utcnow()
        remain=(cat_next_dt-now).total_seconds()
        if remain>0:
            hours_left=int(remain//3600)+1
            await update.message.reply_text(
                f"–°–µ–π—á–∞—Å –∫–æ—Ç–∏–∫ –∑–∞–Ω—è—Ç —Å–≤–æ–∏–º–∏ –≤–∞–∂–Ω—ã–º–∏ –∫–æ—à–∞—á—å–∏–º–∏ –¥–µ–ª–∞–º–∏!\n"
                f"–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ... –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {hours_left} —á–∞—Å(–æ–≤).",
                reply_markup=tasks_main_menu_keyboard()
            )
            return QUESTS_MENU

    if not cat_color:
        color = random.choice(CAT_COLORS)
        db_.update_quests(user.id, cat_color=color)
    else:
        color = cat_color

    text=(
        f"–ü–µ—Ä–µ–¥ –≤–∞–º–∏ {color} –∫–æ—Ç–∏–∫. –û–Ω –ø–æ–¥–æ—à—ë–ª –∏ –ø–æ—Ç–µ—Ä—Å—è, –º—É—Ä–ª—ã–∫–∞—è, –æ–± –≤–∞—à—É –Ω–æ–≥—É. "
        "–ö–∞–∂–µ—Ç—Å—è, –æ–Ω –æ—á–µ–Ω—å –≥–æ–ª–æ–¥–µ–Ω!\n–ù–∞–∫–æ—Ä–º–∏—Ç—å –µ–≥–æ?"
    )
    keyboard=[
        [KeyboardButton(BUTTON_ACCEPT), KeyboardButton(BUTTON_DECLINE)],
        [KeyboardButton(BUTTON_BACK_QUESTS)]
    ]
    await update.message.reply_text(text, reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return CAT_STATE

async def cat_decision(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    db_=context.application.bot_data["db"]
    text=update.message.text

    if text==BUTTON_ACCEPT:
        inv=db_.get_inventory(user.id)
        fish_list=[(k,v) for k,v in inv.items() if v>0 and isinstance(k,tuple)]
        if not fish_list:
            await update.message.reply_text(
                "–ö–æ—Ç–∏–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –≤–∞—Å –≥—Ä—É—Å—Ç–Ω—ã–º–∏ –≥–ª–∞–∑–∞–º–∏. –ö–∞–∂–µ—Ç—Å—è, –æ–Ω —Ö–æ—á–µ—Ç —Ä—ã–±–∫–∏...",
                reply_markup=tasks_main_menu_keyboard()
            )
            return QUESTS_MENU
        fish_list.sort(key=lambda x:x[0][1])
        (fname,w,r), qty=fish_list[0]
        inv[(fname,w,r)] = qty-1
        db_.update_inventory(user.id, inv)
        # —É–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç –∏–∑ –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        reply=(
            f"–í—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞–∫–æ—Ä–º–∏–ª–∏ –∫–æ—Ç–∏–∫–∞ —Ä—ã–±–∫–æ–π {fname}!\n"
            "–û–Ω –≤—Å—ë —Å—ä–µ–ª, –µ—â—ë —Ä–∞–∑ –ø–æ—Ç–µ—Ä—Å—è –æ–± –Ω–æ–≥–∏ –∏ —É–±–µ–∂–∞–ª, –∫–∞–∂–µ—Ç—Å—è –¥–æ–≤–æ–ª—å–Ω—ã–π!\n"
            "–í—ã —Å–¥–µ–ª–∞–ª–∏ —Ö–æ—Ä–æ—à–µ–µ –¥–µ–ª–æ!"
        )
        await update.message.reply_text(reply)

        bonus_end = datetime.utcnow()+timedelta(minutes=CAT_BONUS_MINUTES)
        db_.update_bonus(user.id,
            bonus_name="–î—Ä—É–≥ –∂–∏–≤–æ—Ç–Ω—ã—Ö",
            bonus_end=bonus_end.isoformat(),
            bonus_fishing_speed=1,
            bonus_gold_percent=1,
            bonus_xp_percent=1
        )

        cat_next = datetime.utcnow()+timedelta(hours=CAT_COOLDOWN_HOURS)
        db_.update_quests(user.id, cat_next_time=cat_next.isoformat(), cat_color=None)

        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø–ª–æ—â–∞–¥—å...",reply_markup=tasks_main_menu_keyboard())
        return QUESTS_MENU
    elif text==BUTTON_DECLINE:
        await update.message.reply_text(
            "–ö–æ—Ç–∏–∫ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ –≤–∞—Å —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–Ω–æ...",
            reply_markup=tasks_main_menu_keyboard()
        )
        return QUESTS_MENU
    else:
        await update.message.reply_text(
            "–•–æ—Ä–æ—à–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è...",
            reply_markup=tasks_main_menu_keyboard()
        )
        return QUESTS_MENU

async def sailor_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    db_=context.application.bot_data["db"]
    quests_data=db_.get_quests(user.id)
    fish_name=quests_data["sailor_fish_name"]
    fish_rarity=quests_data["sailor_fish_rarity"]
    gold=quests_data["sailor_gold"]
    xp=quests_data["sailor_xp"]
    active=bool(quests_data["sailor_active"])

    if active and fish_name and fish_rarity:
        text_=(f"–°—Ç–∞—Ä—ã–π –ú–æ—Ä—è–∫:\n–ù—É —á—Ç–æ, –ø–æ–π–º–∞–ª —Ä—ã–±—É {fish_name}?\n")
        inv=db_.get_inventory(user.id)
        matches=[]
        for (fname,w,r),qty in inv.items():
            if qty>0 and r==fish_rarity:
                if fname.endswith(fish_name):
                    matches.append(((fname,w,r),qty))
        if not matches:
            keyboard = [
                [KeyboardButton(BUTTON_NO_FISH)],
                [KeyboardButton(BUTTON_BACK_QUESTS)]
            ]
            await update.message.reply_text(text_, reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
            return SAILOR_STATE
        else:
            keyboard = [
                [KeyboardButton(BUTTON_YES_TAKE), KeyboardButton(BUTTON_NO_FISH)],
                [KeyboardButton(BUTTON_BACK_QUESTS)]
            ]
            text_ += "–û—Ç–¥–∞—Ç—å —Ä—ã–±—É?\n"
            await update.message.reply_text(text_, reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
            return SAILOR_STATE
    else:
        # –≥–µ–Ω–µ—Ä–∏–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        rarities=["common","rare","legendary"]
        chosen_rarity=random.choice(rarities)
        if chosen_rarity=="common":
            xp=random.randint(15,35)
            gold=random.randint(10,15)
            if "FISH_DATA" not in context.application.bot_data:
                names=["–ö–∞—Ä–∞—Å—å","–û–∫—É–Ω—å","–õ–µ—â","–†–æ—Ç–∞–Ω","–£–≥–æ—Ä—å","–°—É–¥–∞–∫"]
            else:
                names=context.application.bot_data["FISH_DATA"]["common"]["names"]
        elif chosen_rarity=="rare":
            xp=random.randint(40,100)
            gold=random.randint(25,50)
            if "FISH_DATA" not in context.application.bot_data:
                names=["–ö–∞—Ä–∞—Å—å","–û–∫—É–Ω—å","–õ–µ—â","–†–æ—Ç–∞–Ω","–£–≥–æ—Ä—å","–°—É–¥–∞–∫"]
            else:
                names=context.application.bot_data["FISH_DATA"]["rare"]["names"]
        else:
            xp=random.randint(250,500)
            gold=random.randint(50,100)
            if "FISH_DATA" not in context.application.bot_data:
                names=["–Ø–∑—å","–°–æ–º","–ù–∞–ª–∏–º","–¢—É–Ω–µ—Ü","–£–≥–æ—Ä—å","–õ–æ—Å–æ—Å—å","–û—Å—ë—Ç—Ä"]
            else:
                names=context.application.bot_data["FISH_DATA"]["legendary"]["names"]

        chosen_name = random.choice(names)

        db_.update_quests(user.id,
            sailor_fish_name=chosen_name,
            sailor_fish_rarity=chosen_rarity,
            sailor_gold=gold,
            sailor_xp=xp,
            sailor_active=0
        )

        text_=(
            "–í—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –∫ –°—Ç–∞—Ä–æ–º—É –ú–æ—Ä—è–∫—É, –∫–æ—Ç–æ—Ä—ã–π —Å–∏–¥–∏—Ç –≤ —Å–≤–æ—ë–º –∫—Ä–µ—Å–ª–µ –∏ –∫—É—Ä–∏—Ç —Ç—Ä—É–±–∫—É...\n"
            "–û–Ω –ø–æ–¥–Ω–∏–º–∞–µ—Ç –≥–ª–∞–∑–∞ –Ω–∞ –≤–∞—Å:\n\n"
            f"–°–ª—É—à–∞–π, –∞ –Ω–µ —Ö–æ—á–µ—à—å –ø–æ–¥–∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å?\n"
            f"–ú–Ω–µ –æ—á–µ–Ω—å –Ω—É–∂–Ω–∞ —Ä—ã–±–∞ {chosen_name}, —É –º–µ–Ω—è —Ç–∞–∫–∞—è –±—É–¥–µ—Ç –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.\n"
            f"–ó–∞–ø–ª–∞—á—É {xp} –æ–ø—ã—Ç–∞ –∏ {gold} –∑–æ–ª–æ—Ç–∞!\n\n"
            "–ß—Ç–æ —Å–∫–∞–∂–µ—à—å?"
        )
        keyboard=[
            [KeyboardButton(BUTTON_ACCEPT), KeyboardButton(BUTTON_DECLINE)],
            [KeyboardButton(BUTTON_BACK_QUESTS)]
        ]
        await update.message.reply_text(text_, reply_markup=ReplyKeyboardMarkup(keyboard,resize_keyboard=True))
        return SAILOR_STATE

async def sailor_decision(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    db_=context.application.bot_data["db"]
    text=update.message.text
    quests_data=db_.get_quests(user.id)
    fish_name=quests_data["sailor_fish_name"]
    fish_rarity=quests_data["sailor_fish_rarity"]
    gold=quests_data["sailor_gold"]
    xp=quests_data["sailor_xp"]
    active=bool(quests_data["sailor_active"])

    if not fish_name or not fish_rarity:
        await update.message.reply_text(
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ...",
            reply_markup=tasks_main_menu_keyboard()
        )
        return QUESTS_MENU

    if text==BUTTON_ACCEPT and not active:
        db_.update_quests(user.id, sailor_active=1)
        await update.message.reply_text(
            "–í–æ—Ç –∏ –æ—Ç–ª–∏—á–Ω–æ! –£–¥–∞—á–∏, –∂–¥—É —Å —É–ª–æ–≤–æ–º!",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BUTTON_OK)]],resize_keyboard=True)
        )
        return SAILOR_STATE
    elif text==BUTTON_DECLINE and not active:
        db_.update_quests(user.id, sailor_fish_name=None, sailor_fish_rarity=None, sailor_gold=0, sailor_xp=0, sailor_active=0)
        await update.message.reply_text("–ù—É –∫–∞–∫ —Ö–æ—á–µ—à—å...",reply_markup=tasks_main_menu_keyboard())
        return QUESTS_MENU
    elif text==BUTTON_OK and active:
        await update.message.reply_text("–•–æ—Ä–æ—à–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è...",reply_markup=tasks_main_menu_keyboard())
        return QUESTS_MENU
    elif text==BUTTON_NO_FISH:
        await update.message.reply_text("–ù—É –ª–∞–¥–Ω–æ, –ø–æ–π–º–∞–π —Å–Ω–∞—á–∞–ª–∞...",reply_markup=tasks_main_menu_keyboard())
        return QUESTS_MENU
    elif text==BUTTON_YES_TAKE and active:
        inv=db_.get_inventory(user.id)
        matches=[]
        for (fname,w,r),qty in inv.items():
            if qty>0 and r==fish_rarity:
                if fname.endswith(fish_name):
                    matches.append(((fname,w,r), qty))
        if not matches:
            await update.message.reply_text("–ü–æ—Ö–æ–∂–µ, —É –≤–∞—Å –Ω–µ—Ç –Ω—É–∂–Ω–æ–π —Ä—ã–±—ã...", reply_markup=tasks_main_menu_keyboard())
            return QUESTS_MENU
        (f0,w0,r0), qty0 = matches[0]
        inv[(f0,w0,r0)] = qty0-1
        db_.update_inventory(user.id, inv)

        final_xp = apply_bonus_to_xp(user.id, xp, db_)
        final_gold=apply_bonus_to_gold(user.id, gold, db_)

        u=db_.get_user(user.id)
        new_exp=u[3]+final_xp
        new_gold=u[2]+final_gold
        db_.update_user(user.id, experience=new_exp, gold=new_gold)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å
        level_up,new_level,g_reward=simple_check_level_up(user.id, db_)
        msg=(f"–ó–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ {final_xp} –æ–ø—ã—Ç–∞ –∏ {final_gold} –∑–æ–ª–æ—Ç–∞!")
        if level_up:
            msg+=f"\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω –¥–æ {new_level}!\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∑–æ–ª–æ—Ç–æ: {g_reward}"

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
        db_.update_quests(user.id,
            sailor_fish_name=None,
            sailor_fish_rarity=None,
            sailor_gold=0,
            sailor_xp=0,
            sailor_active=0
        )
        await update.message.reply_text(msg, reply_markup=tasks_main_menu_keyboard())
        return QUESTS_MENU
    else:
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è...",reply_markup=tasks_main_menu_keyboard())
        return QUESTS_MENU

async def go_back_quests_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user=update.effective_user
    await update.message.reply_text(
        "–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –ø–ª–æ—â–∞–¥—å...",
        reply_markup=main_menu_keyboard_quests()
    )
    return ConversationHandler.END

def quests_conversation_handler():
    guild_entry_filter = filters.Regex(f"^{re.escape(BUTTON_TASKS)}$")
    return ConversationHandler(
        entry_points=[MessageHandler(guild_entry_filter, tasks_entry)],
        states={
            QUESTS_MENU:[
                MessageHandler(filters.Regex("^"+re.escape(BUTTON_CAT)+"$"), cat_handler),
                MessageHandler(filters.Regex("^"+re.escape(BUTTON_SAILOR)+"$"), sailor_handler),
                MessageHandler(filters.Regex("^"+re.escape(BUTTON_GO_BACK)+"$"), go_back_quests_main),
            ],
            CAT_STATE:[
                MessageHandler(filters.Regex(f"^{re.escape(BUTTON_ACCEPT)}$|^{re.escape(BUTTON_DECLINE)}$|^{re.escape(BUTTON_BACK_QUESTS)}$"), cat_decision)
            ],
            SAILOR_STATE:[
                MessageHandler(filters.Regex(f"^{re.escape(BUTTON_ACCEPT)}$|^{re.escape(BUTTON_DECLINE)}$|^{re.escape(BUTTON_OK)}$|^{re.escape(BUTTON_BACK_QUESTS)}$|^{re.escape(BUTTON_NO_FISH)}$|^{re.escape(BUTTON_YES_TAKE)}$"), sailor_decision)
            ],
        },
        fallbacks=[MessageHandler(filters.Regex("^"+re.escape(BUTTON_GO_BACK)+"$"), go_back_quests_main)],
        allow_reentry=True
    )